{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Syllabus","text":""},{"location":"#syllabus","title":"Syllabus","text":""},{"location":"#course-information","title":"Course Information","text":"<p>SEMESTER: Fall 2025</p> <p>LOCATION: Scripps College, Steele 229  </p> <p>TIME: Tuesday and Thursday 4:15-6:45, 8/25-12/3</p> <p>Weekly class hours: 5 Hours</p> <p>External study hours: 9 Hours</p> <p>INSTRUCTOR Vinny Roca, Scripps College Email: vroca@scrippscollege.edu Office Hours: Lang 227. By appointment; Tuesday &amp; Thursday 1:30-2:30 Schedule office hours</p>"},{"location":"#course-description","title":"Course Description","text":"<p>This interdisciplinary introductory course explores technical, artistic, and cultural aspects of programming. Using accessible and inclusive programming environments, students will learn the fundamentals of programming through making visual, interactive, and sound-based projects. Through readings and weekly discussions, students will engage with the political, economic, and cultural impact of code with a particular interest in code as an artistic medium and the power relations in programming.</p>"},{"location":"#learning-outcomes","title":"Learning Outcomes","text":"<p>The objective of this course is to introduce the fundamental skills of programming for the arts and contextualize this technical knowledge within the cultural, social, economic, and political impact of programming. Through reading responses, projects, discussions, and technical tutorials, students will achieve the following learning outcomes:</p> <ul> <li>Technical proficiency in the fundamentals of object-oriented and procedural programming.</li> <li>Ability to analyze the role of programming in media art.</li> <li>Ability to analyze programming as a cultural, historical, and technical object.</li> <li>Gain a critical understanding of the history and cultural impact of programming.</li> <li>Ability to create visual, interactive, and sound-based media art projects using programming.</li> </ul>"},{"location":"#grading-assignments-course-policy","title":"Grading, Assignments, Course Policy","text":""},{"location":"#course-breakdown","title":"Course Breakdown","text":"% 10 Time 15 Narrative 15 Performance 20 Game Ring 10 Participation 20 Reading Responses 30 Exercises"},{"location":"#evaluation-criteria","title":"Evaluation Criteria","text":""},{"location":"#projects","title":"Projects","text":"<p>Completed projects will be graded using the following criteria:</p> Technique Is the assignment well-crafted? Is the conceptual idea behind the assignment supported by the technical and artistic decisions made by the student? Concept Does the student comprehend the scope of the assignment? Is the student able to communicate their ideas clearly? Does the student demonstrate comprehension of the concepts covered in class? Is the student able to articulate the concepts behind their work? Generosity Does the student exhibit insight, criticality, and risk-taking in their work? How much sensitivity and critical insight does the student display towards personal assignments and in critiquing their peers\u2019 work?"},{"location":"#exercises","title":"Exercises","text":"<p>Exercises are mainly for student practice and experimentation. Exercises will be graded on their level of completion following the exercise prompt.</p>"},{"location":"#participation","title":"Participation","text":"<p>As this course includes in-person discussions, critiques, tutorials and exercises active participation and attendance make up 10 percent of students\u2019 final grade. All students are required to participate actively during the discussion periods, which will be facilitated using each student\u2019s reading responses.</p> <p>Students more than ten minutes late for class will be marked as late. Three late marks will result in an unexcused absence. More than two unexcused absences may, at the instructor\u2019s discretion, affect the final participation grade.</p> <p>All critique classes are mandatory. If you anticipate missing a critique class or expect to have more than two absences during the course, inform the instructor as soon as possible.</p>"},{"location":"#reading-responses","title":"Reading Responses","text":"<p>Reading responses are due by 5 p.m. the day before discussions. Reading responses should be posted in the proper Discord channel.</p> <p>Reading responses will be graded on the level of engagement the student has with the text. Is the student connecting the text to other readings or experiences? Is the student engaging with the text through questions, disagreements, or new lines of thought?</p> <p>As reading responses are essential to the discussion section of the course, late reading responses will not be accepted.</p>"},{"location":"#late-work-and-extensions","title":"Late Work and Extensions","text":"<p>For all exercises, late work will not be accepted. Completing exercises on time is essential to the progression of the course. Not completing exercises will result in a student falling behind. In the situation that extra time is needed to complete exercises, students must reach out to the instructor as soon as possible.</p> <p>Late projects not ready by their assigned crit day will automatically lose one letter grade. Each day the project is late, it will lose one more letter grade. After three days, the project will not be accepted.</p>"},{"location":"#class-website","title":"Class Website","text":"<p>Class website will serve a a live syllabus, schedule, and notes for this course. All exercises and assignments are described on the class website.</p>"},{"location":"#discord-and-email","title":"Discord and Email","text":"<p>We will be submitting and sharing our exercises, reading responses and projects through Discord. Students will be invited to join the class Discord server on the first day of class.</p> <p>I will respond to community Discord messages and email within 24 hrs of receipt. I will respond to messages sent over the weekend on the following Monday.</p> <p>For course communication, please send me an email rather than a DM on Discord.</p>"},{"location":"#readings","title":"Readings","text":"<p>All external readings and videos will be provided using Box.</p> <p>This link is password protected - password can be found in the class Discord.</p> <p>Class Readings &amp;&amp; Resources;</p>"},{"location":"#lab-hours-course-materials","title":"Lab Hours &amp;&amp; Course Materials","text":"<p>Students are expected to work on exercises and assignments outside of class. To complete some assignments, students will need to make use of their personal computer.</p> <p>Students enrolled in this course will have 24/hr access to this computer lab. If you have any issues accessing the lab outside of the course hours, please contact me.</p> <p>Note, some parts of this class will require:</p> <ol> <li>A personal computer with a camera, microphone, and sound output</li> <li>Headphones, wired or wireless</li> </ol> <p>If you do not have access to this technology please contact me as soon as possible.</p>"},{"location":"#use-of-generative-ai","title":"Use of Generative AI","text":"<p>ChatGPT and many other models, including Claude or CoPilot, can write code. As new programmers, this will be very helpful for you. However, it can also be detrimental. </p> <p>The goal of this course is to teach you the fundamentals of programming and to explore how these fundamentals have drastically changed how one might approach being an artist. ChatGPT or other models can allow us to skip over these fundamentals, moving us to an endless cycle of copy, paste, test, copy, paste, test, and so on\u2026 </p> <p>Coding, or the act of writing code, is always the last step. Before comes an intensive process of thinking, testing on paper, sketching, diagramming, or whatever approach you choose. Programming is not about writing code; it is about thinking and creating with our computers, knowing how changing variables or creating objects can give us both the results we aimed for, but also unexpected results.</p> <p>In this way, ChatGPT can be harmful to the beginner programmer. It removes the need for a fundamental understanding and replaces it with the illusion of knowledge. I strongly suggest that over this course, ChatGPT becomes a last resort. There are many other resources available to you: In-class help, Discord messages, your peers, office hours, p5 examples, online videos, and much more. If you find yourself moving to type in a prompt, I suggest first asking yourself, \u201cIs there more I can do to work towards this problem?\u201d</p>"},{"location":"#class-policy","title":"Class Policy","text":"<p>Any code found to be copied and pasted from ChatGPT will be considered plagiarism.</p>"},{"location":"#examples","title":"Examples","text":"<p>Some bad uses of prompt-based AI: </p> <ul> <li>Write a p5 sketch to do x.</li> <li>Make this p5 sketch look more interesting.</li> </ul> <p>Some good uses:</p> <ul> <li>How do I calculate points across the circumference of a circle?</li> <li>How do I find the distance between two vectors?</li> <li>How does a computer change the value of a variable in memory?</li> </ul> <p>What these examples above tend to demonstrate is that good uses of ChatGPT assist us in our learning process as we write our programs. </p> <p>There will be a temptation to make more complex projects with the use of ChatGPT. I urge you all to acknowledge your level of knowledge and abilities, and to trust that as you continue to make more art with code, as you write more and more complex programs, your knowledge of programming will grow, and so will your ability to know when ChatGPT and similar tools are supporting your learning.</p>"},{"location":"#scripps-college-land-acknowledgement","title":"Scripps College Land Acknowledgement","text":"<p>We would like to respectfully acknowledge that Scripps College sits within the historic homeland of the Tongva people. We acknowledge the painful history of genocide and colonization in our area. We acknowledge the strength and resilience of the Tongva people of the past, present, and future as the original caretakers of the land, water, and air, and we recognize our responsibility to be respectful stewards of the Scripps College campus. Today, this area and this campus are home to many Indigenous people from across the globe and we are proud that they are part of our community and institution.</p>"},{"location":"#statement-on-inclusion","title":"Statement on Inclusion","text":"<p>We understand the classroom as a space for practicing freedom; where one may challenge psychic, social, and cultural borders and create meaningful artistic expressions. To do so we must acknowledge and embrace the different identities and backgrounds we inhabit. This means that we will use preferred pronouns, respect self-identifications, and be mindful of special needs. Disagreement is encouraged and supported, however, our differences affect our conceptualization and experience of reality, and it is extremely important to remember that certain gender, race, sex, and class identities are more privileged while others are undermined and marginalized. Consequently, this makes some people feel more protected or vulnerable during debates and discussions. A collaborative effort between the students and Instructor is needed to create a supportive learning environment. While everyone should feel free to experiment creatively and conceptually, if a class member points out that something you have said or shared with the group is offensive, avoid being defensive; instead approach the discussion as a valuable opportunity for us to grow and learn from one another. Alternatively, if you feel that something said in discussion or included in a piece of work is harmful, you are encouraged to speak with the Instructor.</p> <p>Statement adopted from voidLab at https://github.com/voidlab/diversity-statement.</p>"},{"location":"#accommodations","title":"Accommodations","text":"<p>The instructor will work individually with each student on reasonable accommodations.</p> <p>If you have questions about accommodations for the course, please do not hesitate to contact me.</p> <p>Campus Disability Coordinators</p> <ul> <li>Pomona</li> <li>Claremont Graduate University</li> <li>Scripps College</li> <li>Claremont McKenna College</li> <li>Harvey Mudd College</li> <li>Pitzer College</li> <li>Keck Graduate Institute</li> </ul>"},{"location":"#resources","title":"Resources","text":""},{"location":"#class-resources","title":"Class Resources","text":"<ul> <li>p5.js Reference</li> <li>p5.js</li> <li>Coding Train Videos</li> <li>Patt Vira Youtube Channel</li> <li>JavaScript Documentation</li> <li> <p>p5.js Cheat Shat - Ben Moren</p> </li> <li> <p>More advanced: The Nature of Code</p> </li> <li>Further Reading: Aesthetic Programming</li> </ul>"},{"location":"#7c-student-resources","title":"7C Student Resources","text":"<ul> <li>Campus Safety</li> <li>Chaplains</li> <li>Chicano Latino Student Affairs (CLSA)</li> <li>Claremont Colleges Library</li> <li>The Claremont Colleges Services (TCCS)</li> <li>EmPOWER Center</li> <li>Health Education Outreach (HEO)</li> <li>Huntley Bookstore</li> <li>LiveSafe App</li> <li>Monsour Counseling and Psychological Services (MCAPS)</li> <li>Office of Black Student Affairs (OBSA)</li> <li>Student Disability Resource Center</li> <li>Student Health Insurance Plan</li> <li>Student Health Services</li> <li>Queer Resource Center (QRC)</li> </ul>"},{"location":"00_procedural_experiments/","title":"0. Playing with Code(s)","text":"<p>Focus</p>"},{"location":"00_procedural_experiments/#playing-with-codes","title":"Playing with Code(s)","text":"<p>Code can be approached as a conceptual framework. We could also consider here substituting the word code for conditions or instructions.</p> <p>To make code is to make the conditions for something to be generated.</p> <p>In this class, we'll be considering code in a literal sense, as computer code. However, the history of code in art has been informed by a long relationship between instructions, art, and games.</p>"},{"location":"00_procedural_experiments/#rules-as-code-danish-clapping-game","title":"Rules as Code: Danish Clapping Game","text":"<p>Play in pairs</p> <p>Instructions:</p> <ul> <li> <p>Face your partner and clap your thighs at the same time.</p> </li> <li> <p>Choose an arm position randomly: Both arms up, both arms to the left, both arms to the right.</p> </li> <li> <p>If you choose the same position, after you clap your thighs, clap your partners hands and repeat from the top If you choose different positions, repeat from the top.</p> </li> </ul>"},{"location":"00_procedural_experiments/#code-and-art","title":"Code and Art","text":""},{"location":"00_procedural_experiments/#vera-molnar","title":"Vera Molnar","text":"Vera Molnar. Lettres de ma M\u00e8re (\u201cLetter from my Mother\u201d). 1987. Courtesy of The Anne and Michael Spalter Digital Art Collection"},{"location":"00_procedural_experiments/#loose-codes-of-art","title":"Loose Codes of Art","text":""},{"location":"00_procedural_experiments/#robert-barry","title":"Robert Barry","text":"Robert Barry. ART WORK. 1970."},{"location":"00_procedural_experiments/#yoko-ono","title":"Yoko Ono","text":"Yoko Ono. Cut Piece. 1964. Yoko Ono. Grapefruit. 1964.  Yoko Ono. DOLLAR PIECE. 1963.  <p>Instructions: <pre><code>DOLLAR PIECE\n\nSelect an amount of dollar.\nImagine all the things that\nyou can buy with that amount.(a)\nImagine all the things that\nyou cannot buy with that amount.(b)\nWrite it on a piece of paper.\n\n\n1963 spring\n</code></pre></p>"},{"location":"00_procedural_experiments/#strict-codes-of-art","title":"Strict Codes of Art","text":""},{"location":"00_procedural_experiments/#mel-bochner","title":"Mel Bochner","text":"Mel Bochner. Measurement Room: No Vantage Point. 2019\u20132020."},{"location":"00_procedural_experiments/#sol-lewitt","title":"Sol LeWitt","text":"Sol LeWitt. Wall Drawing #260 (1975)  <p>Wall Drawing #260 (1975)</p> <p>Instructions:</p> <p>\u201cOn black walls, all two-part combinations of white arcs from corners and sides, and white straight, not-straight, and broken lines.\u201d</p> <p>Wall Drawing #118. 1971</p> <p>Instructions:</p> <p>\u201cOn a wall surface, any continuous stretch of wall, using a hard pencil, place fifty points at random. The points should be evenly distributed over the area of the wall. All of the points should be connected by straight lines.\u201d</p> <p>Sol LeWitt: A Wall Drawing Retrospective - MASS MoCA</p> <p>Modified version of #118 for paper:</p> <p><pre><code>On a pieces of paper, using a pencil,\npen, or other writing utensil,\nplace twenty points evenly distributed\nover the area of one of the paper's sides.\nAll of the points should be connected\nwith straight lines.\n</code></pre> Code Version, Moving</p>"},{"location":"00_procedural_experiments/#game-codes-dots-boxes","title":"Game Codes: Dots &amp; Boxes","text":"<p>Instructions: <pre><code>Draw a three by three  grid of dots\n\nEach player takes turns drawing a horizontal\nor vertical line that connects two dots\n\nThe player who completes the fourth\nside of a 1\u00d71 box earns one point \nand takes another turn (mark initials in the box)\n\nThe player with the most boxes at the end wins\n</code></pre></p>"},{"location":"01_p5/","title":"p5, Shapes &amp;&amp; Color","text":""},{"location":"01_p5/#about-p5js","title":"About p5.js","text":"<p>p5.js Website</p> <p>p5.js Reference</p> <p>Processing Foundation Website</p> <p>p5.js is an open source code editor for artist, designer, and beginner programmers. It is a JavaScript library adaptation of the open source project Processing developed by Casey Reas and Ben Fry in 2001. p5.was first developed by artist Lauren Lee McCarthy in 2013.</p>"},{"location":"01_p5/#p5js-editor","title":"p5.js Editor","text":"<p>p5.js Editor</p> Interface of p5 Editor <p>The interface of the p5 Editor is fairly simple:</p> <ul> <li>The area on the left is where we can write our instructions (also known as code) for our artworks.</li> <li>The play button at the top allows us to run our code.</li> <li>The stop button stops our code.</li> <li>The top menus allow us to access various options related to the p5 editor.</li> </ul>"},{"location":"01_p5/#customizing-your-p5-editor","title":"Customizing your p5 editor","text":"<p>You can change to High Contrast mode by clicking on the gear icon and going to General Settings.</p> <p>You can also customize your Text Size for easier reading.</p>"},{"location":"01_p5/#saving-and-renaming","title":"Saving and Renaming","text":"<p>You can save your sketch by pressing ctrl+s of navigating to file &gt; save.</p> <p>You can rename your sketch by clicking on your project name next to the pencil icon.</p>"},{"location":"01_p5/#calling-functions","title":"Calling Functions","text":"<p>Calling functions such as <code>createCanvas(400,400);</code> consists of 4 parts:</p> <ol> <li>Function name - <code>createCanvas</code></li> <li>Open and closed parentheses - <code>()</code></li> <li>Parameters - amount specific to each function - <code>createCanvas(400,400)</code></li> <li>Semicolon - this tells p5.js to move to the next line of code - <code>;</code></li> </ol>"},{"location":"01_p5/#createcanvas","title":"createCanvas()","text":"<p>Reference</p> <p><code>createCanvas()</code> is a function that sets the size of our canvas.</p> <p>Syntax: <code>createCanvas(w, h)</code></p> <p>Parameters</p> <ul> <li>w     - width</li> <li>h     - height</li> </ul>"},{"location":"01_p5/#syntax","title":"Syntax","text":"<p>Syntax is the word we use to describe the particular writing style of a programming language. Every programming language has a different syntax.</p>"},{"location":"01_p5/#comments","title":"Comments","text":"<p>We can annotated our code by using comments. Comments are bits of text written in the editor that our computer ignores. We can start a comment by typing <code>//</code>.</p>"},{"location":"01_p5/#example","title":"Example:","text":"<pre><code>function setup(){\n    //Create a canvas that is 400 pixels for width and height\n    createCanvas(400,400);\n}\n</code></pre>"},{"location":"01_p5/#errors","title":"Errors","text":"<p>Computer languages are very specific about using the correct syntax. If our syntax is incorrect, we'll will receive an error.</p>"},{"location":"01_p5/#example_1","title":"Example:","text":"<p>If I spell 'createCanvas()' incorrectly, my sketch won't run, and p5 will let me know I have an error.</p> <pre><code>function setup(){\n    //Set our sketch to 400 by 400 pixels\n    createCanva(400,400);\n}\n</code></pre> Error message <p>This error says \"createCanva is not defined\" , becuase the p5.js editor does not know what the function createCanva() is.</p>"},{"location":"01_p5/#setup-and-draw","title":"setup() and draw()","text":"<p>We'll get more into how <code>setup()</code> and <code>draw()</code> function in the next class. For now, we can think of <code>setup()</code> as where we set up our sketch by drawing our canvas, and <code>draw()</code> is where we can make our drawing. We want to make sure that our code is in between the <code>{ }</code> of the function.</p>"},{"location":"01_p5/#coordinate-system","title":"Coordinate System","text":"<p>Unlike a standard Cartesian coordinate system which might be familiar to you from previous studies in math, the origin, or <code>(0,0)</code> position of our canvas is not in the center. <code>(0,0)</code> is at the top left corner for our p5.js canvas.</p> Coordinate system of p5.js"},{"location":"01_p5/#shapes","title":"Shapes","text":"<ul> <li><code>line()</code></li> <li><code>circle()</code></li> <li><code>rect()</code></li> <li><code>square()</code></li> </ul>"},{"location":"01_p5/#line","title":"line()","text":"<p>Reference</p> <p><code>line(x1, y1, x2, y2)</code> is a function that draws a line to our canvas.</p> <p>Example:</p> <pre><code>function setup(){\n    createCanvas(400,400);\n}\nfunction draw(){\n    background(220);\n    line(100,100,300,300);\n}\n</code></pre>"},{"location":"01_p5/#circle","title":"circle()","text":"<p><code>circle(x, y, diameter)</code> is a function that draws a circle to our canvas.</p> <p>Reference </p>"},{"location":"01_p5/#example_2","title":"Example:","text":"<pre><code>function setup(){\n    createCanvas(400,400);\n}\nfunction draw(){\n    background(220);\n    circle(200,200,100);\n}\n</code></pre>"},{"location":"01_p5/#rect","title":"rect()","text":"<p>Reference </p> <p><code>rect(x, y, w, h)</code> draws a rectangle to our screen.</p> <p>By default, the x and y position of our square is anchored to the upper left corner.</p>"},{"location":"01_p5/#example_3","title":"Example:","text":"<pre><code>function setup(){\n    createCanvas(400,400);\n}\n\nfunction draw(){\n    background(127);\n    rect(10,10,200,300);\n}\n</code></pre>"},{"location":"01_p5/#square","title":"square()","text":"<p>For drawing a rectangle with equal sides, we can alternatively use the <code>square()</code> function:</p> <p>Reference </p> <p>Syntax: <code>square(x, y, size)</code> </p>"},{"location":"01_p5/#example_4","title":"Example:","text":"<pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(220);\n  square(200, 200, 100);\n}\n</code></pre>"},{"location":"01_p5/#drawing-order","title":"Drawing Order","text":"<p>The order that we write our code is important! p5.js \"reads\" our code from the top to bottom, just like we do. Each shape is drawn on top of the previous shape.</p>"},{"location":"01_p5/#examples","title":"Examples:","text":"<p>Larger circle hides smaller circle:</p> <pre><code>function setup(){\n    createCanvas(400,400);\n}\n\nfunction draw(){\n    background(127);\n    circle(200,200,100);\n    circle(200,200,200);\n}\n</code></pre> <p>Smaller circle on top of larger circle:</p> <p><pre><code>function setup(){\n    createCanvas(400,400);\n}\n\nfunction draw(){\n    background(127);\n    circle(200,200,200);\n    circle(200,200,100);\n}\n</code></pre> We'll see the smaller circle drawn on top of the larger one:</p>"},{"location":"01_p5/#settings-and-attributes","title":"Settings and Attributes","text":"<ul> <li><code>rectMode()</code></li> <li><code>noStroke()</code></li> <li><code>noFill()</code></li> </ul>"},{"location":"01_p5/#rectmode","title":"rectMode()","text":"<p>Reference</p> <p>We can modify how rectangles are drawn by using the function <code>rectMode()</code>.</p> <p><code>rectMode()</code> can take in a few parameters, but we will focus on <code>CENTER</code> and <code>CORNER</code></p> <p><code>rectMode(CORNER)</code> is the default behavior with our rectangles being drawn from the upper left corner.</p> <p><code>rectMode(CENTER)</code> will draw our rectangles from their center position</p>"},{"location":"01_p5/#example_5","title":"Example:","text":"<pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(220);\n  rectMode(CENTER);\n  square(200, 200, 100);\n  rectMode(CORNER);\n  square(200, 200, 100);\n}\n</code></pre>"},{"location":"01_p5/#nostroke","title":"noStroke()","text":"<p>Reference</p> <p><code>noStroke()</code> is a settings function that disables points, lines and outlines.</p> <p>Example:</p> <p>Note: because draw loops continuously <code>noStroke()</code> effects all shapes. The effect could be interrupted with a <code>fill()</code> (see below).</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(220);\n  rectMode(CENTER);\n  square(200, 200, 100);\n  noStroke();\n  rectMode(CORNER);\n  square(200, 200, 100);\n}\n</code></pre>"},{"location":"01_p5/#nofill","title":"noFill()","text":"<p><code>noFill()</code> disables fill for shapes.</p> <p>Example:</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(220);\n  noFill();\n  circle(200, 200, 150);\n  circle(100, 200, 150);\n  circle(300, 200, 150);\n}\n</code></pre>"},{"location":"01_p5/#color","title":"Color","text":"<p>Colors in p5.js are Red, Blue, Green or RGB colors by default.</p> <p>RGB and Alpha values have a range of 0-255, with 255 being full brightness.</p> <p>Some functions that take color parameters:</p> <ul> <li><code>background()</code> - fills the canvas with color Reference</li> <li><code>fill()</code> - changes the fill color of shapes Reference</li> <li><code>stroke()</code> - changes the fill color of dots, lines and outlines <code>stroke()</code> Reference</li> </ul> <p>Each of these function can take a different numbers of parameters for different results:</p> <ul> <li><code>fill(g)</code> - gray scale value</li> <li><code>fill(r,g,b)</code> - red, blue and green values</li> <li><code>fill(r, g, b, a)</code> - red, blue green and alpha (or opacity) values </li> </ul>"},{"location":"01_p5/#examples_1","title":"Examples:","text":"<p>RGB values:</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\nfunction draw() {\n  background(113, 168, 88);\n  strokeWeight(20);\n  stroke(153, 153, 204)\n  fill(0, 88, 172);\n  circle(200, 200, 300);\n}\n</code></pre> <p>In this sketch, notice the addition of <code>strokeWeight()</code>, which changes the thickness of dots, lines and outlines.</p> <p>Gray values:</p> <pre><code>function setup() {\n  createCanvas(400, 250);\n}\nfunction draw() {\n  background(127);\n  rectMode(CENTER);\n  noStroke();\n  fill(255);\n  square(100, 125, 150);\n  fill(0);\n  square(300, 125, 150);\n}\n</code></pre> <p>Alpha:</p> <pre><code>function setup() {\n  createCanvas(400, 200);\n}\nfunction draw() {\n  background(153, 153, 204);\n  noStroke();\n  fill(255, 207, 119, 255);\n  circle(50, 100, 100);\n  fill(255, 207, 119, 192);\n  circle(150, 100, 100);\n  fill(255, 207, 119, 127);\n  circle(250, 100, 100);\n  fill(255, 207, 119, 63);\n  circle(350, 100, 100);\n}\n</code></pre>"},{"location":"01_p5/#saving-an-image-of-you-sketch","title":"Saving an Image of you sketch","text":"<p>To save an image of your sketch, you can right click on your canvas and click on Save image as... </p>"},{"location":"01_p5/#sharing-your-sketch","title":"Sharing your Sketch","text":"<p>To share your sketch from p5.js:</p> <ol> <li>Make sure you are logged in and your sketch is saved.</li> <li>Navigate to File -&gt; Share</li> <li>You can copy your Fullscreen or Edit link to share with others! (We'll discuss Embed later).</li> </ol>"},{"location":"02_variables/","title":"0. Variables && Random","text":""},{"location":"02_variables/#variables-randomness","title":"Variables &amp;&amp; Randomness","text":""},{"location":"02_variables/#overview","title":"Overview","text":"<p>What we learned last class:</p> <ul> <li>What is p5.js?</li> <li>How to code essential shapes</li> <li>How to code colors</li> <li>How to code attributes</li> </ul> <p>Class Overview:</p> <ul> <li>The flow of p5.js</li> <li><code>setup()</code> and <code>draw()</code></li> <li>How to write blocks of code</li> <li><code>mouseX</code> and <code>mouseY</code></li> <li><code>mousePressed()</code></li> <li><code>width</code> and <code>height</code></li> <li>Basic math in p5.js</li> <li>How to make our own variables</li> <li>How to use incrementation operators</li> <li><code>random()</code></li> </ul>"},{"location":"02_variables/#setup-and-draw","title":"setup() and draw()","text":"<p><code>setup()</code> and <code>draw()</code> are functions that control the flow of our p5 sketches.</p> <p><code>setup()</code>: The starting conditions of our p5 sketch.</p> <p><code>draw()</code>: The continuous loop of our p5 sketch.</p> Setup condition of a tennis match (Serena vs. Venus Williams, 2027) Draw condition of a tennis match (Serena vs. Venus Williams, 2027) Setup condition of a Pong Draw condition of a Pong <p>Setup condition of p5 sketch</p> <p>Draw condition of p5 sketch (Click to restart)</p>"},{"location":"02_variables/#code-blocks","title":"Code Blocks","text":"<p>A code block is a section of code that is grouped together. Code blocks can appear as function and as other groupings of code such as conditional statements or classes.</p> <p>Example:</p> <pre><code>function setup(){\n    //some code\n    //some more code\n    //even more code\n}\n</code></pre> <p>This code block consists of four elements:</p> <ol> <li><code>function</code> - This designates our code block as a function.</li> <li><code>setup()</code> - This is the name of our function.</li> <li><code>{ }</code> - Open and closed curly brackets, these indicate where we will write our code.</li> <li>Body - The code we will write.</li> </ol> <p><code>NOTE</code>: These function code blocks can be arranged in our p5 sketch in any order.</p>"},{"location":"02_variables/#variable-basics","title":"Variable Basics","text":"<p>In short, variables are values that change as our program runs. These values are variable, meaning they are able to change.</p> <p>In this class, we'll be using two types of variables:</p> <ul> <li>p5.js variables: These are built-in variables that are part of the library.</li> <li>Custom variables: These are variables that we define ourself for use in our particular program.</li> </ul>"},{"location":"02_variables/#mousex-and-mousey","title":"mouseX and mouseY","text":"<p>Reference</p> <p><code>mouseX</code> is a variable that always stores our mouse's horizontal position. <code>mouseY</code> is a variable that always stores our mouse's vertical position.</p> <p>These values update as we move our mouse!</p>"},{"location":"02_variables/#examples","title":"Examples:","text":"<p><code>mouseX</code> Tracking:</p> <pre><code>function setup(){\n  createCanvas(400,400);\n}\n\nfunction draw(){\n  background(12,123,220);\n  noStroke();\n  fill(255,194,10);\n  circle(mouseX,200,80);\n}\n</code></pre> <p><code>mouseX</code> and <code>mouseY</code> Tracking:</p> <pre><code>function setup(){\n  createCanvas(400,400);\n}\n\nfunction draw(){\n  background(12,123,220);\n  noStroke();\n  fill(255,194,10);\n  circle(mouseX,mouseY,80);\n}\n</code></pre> <p><code>mouseX</code> size:</p> <pre><code>function setup(){\n  createCanvas(400,400);\n}\n\nfunction draw(){\n  background(12,123,220);\n  noStroke();\n  fill(255,194,10);\n  circle(200,200,mouseX);\n}\n</code></pre> <p>Drawing Program with <code>mouseX</code> and <code>mouseY</code> :</p> <pre><code>function setup(){\n    createCanvas(400,400);\n    background(12,123,220);\n}\n\nfunction draw(){\n    noStroke();\n    fill(255,194,10);\n    circle(mouseX,mouseY,10);\n}\n</code></pre>"},{"location":"02_variables/#mousepressed","title":"mousePressed()","text":"<p>Reference</p> <p><code>mousePressed()</code> is a special function within p5 that is called every time we click our mouse.</p> <p>To use <code>mousePressed()</code> we need to make a new function block of code.</p>"},{"location":"02_variables/#examples_1","title":"Examples:","text":"<p><code>mousePressed()</code> Drawing Program:</p> <p>This program resets our drawing every time we click the mouse by redrawing our <code>background()</code>.</p> <pre><code>function setup(){\n    createCanvas(400,400);\n    background(12,123,220);\n}\n\nfunction draw(){\n    noStroke();\n    fill(255,194,10);\n    circle(mouseX,mouseY,10);\n}\n\nfunction mousePressed(){\n    background(12,123,220);\n}\n</code></pre>"},{"location":"02_variables/#width-and-height","title":"width and height","text":"<ul> <li>Width Reference</li> <li>Height Reference</li> </ul> <p><code>width</code> and <code>height</code> are built-in p5 variables that store the width and height of your canvas.</p>"},{"location":"02_variables/#example","title":"Example:","text":"<pre><code>function setup(){\n    createCanvas(400,400);\n}\n\nfunction draw(){\n    background(12,123,220);\n    noStroke();\n    fill(255,194,10);\n    circle(width/2,height/2,80);\n}\n</code></pre>"},{"location":"02_variables/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>We can alter the values of numbers and variables by using arithmetic operators.</p> <ul> <li><code>+</code> - Addition </li> <li><code>-</code> - Subtraction</li> <li><code>*</code> - Multiplication</li> <li><code>/</code> - Division</li> <li><code>=</code> - Equals</li> </ul>"},{"location":"02_variables/#what-is-a-variable","title":"What is a Variable?","text":"<p>What is <code>mouseX</code> or <code>width</code>?</p> <p>Variables are named storage locations in our computer's memory where we can store values.</p> <p><code>mouseX</code> and <code>width</code> are both named storage location where p5 is constantly updating their associated values.</p> Simplified drawing of variables in memory"},{"location":"02_variables/#making-our-own-variables","title":"Making our Own Variables","text":""},{"location":"02_variables/#steps-to-making-a-variable","title":"Steps to Making a Variable","text":"<ul> <li>Stating <code>let</code></li> <li>Name of variable</li> <li>Initialize variable</li> <li>Use the variable</li> </ul>"},{"location":"02_variables/#let","title":"let","text":"<p>We can use the keyword <code>let</code> to begin declaring a variable.</p> <p>Example:</p> <pre><code>let frog;\nlet toad;\nlet bird;\n</code></pre> <p>In JavaScript, we don't need to tell our editor what type of variable we are making. In other words, we don't need to let JavaScript know if our variable is a Number, a word, or something else. In part, it is up to the artist to keep track of what type of variable we want each new variable to be.</p> <p>Some variable types:</p> <p>JavaScript variables:</p> <ul> <li>Number: both decimal and whole numbers</li> <li>String: words or sentences</li> <li>...and many more</li> </ul>"},{"location":"02_variables/#name","title":"Name","text":"<p>We can name our variable anything, but it is good to use a name that allows us to keep track of what we want it to do. As an example, <code>circleX</code> to control the x position of our circle.</p> <p>Some rules to follow:</p> <ul> <li>Lower case letter to start <code>Dog</code> vs. <code>dog</code></li> <li>No numbers as first character <code>1dog</code> vs. <code>dog1</code></li> <li>No spaces <code>black cat</code> vs. <code>blackCat</code></li> <li>use camelCase <code>blackcat</code> vs. <code>blackCat</code></li> <li>Don\u2019t use reserved keywords or existing p5 variable names.</li> </ul>"},{"location":"02_variables/#initialize","title":"Initialize","text":"<p>To initialize our variable, we need to provide with an initial value using the <code>=</code> operator.</p> <p>We can do this in <code>setup()</code> :</p> <p><pre><code>let circleX;\n\nfunction setup(){\n    createCanvas(400,400);\n    circleX = 0;\n}\n</code></pre> Or, when we declare our variable:</p> <pre><code>let circleX = 0;\n\nfunction setup(){\n    createCanvas(400,400);\n}\n</code></pre>"},{"location":"02_variables/#use","title":"Use","text":"<p>After we declared and initialized our variable, we can use it in our sketch. Here <code>cricleX</code> replaces the <code>x</code> value of our <code>circle</code>.</p> <p>Note: although we are using are variable, we are not changing it's values, so our sketch remains static.</p> <pre><code>let circleX = 0;\n\nfunction setup(){\n  createCanvas(400,400);\n\n}\n\nfunction draw(){\n  background(12,123,220);\n  noStroke();\n  fill(255,194,10);\n  circle(circleX,200,80);\n}\n</code></pre>"},{"location":"02_variables/#variable-scope","title":"Variable Scope","text":"<p>Variables have two levels of scope, global and local.</p> <p>We won't go into too much detail about this now, but in short:</p> <ul> <li> <p>Global variables are declared at the top of our sketch. They can be used within any block of code.</p> </li> <li> <p>Local variables are declared within a block of code and can only be used within that code block.</p> </li> </ul>"},{"location":"02_variables/#incrementation-operators","title":"Incrementation Operators","text":"<p>We can use incrementation operators to change the value of our variable over time. If I want to increase the value of <code>circleX</code> by <code>1</code> every time <code>draw()</code> is called, we can use the code:</p> <p><pre><code>circleX = circleX+1;\n</code></pre> Incrementation operations are a two part process:</p> <ol> <li>Change the value of a variable (<code>circleX+1</code>)</li> <li>Assign that value back to the variable (<code>circleX = circleX+1</code>)</li> </ol> <p>Short hands for incrementation operators:</p> <p>Addition: <pre><code>//All the same\n\ncircleX = circleX+1;\ncircleX += 1;\ncircleX ++;\n</code></pre></p> <p>Subtraction: <pre><code>//Both the same\n\ncircleX = circleX-1;\ncircleX -= 1;\n</code></pre> Multiplication: <pre><code>//Both the same\n\ncircleX = circleX*2;\ncircleX *= 2;\n</code></pre></p> <p>Division: <pre><code>//Both the same\n\ncircleX = circleX/2;\ncircleX /= 2;\n</code></pre></p>"},{"location":"02_variables/#example_1","title":"Example:","text":"<p>Moving a circle using addition incrementation operator on <code>circleX</code> :</p> <pre><code>let circleX = 0;\n\nfunction setup(){\n  createCanvas(400, 400);\n\n}\n\nfunction draw(){\n  background(12, 123, 220);\n  noStroke();\n  fill(255, 194, 10);\n  circle(circleX, 200, 80);\n  circleX += 1;\n}\n</code></pre> <p>Note: This example is repeating. Some extra code was added to make this example for the website. We'll learn more about this next class.</p> <p>We can change how fast the circle is moving by the changing incrementation value.</p> <pre><code>  circleX += 10;\n</code></pre> <p>Note: This example is repeating. Some extra code was added to make this example for the website. We'll learn more about this next class.</p>"},{"location":"02_variables/#random","title":"random()","text":"<p>Reference</p> <p>Syntax: </p> <ul> <li><code>random(max)</code><ul> <li>returns a random value between 0 and max</li> </ul> </li> <li><code>random(min,max)</code> <ul> <li>returns a random value between min and max</li> </ul> </li> </ul> <p>Parameters</p> <ul> <li>min   - (Number) lower limit</li> <li>max   - (Number) upper limit</li> </ul> <p><code>random()</code> returns a number value. We can assign this value to variables or use the value as parameters in functions.</p>"},{"location":"02_variables/#examples_2","title":"Examples:","text":"<p>Random position on mouse click using <code>random()</code> :</p> <pre><code>let circleX = 0;\n\nfunction setup(){\n  createCanvas(400, 400);\n\n}\n\nfunction draw(){\n  background(12, 123, 220);\n  noStroke();\n  fill(255, 194, 10);\n  circle(circleX, 200, 80);\n  circleX += 1;\n}\n\nfunction mousePressed()\n{\n  circleX = random(0,width);\n}\n</code></pre> <p>Collection of Dots using <code>random()</code> :</p> <pre><code>let x;\nlet y; \nlet a;\nlet r;\nlet g;\nlet b;\n\nfunction setup(){\n  createCanvas(400, 400);\n  background(12, 123, 220);\n}\n\nfunction draw(){\n\n  noStroke();\n\n  y = random(height);\n  x = random(width);\n  a = random(60,200);\n  r = random(200,255);\n  g = random(200,255);\n  b = random(100);\n\n  fill(r, g, b,a);\n  circle(x, y,10);\n\n}\n\nmousePressed(){\n  background(12, 123, 220);\n}\n</code></pre> <p>Click to reset</p>"},{"location":"03_flow/","title":"03 flow","text":""},{"location":"03_flow/#flow","title":"Flow","text":"<p><code>RECAP:</code> What we learned last class:</p> <ul> <li><code>setup()</code> and <code>draw()</code></li> <li>How to write blocks of code</li> <li><code>mouseX</code> and <code>mouseY</code></li> <li><code>mousePressed()</code></li> <li><code>width</code> and <code>height</code></li> <li>Basic math in p5.js</li> <li>How to make our own variables</li> <li>How to use incrementation operators</li> <li><code>random()</code></li> </ul> <p><code>PLAN:</code></p> <ul> <li><code>if</code></li> <li>boolean expressions</li> <li>relational operators</li> <li><code>else</code> and <code>else if</code></li> <li>logical operators</li> <li>boolean data type</li> </ul> <p>Conditional Statement</p>"},{"location":"03_flow/#conditional-if","title":"Conditional: if","text":"<p>A conditional statement, often called an \"if statement\", is a block of code that only runs if a certain condition is met. We can think of conditions as statements that start with \"if\".</p> <p>Thinking back to our exercise on James Turrell. We could say:</p> <pre><code>If the sky is light blue, the lights turn orange.\n\nIf the sky is black, the light turn white.\n</code></pre> <p>Or, as an example relevant to our moving ball from last class:</p> <pre><code>If the circle reaches the edge of the sketch,\nmove in the opposite direction.\n</code></pre> <p>We'll slowly work towards this example, but first we need to know what an <code>if</code> statement looks like in code.</p> <p><pre><code>if(...some condition...){\n    //run this code\n}\n</code></pre> With the parentheses of our <code>if</code> statement, we are looking to see if some condition is true. If it is true, the block of code will run. If it is not true, p5 will skip over the block of code and move on.</p> <p>We call the condition the if statement is checking a boolean expression.</p> <p>One way to create boolean expression is by using relational operators.</p>"},{"location":"03_flow/#relational-operators","title":"Relational Operators","text":"<p>Relational operators compare the values of two numbers and returns a value of true or false.</p> <ul> <li><code>&gt;</code> - greater than</li> <li><code>&lt;</code> - less than</li> <li><code>&gt;=</code> - greater than or equal to</li> <li><code>&lt;=</code> - less than or equal to</li> <li><code>==</code> - equal to</li> <li><code>!=</code> - not equal to</li> </ul> <p>For example:</p> <p>0 &gt; 255 = true 54.5 &lt; 54.4 = false</p> <p>Relational operators work best when we use them with variables.</p> <p>Let's use an <code>if</code> statement and a relational operator in our code to change the color of our sketch when our mouse is on the right side of our canvas.</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n    background(255, 255, 0);\n  if (mouseX &gt; width / 2) {\n    background(255, 0, 0);\n  }\n\n  stroke(0, 0, 255);\n  strokeWeight(4);\n  line(width / 2, 0, width / 2, height);\n}\n</code></pre>"},{"location":"03_flow/#conditional-else","title":"Conditional: else","text":"<p>We can use an <code>else</code> statement in conjunction with an <code>if</code> statement. And <code>else</code> statement is a block of code that will only run if the condition within our if statement is not met.</p> <p>A pseudo code example might look like:</p> <pre><code>if(my birthday){\n    //Sing Happy Birthday!\n} else{\n    //Wait for my Birthday\n}\n</code></pre> <p>We can use else in our screen color example to check when our mouse is on the right side of the screen.</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  if (mouseX &gt; width / 2) {\n    background(255, 0, 0);\n  } else {\n    background(255, 255, 0);\n  }\n\n  stroke(0, 0, 255);\n  strokeWeight(4);\n  line(width / 2, 0, width / 2, height);\n}\n</code></pre>"},{"location":"03_flow/#conditional-else-if","title":"Conditional: else if","text":"<p>In addition to else, we can use an <code>else if</code> statement after our <code>if</code> statement to check for specific conditions. <code>else if</code>, like <code>if</code>, checks to see if a boolean expression is true.</p> <p>If we change the size of our canvas to 300 by 300 or 600 by 600, we can easily divide our canvas into thirds. From there we can use an <code>if</code>, <code>else if</code>, and <code>if</code> statement to change the color of our canvas when our mouse is in the left, right, and center.</p> <pre><code>function setup() {\n  createCanvas(300, 300);\n}\n\nfunction draw() {\n  if (mouseX &lt; 100) {\n    background(0, 0, 255);\n  } else if (mouseX &lt; 200) {\n    background(0, 255, 0);\n  } else {\n    background(255, 0, 0);\n  }\n\n  stroke(0);\n  line(100, 0, 100, height);\n  line(200, 0, 200, height);\n}\n</code></pre>"},{"location":"03_flow/#class-exercise-conditional","title":"Class Exercise: Conditional","text":"<p>Use what we have learned thus far to make the below example. Start with a 400 by 200 canvas. As a hint, you'll need to use two <code>else if</code> statements! No need to include the \"HOVER TO START\" message. That is just to keep the class website tidy!</p>"},{"location":"03_flow/#logical-operators","title":"Logical Operators","text":"<p>Logical Operators:</p> <ul> <li><code>&amp;&amp;</code> - And</li> <li><code>||</code> - Or</li> <li><code>!</code> - Not</li> </ul> <p>We can use logical operators to check for multiple boolean expressions.</p> <p>Let's work towards making this hover effect!</p> <p>To begin, we could start by detecting in our mouse passes over the left side of our square.</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(200);\n\n  if (mouseX &gt; 100) {\n    fill(255);\n  } else {\n    fill(0);\n  }\n\n  noStroke();\n  rectMode(CENTER);\n  square(200, 200, 200);\n}\n</code></pre> <p>We can use the logical operator <code>&amp;&amp;</code> to check if our <code>mouseX</code> and <code>mouseY</code> are within our circle.</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(200);\n\n  if (mouseX &gt; 100 &amp;&amp; mouseX &lt; 300 &amp;&amp; mouseY &gt; 100 &amp;&amp; mouseY &lt; 300) {\n    fill(255);\n  } else {\n    fill(0);\n  }\n\n  noStroke();\n  rectMode(CENTER);\n  square(200, 200, 200);\n}\n</code></pre> <p>We can also simply this code by replacing the x , y and width of our square with variables. If I keep my rectMode using CENTER, I can check my mouse position at the relationship between my x or y variable and half my width. This allows our code to work when our square is at any location and has any size.</p> <pre><code>let x = 200;\nlet y = 200;\nlet w = 200;\n\nfunction setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(200);\n\n  if (mouseX &gt; x-w/2 &amp;&amp; mouseX &lt;x+w/2 &amp;&amp; mouseY &gt; y-w/2 &amp;&amp; mouseY&lt;y+w/2 ) {\n    fill(255);\n  } else {\n    fill(0);\n  }\n\n  noStroke();\n  rectMode(CENTER);\n  square(x, y, w);\n  fill(255)\n  circle(x,y,10);\n}\n</code></pre> <p>if it is a new block of code only executed if a certain condition is what  what goes inside our parantheses boolean expression relational operators compares two values use relation operators with variable change color based on side of mouse</p> <p>else when there is a relationshp between different things</p> <p>else if</p> <p>exercise</p> <p>logical operators and , or and not</p> <p>roller over</p> <p>exercise fadded circle - dist();</p> <p>bouncing ball</p> <p>==</p> <p>show mistake x = x-7; x = x+7;</p> <p>show print</p> <p>variable for speed</p> <p>multiply -1</p> <p>or statement</p> <p>Y</p> <p>gravity</p> <p>mousePressed</p> <p>another variable, mouse pressed </p> <p>boolean = !boolean.</p> <p>indpendent exercise</p>"},{"location":"Introduction/","title":"Introduction","text":"<p>Focus</p>"},{"location":"Introduction/#hello","title":"HELLO!","text":""},{"location":"Introduction/#plan-for-today","title":"Plan For Today","text":"<p>2 Hours 30 min</p> <ul> <li>Introductions - 15 min</li> <li>About Me - 5 min</li> <li>Syllabus Review - 10 min</li> <li>Schedule and Class Website - 5 min</li> <li>Class Discord - 10 min</li> <li>Break - 10 min</li> <li>Course Goals - 10 min</li> <li>Playing With Code(s)</li> </ul>"},{"location":"Introduction/#introductions","title":"Introductions","text":"<ul> <li>Name</li> <li>Pronouns</li> <li>Home college/Major/Year</li> <li>Any experience you have had with Code or Programming?</li> <li>Why were you interested in signing up for this course and what is one thing you are looking to take away from this class?</li> <li>If you have one, favorite art work that combines art and technology?</li> </ul>"},{"location":"Introduction/#about-me","title":"About Me","text":"<ul> <li>Vincent Roca, Assistant Professor of Media Studies (you can call me Vinny)</li> <li>He/Him</li> <li>Media Art/Games/Animation/Sculpture</li> </ul>"},{"location":"Introduction/#syllabus","title":"Syllabus","text":"<p>Class Syllabus</p> <p>Note: Some parts of this class will require:</p> <ol> <li>A personal computer with a camera, microphone, and sound output</li> <li>Headphones</li> </ol> <p>If you do not have access to this technology please contact me as soon as possible.</p>"},{"location":"Introduction/#class-website-and-schedule","title":"Class Website and Schedule","text":"<p>Class Website: code.vinnyroca.info</p> <p>If you see an error or typo, please send me an email or Discord message.</p> <p>Schedule</p>"},{"location":"Introduction/#class-discord","title":"Class Discord","text":"<p>Join the Class Discord</p> <p>Please change your nickname on the server to match your name in the classroom.</p> <p>How to change your server nickname</p>"},{"location":"Introduction/#course-goals","title":"Course Goals","text":"<p>To learn the fundamentals of the programming for artistic practice. To examine the relationship between code, art and technology critically in a variety of contexts.</p>"},{"location":"Introduction/#practice","title":"Practice","text":""},{"location":"Introduction/#p5js-and-javascript","title":"p5.js and JavaScript","text":"<ul> <li>Learn the foundations of programming from variables to objects</li> <li>Learn how to create visual, sonic and interactive media artworks</li> </ul>"},{"location":"Introduction/#basics-of-html-and-css","title":"Basics of HTML and CSS","text":"<ul> <li>Learn how to put on p5.js projects on the internet on our own websites!</li> </ul>"},{"location":"Introduction/#projects","title":"Projects","text":""},{"location":"Introduction/#time","title":"Time","text":"<p>An experimental clock that provides a different relationship to time,</p>"},{"location":"Introduction/#narrative","title":"Narrative","text":"<p>Blend text, functions and algorithms together to reveal a narrative or experience through the manipulation of images.</p>"},{"location":"Introduction/#performance-group-project-of-3-4","title":"Performance (Group Project of 3-4)","text":"<p>Use sound, camera, and interactive inputs and outputs to generate a projected performance.</p>"},{"location":"Introduction/#game-ring","title":"Game Ring","text":"<p>Use new knowledge in object oriented program to create a game that emerges from your lived experience of the world. The class will create a series of websites for our games that are all interconnected through a web ring.</p>"},{"location":"Introduction/#thinking-reading-watching","title":"Thinking, Reading, Watching","text":"<p>In this course, we will be studying the cultural, artistic, and political impacts of programming.</p> <p>To facilitate this study, we will hold four critical discussions throughout the quarter, each covering a different topic.</p>"},{"location":"Introduction/#art-technology","title":"Art &amp;&amp; Technology","text":"<ul> <li>History of the Future, Casey Raes</li> <li>Glitch Feminism, Legacy Russell</li> <li>Cyberfeminist Index, Mindy Seu</li> </ul>"},{"location":"Introduction/#culture-ideology","title":"Culture &amp;&amp; Ideology","text":"<ul> <li>Algorithms of Oppression, Safiya Noble</li> <li>Indigenous Circuits: Navajo Women and the Racialization of Early Electronic Manufacture, Lisa Nakamura</li> <li>It\u2019s In the Game\u201917 - Sondra Perry</li> </ul>"},{"location":"Introduction/#surveillance-power","title":"Surveillance &amp;&amp; Power","text":"<ul> <li>Citizenfour, Laura Poitras</li> <li>Helga Tawil-Souri, Digital Occupation</li> <li>Facial Weaponization Suite, Zach Blas</li> </ul>"},{"location":"Introduction/#internet-play","title":"Internet &amp;&amp; Play","text":"<ul> <li>Making Space for A Handmade Web, Chia Amisola</li> <li>A Handmade Web, J. R. Carpenter</li> <li>Against the Dark Forest, Erin Kissane</li> </ul>"},{"location":"clock/","title":"Clock","text":"<p>clock time and map to show movement can map the variable introduce math concepts, like sin and cos</p>"},{"location":"schedule/","title":"Schedule","text":"<p>Please note that is this is a live schedule and is ever evolving as the course (/world) changes. Please check back frequently for due dates of assignments and course proceedings.</p>"},{"location":"schedule/#course-plan","title":"Course Plan","text":"Day Class Due TUES8/26 - Introduction(s)- [Playing with Code(s)] THUR8/28 - Tutorial: [p5.js, Shape, and Color] Due:- [p5.js! Exercise] TUES9/2 - Tutorial: [Variables &amp;&amp; Random] Due:- [Light and Color Exercise] THUR9/4 - Tutorial: [Flow] Due:- [Face Generator Exercise] TUES9/9 - Tutorial: [Repeat] Due: - [Pong for One Exercise] THUR9/11 - Tutorial: [Math &amp;&amp; Time]- Assign: Time Due: - Repeat Exercise TUES9/16 - Discussion \ud83d\udcd6- Studio Time: Time Due: - Begin work on Time projectDue on Monday Before 5 pm: - Art &amp;&amp; Technology Response THUR9/18 <p>CRIT \ud83c\udf1e: Time</p> Due: - Time Project TUES9/23 - Tutorial: [Interactivity &amp;&amp; Transforms] THUR9/25 - Tutorial: [Text &amp;&amp; Arrays] Due: - Exercise TUES9/30 - Tutorial: [Image &amp;&amp; Algorithms] Due: - Exercise THUR10/2 - Tutorial [Functions] Due: - Exercise TUES10/7 - Discussion \ud83d\udcd6- Studio Time: Narrative Due: - Begin work on Narrative projectDue on Monday Before 5 pm: - Culture &amp;&amp; Ideology Response THUR10/9 <p>CRIT \ud83c\udf1e: Narrative</p> Due:Narrative Project TUES10/14 <p>No Class \ud83c\udf1d: Break</p> <p>Break</p> THUR10/16 - Tutorial: [Sound In &amp;&amp; Sound Out] - Assign: Performance TUES10/21 - Tutorial: [Capture] Due: - Sound Exercise  - Performance Groups THUR10/23 - Discussion \ud83d\udcd6- Studio Time: Performance Due: - Begin work on Performance projectDue on Monday Before 5 pm: - Power &amp;&amp; Surveillance Response TUES10/28 - Studio Time: Testing Performance Due: - Completed Framework of Performance Project THUR10/30 <p>CRIT \ud83c\udf1e: Performance</p> Due: - Performance Project TUES11/4 - Tutorial: [Classes &amp;&amp; Objects] THUR11/6 - Tutorial: [Classes &amp;&amp; Objects] Due: - Classes Exercise TUES11/11 - Tutorial: [VS Code &amp;&amp; HTML] Due: - Game Ring Design Document THUR11/13 - Tutorial: [CSS + Github] Due: - Game Ring HTML Mock-up TUES11/18 - Studio Time: Game Ring Due: - Git Repository and Game Ring Web Address THUR11/20 - Discussion \ud83d\udcd6- Studio Time: Game Ring Due on Monday Before 5 pm: - Play &amp;&amp; Internet Response TUES11/25 - Studio Time: Game Ring Due: - Continued work on Game Ring THUR11/27 <p>No Class \ud83c\udf1d: Break</p> <p>Break</p> TUES12/2 <p>CRIT \ud83c\udf1e: Game Ring</p> Due: Game Ring Project"},{"location":"artists/01_caseyreas/","title":"Casey Reas","text":""},{"location":"artists/01_caseyreas/#information","title":"Information","text":"<p>American, b. 1972</p> <p>Artist Website</p>"},{"location":"artists/01_caseyreas/#process-compendium","title":"Process Compendium","text":"<p>Series, Custom software, 2004-2014</p>  Casey Reas. Process 4. 2005. <p>Lecture on Process Compendium:</p>"},{"location":"artists/01_caseyreas/#atomism","title":"Atomism","text":"<p>Series, 2012-Present</p>  Casey Reas. Still Life (RGB A). 2016.  Casey Reas. RGB-056-006-080-823-715. 2015.  Casey Reas. RGB-056-006-080-823-715. 2015. <p>Photos Source: https://reas.com/</p>"},{"location":"artists/02_laurenmccarthy/","title":"Lauren Lee McCarthy","text":""},{"location":"artists/02_laurenmccarthy/#information","title":"Information","text":"<p>American, b. 1987</p> <p>Artist Website</p>"},{"location":"artists/02_laurenmccarthy/#auto","title":"Auto","text":"<p>Performance and Installation, 2025</p> <p>Website</p> Lauren Lee McCarthy. Auto. 2025"},{"location":"artists/02_laurenmccarthy/#surrogate","title":"Surrogate","text":"<p>Performance and Installation, 2021</p> <p>Website</p> Lauren Lee McCarthy. Surrogate. 2021 <p>Photos Source: https://get-lauren.net</p>"},{"location":"exercises/00_conditiondrawing/","title":"0. Conditional Drawing","text":""},{"location":"exercises/00_conditiondrawing/#description","title":"Description","text":"<p>Using Sol LeWitt as a starting point, design your own set of writing instruction to produce a drawing.</p>"},{"location":"exercises/00_conditiondrawing/#be-inventive","title":"Be inventive!","text":"<p>Some possibilities:</p> <ul> <li>Use dice to introduce randomness</li> <li>Create certain conditions based on colors or types of lines</li> <li>Explore folding, and using both sides of the paper</li> </ul>"},{"location":"exercises/00_conditiondrawing/#steps","title":"Steps:","text":"<ol> <li>Collect some materials</li> <li>Write your instructions</li> <li>Make a drawing with your conditions</li> <li>Refine your code</li> <li>Repeat as many times as you need</li> </ol>"},{"location":"exercises/00_conditiondrawing/#share","title":"Share:","text":"<p>After some time, we'll exchange our instructions and see what drawings emerge.</p>"},{"location":"exercises/00_signup/","title":"1. p5!","text":""},{"location":"exercises/00_signup/#description","title":"Description","text":"<p>In this class, we'll be using p5.js to do the majority of our coding. p5.js is an accessible web-based coding environment.</p> <p>\"p5.js is a friendly tool for learning to code and make art. It is a free and open-source JavaScript library built by an inclusive, nurturing community. p5.js welcomes artists, designers, beginners, educators, and anyone else!\"</p> <p>-p5js.org </p> <p>This exercise has a few steps:</p> <ol> <li>Please make sure you have signed up for the class Discord!</li> <li>Watch this interview with Lauren Lee McCarthy, the creator of p5.js:</li> <li>Watch this video by Dan Shiffman of Coding Train (an excellent resource)</li> <li>Sign up for p5.js</li> <li>Look at the name p5.js generates for your first sketch. Imagine a possible art work with that name, it could be anything from a painting to a media installation.</li> <li>Within the introductions channel on the class Discord, share the name of your first sketch, a brief description of your imagined artwork as well as introduce yourself to the class.</li> </ol>"},{"location":"exercises/01_Drawing/","title":"1a. Drawing","text":""},{"location":"exercises/01_Drawing/#description","title":"Description","text":"<p>Use the some or all of the follow functions to create your own drawing in p5.js.</p> <ol> <li><code>circle()</code></li> <li><code>square()</code></li> <li><code>rectMode()</code></li> <li><code>line()</code></li> </ol> <p>Your drawing may be representational or abstract, refer to the class notes for a refresher on the above function</p>"},{"location":"exercises/01_LightandColor/","title":"2. Light and Color","text":"<p>Due next at the start of next class session.</p>"},{"location":"exercises/01_LightandColor/#part-1-turrell","title":"Part 1: Turrell","text":"<p>At either sunrise or sunset between now and our next class session attend the lighting program at James Turrell's Dividing the Light at Pomona College Skyspace.</p> James Turell. Dividing the Light. 2007. <p>Reflect on your experience of the relationship between the LED color lights and the color of the sky. This work is a form of new media art! The lights that are part of the work had to be programmed to match with the time of day and to change colors as the sky changes.</p> <p>Exercise: Write a poetic set of instructions for James Turrell's Dividing the Light. How would you describe the colors? What is the progression of the piece? Be as specific as possible. Next class we'll be talking about how we can change values within our code while our program is running. Consider what values are changing with the lights to give different results.</p>"},{"location":"exercises/01_LightandColor/#part-2-pusey","title":"Part 2: Pusey","text":"<ol> <li> <p>Read the article in our class library about the work of Mavis Pusey.</p> </li> <li> <p>Using Pusey's painting Personante as inspiration, create your own abstract composition in p5.js.</p> </li> </ol> <p>Experiment with:</p> <ul> <li>Alpha</li> <li><code>ellipse()</code>(Reference)</li> <li><code>quad()</code> (Reference)</li> <li><code>triangle()</code>(Reference).</li> <li><code>blendMode()</code>(Reference)</li> </ul>"},{"location":"exercises/01_LightandColor/#mavis-puseys-personante","title":"Mavis Pusey's Personante","text":"Mavis Pusey. Personante. 1990. Colors of painting with RGB values"},{"location":"exercises/01_LightandColor/#submit","title":"Submit","text":""},{"location":"exercises/01_LightandColor/#submit-to-discord","title":"Submit to Discord:","text":"<ol> <li>An image of your abstract composition</li> <li>You p5 Edit link</li> <li>Text of your Dividing the Light instructions.</li> </ol>"},{"location":"exercises/01_drawingincolor/","title":"1b. Drawing in Color","text":""},{"location":"exercises/01_drawingincolor/#description","title":"Description","text":"<p>In addition to basic shapes, use some or all of the follow functions to build on your previous drawing with color! Experiment with Alpha and RGB values.</p> <ol> <li><code>noFill()</code></li> <li><code>noStroke()</code></li> <li><code>fill()</code></li> <li><code>stroke()</code></li> <li><code>background()</code></li> </ol> <p>Refer to the class notes for a refresher on the above function.</p>"},{"location":"exercises/02_dots/","title":"In-Class Exercise: Random Dots","text":""},{"location":"exercises/02_dots/#description","title":"Description","text":"<p>Use what we have learned about <code>random()</code> and variables to make a sketch similar to the one below. Your sketch should add dots with different levels of opacity in random positions across the canvas.</p> <p>Hint: You'll need 3 variables for your x, y, and alpha value.</p> <p>Challenge: Make the color of of the dots vary slightly (you'll need to make more variables for this functionality!)</p> <p>Challenge: Make the program reset on mouse click.</p> <p>Steps to begin:</p> <ol> <li>Consider how you can use the draw loop to draw a dot in a different position each time it is called.</li> <li>Consider what variables you'll need.</li> <li>Consider how you can assign random values to variables while your program is running.</li> </ol>"},{"location":"exercises/02_face/","title":"3. Face Generator","text":"<p>DUE: By beginning of next class</p>"},{"location":"exercises/02_face/#description","title":"Description","text":"<p>Click on the above sketch to make a random face!</p> <p>Use the code template below to make your own custom face generator! Maybe you add a nose, or hair! Or maybe you start from scratch and try to make your own custom generator. This is only an exercise, so play around and see what you can come up with! The only requirement of this exercise is that you add one more shapes that has its size, position, or color, controlled by a randomized variable. See if you can see the relationships between the different shapes to add your own features.</p>"},{"location":"exercises/02_face/#code-template","title":"Code Template","text":"<p>Open up the code template and go to File -&gt; Duplicate Read this code and play around with it to figure out how it works - a large part of learning to program is by reading the code of others!</p> <p>Code Template</p> <p>To begin understanding the template, consider what this line is doing:</p> <p><pre><code>//Random eye offset based on face size\neyeX = random(faceSize * 0.1, faceSize * 0.5);\n</code></pre> If face size were a value of 300, then the <code>random()</code> would return a value between 30 and 150. Importantly, this value of the offset for the eyes is directly tied to however large the face is. A larger face size results in a larger possible offset from the center of the canvas.</p> <p>Look how this offset is used:</p> <pre><code>//draw eyes based on eyeX and eyeY offset\n  fill(255);\n  circle(width / 2 + eyeX, height / 2 - eyeY, eyeSize);\n  circle(width / 2 - eyeX, height / 2 - eyeY, eyeSize);\n</code></pre> <p>Thinking back to a value of 300 for face size, the right eye is between 30 and 150 pixels to the right of the center of the canvas. The left eye is between 30 and 150 pixels to the left of the center of the canvas.</p> <p>The above sketch shows the possible position for the eyes with a face size of 300.</p> <p>Consider for yourself, would you want the eyes closer or farther away, how would you change this in code?</p>"},{"location":"exercises/02_face/#submit","title":"Submit","text":"<p>To Discord:</p> <ol> <li>Your p5 edit link</li> <li>Three of your favorite faces captured as screenshots.</li> </ol>"},{"location":"exercises/02_paint/","title":"In-class Exercise: Painting Program","text":""},{"location":"exercises/02_paint/#description","title":"Description","text":"<p>Using this sketch as a base, spend some time to create your own painting program!</p> <p>Be sure to play with <code>fill()</code>, <code>stroke()</code>, and other attributes we have learned in class thus far. Try swapping different values with <code>mouseX</code> and <code>mouseY</code>.</p> <p>Make a note of what you want to do, but can't quite do just yet. This is you thinking in programming! Slowly we'll build our skills to add more and more complexity to our sketches. For now, think of the tools you know, and craft a sketch from that starting point.</p> <pre><code>function setup(){\n    createCanvas(400,400);\n    background(12,123,220);\n}\n\nfunction draw(){\n    noStroke();\n    fill(255,194,10);\n    circle(mouseX,mouseY,10);\n}\n\nfunction mousePressed(){\n    background(12,123,220);\n}\n</code></pre>"},{"location":"exercises/exercises/","title":"Exercises Index","text":""},{"location":"exercises/exercises/#navigation","title":"Navigation","text":"<p>Use the left panel or the hamburger menu to navigate to in-class and independent Exercise.</p> <p>Exercises listed in by in-class and independent exercises in course order. Exercises will be added as course progresses.</p> Recreation of Josef Albers' painting, Homage to the Square: \"Ascending\" (1953) in p5.js <p>Code</p>"},{"location":"folder/02_variables/","title":"02 variables","text":""},{"location":"folder/02_variables/#variables","title":"Variables","text":"<p><code>RECAP:</code> What we learned last class:</p> <ul> <li>What is p5.js?</li> <li>How to code essential shapes</li> <li>How to code colors</li> <li>How to code attributes</li> </ul> <p><code>PLAN:</code></p> <ul> <li>The flow of p5.js</li> <li><code>setup()</code> and <code>draw()</code></li> <li>How to write blocks of code</li> <li><code>mouseX</code> and <code>mouseY</code></li> <li><code>mousePressed()</code></li> <li><code>width</code> and <code>height</code></li> <li>Basic math in p5.js</li> <li>How to make our own variables</li> <li>How to use incrementation operators</li> <li><code>random()</code></li> <li>Independent exercise: Face Generator</li> </ul>"},{"location":"folder/02_variables/#setup-and-draw","title":"setup() and draw()","text":"<p><code>setup()</code> -&gt; The starting conditions of our p5 sketch.</p> <p><code>draw()</code> -&gt; The continuous loop of our p5 sketch.</p> Setup condition of a tennis match (Serena vs. Venus Williams, 2027) Draw condition of a tennis match (Serena vs. Venus Williams, 2027) Setup condition of a Pong Draw condition of a Pong <p>Setup condition of p5 sketch</p> <p>Draw condition of p5 sketch (Click to restart)</p>"},{"location":"folder/02_variables/#code-block","title":"Code Block","text":"<p>To understand the logic of setting up our sketch with <code>setup()</code> then continually drawing our sketch with <code>draw()</code> , we need to learn about the syntax of these functions. To do that we need to examine the code blocks.</p> <p>In short, a code block is a section of code that is grouped together.</p> <p>Example:</p> <pre><code>function setup(){\n    //some code\n    //some more code\n    //even more code\n}\n</code></pre> <p>This code block above consists of a few elements:</p> <ol> <li><code>function</code> - This designates our code block as a function.</li> <li><code>setup()</code> - This is the name of our function. <code>setup()</code> is a special function that p5 already knows how to handle.</li> <li><code>{ }</code> - Open and closed curly brackets, these indicate where we will write our code.</li> <li>Body - this is just the code that we will be writing.</li> </ol> <p><code>NOTE</code>: Unlike when we were drawing without <code>setup()</code> and <code>draw()</code>, the order of these functions doesn't matter. We could reverse their positions and <code>setup()</code> would still run first. However, the order inside our code blocks does matter. Code will be executed from the top line to the bottom.</p>"},{"location":"folder/02_variables/#drawing-with-variables","title":"Drawing with Variables","text":"<p>Let's start by going over all we did last class by using the following to draw a circle:</p> <ul> <li><code>createCanvas()</code></li> <li><code>background()</code></li> <li><code>noStroke()</code></li> <li><code>fill()</code></li> <li><code>circle()</code></li> </ul> <pre><code>function setup(){\n  createCanvas(400,400);\n}\n\nfunction draw(){\n  background(12,123,220);\n  noStroke();\n  fill(255,194,10);\n  circle(200,200,80);\n}\n</code></pre> <p>Result of the above code</p> <p>Looking more closely at <code>draw()</code>, we can see that even though draw is happening over and over again, it's drawing the same thing!</p> <p>In order to make our sketch draw dynamically, we need to change the values of our sketch dynamically. We can do this with variables</p>"},{"location":"folder/02_variables/#mousex-and-mousey","title":"mouseX and mouseY","text":"<p>To start we'll use some of p5's built-in variables.</p> <p>Reference</p> <p><code>mouseX</code> is a variable that always stores our mouse's horizontal position. <code>mouseY</code> is a variable that always stores our mouse's vertical position.</p> <p>These values update as we move our mouse!</p> <p>As an experiment, let's replace our <code>circle()</code> x value with <code>mouseX</code></p> <pre><code>    circle(mouseX,200,80);\n</code></pre> <p>If we change the y value to <code>mouseY</code>, our circle will follow our mouse:</p> <pre><code>    circle(mouseX,mouseY,80);\n</code></pre> <p>Let's see what happens if we move our <code>background()</code> to the top of our <code>setup()</code> and change the size of our circle to 10. Remember, this will cause <code>background()</code> to only run once.</p> <pre><code>function setup(){\n    createCanvas(400,400);\n    background(12,123,220);\n}\n\nfunction draw(){\n    noStroke();\n    fill(255,194,10);\n    circle(mouseX,mouseY,10);\n}\n</code></pre> <p>We made a painting program!</p> <p>Our sketch is now drawing our circle over and over again at our <code>mouseX</code> and <code>mouseY</code> position without redrawing the background.</p>"},{"location":"folder/02_variables/#mousepressed","title":"mousePressed()","text":"<p><code>mousePressed()</code> is a special function within p5 that is called every time we click our mouse. We can use this to clear our drawing to start on a fresh background.</p> <p>To use <code>mousePressed()</code> we need to make a new block of code. To clear our background when our mouse is pressed, we can add a new <code>background()</code> in our <code>mousePressed()</code> function.</p> <pre><code>function setup(){\n    size(400,400);\n    background(12,123,220);\n}\n\nfunction draw(){\n    noStroke();\n    fill(255,194,10);\n    circle(mouseX,mouseY,10);\n}\n\nfunction mousePressed(){\n    background(12,123,220);\n}\n</code></pre> <p>We made resetting painting program!</p> <p>As a note, <code>mouseX</code> and <code>mouseY</code> can replace any value in our sketch.</p> <p>If I move my <code>background()</code> from <code>setup()</code> to <code>draw()</code> and replace my circle diameter with <code>mouseX</code>.</p> <p><pre><code>    circle(200, 200, mouseX);\n</code></pre> Our <code>mouseX</code> variable now changes the size of our circle!</p> <p>The size of our circle controlled by the position of our mouse!</p>"},{"location":"folder/02_variables/#in-class-exercise-painting-program","title":"In-class Exercise: Painting Program","text":"<p>Spend some time using the sketch we wrote to create your own painting program!</p> <p>Try adjusting the opacity value in your <code>fill()</code> to get new results!</p>"},{"location":"folder/02_variables/#width-and-height","title":"width and height","text":"<p>Some other built in p5 variables include <code>width</code> and <code>height</code>.</p> <p>These variables always store the width and height of my sketch.</p> <pre><code>function setup(){\n    createCanvas(400,400);\n}\n\nfunction draw(){\n    background(12,123,220);\n    noStroke();\n    fill(255,194,10);\n    circle(width/2,height/2,80);\n}\n</code></pre>"},{"location":"folder/02_variables/#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li><code>+</code> - Addition </li> <li><code>-</code> - Subtraction</li> <li><code>*</code> - Multiplication</li> <li><code>/</code> - Division</li> <li><code>=</code> - Equals</li> </ul>"},{"location":"folder/02_variables/#what-is-a-variable","title":"What is a Variable?","text":"<p>What is <code>mouseX</code> or <code>width</code>?</p> <p>Variables are named storage locations in our computer's memory where we can store values.</p> <p><code>mouseX</code> and <code>width</code> are both named storage location where p5 is constantly updating their associated values.</p> Simplified drawing of variables in memory"},{"location":"folder/02_variables/#making-our-own-variable","title":"Making our Own Variable","text":"<p>Let's work towards this example: our circle moves across our canvas and we can click to reset it's position to the start.</p> <p>Click the canvas to reset our Circle!</p>"},{"location":"folder/02_variables/#steps-to-making-a-variable","title":"Steps to Making a Variable","text":"<ul> <li>Stating <code>let</code></li> <li>Name of variable</li> <li>Initialize variable</li> </ul>"},{"location":"folder/02_variables/#let","title":"let","text":"<p>We can use the keyword <code>let</code> to begin declaring a variable.</p> <p>Example:</p> <p><pre><code>let frog;\nlet toad;\nlet bird;\n</code></pre> In JavaScript, we don't need to tell our editor what type of variable we are making. In other words, we don't need to let JavaScript know if our variable is a Number, a word, or something else. In part, it is up to the artist to keep track of what type of variable we want each new variable to be.</p> <p>Some variable types:</p> <p>JavaScript variables:</p> <ul> <li>Number: both decimal and whole numbers</li> <li>String: words or sentences</li> <li>...and many more</li> </ul>"},{"location":"folder/02_variables/#name","title":"Name","text":"<p>We can name our variable anything, but it is good to use a name that allows us to keep track of what we want it to do. As an example, <code>circleX</code> to control the x position of our circle.</p> <p>Some rules to follow:</p> <ul> <li>Lower case letter to start <code>Dog</code> vs. <code>dog</code></li> <li>No numbers as first character <code>1dog</code> vs. <code>dog1</code></li> <li>No spaces <code>black cat</code> vs. <code>blackCat</code></li> <li>use camelCase <code>blackcat</code> vs. <code>blackCat</code></li> <li>Don\u2019t use reserved keywords or existing p5 variable names.</li> </ul>"},{"location":"folder/02_variables/#initialize","title":"Initialize","text":"<p>Give our variable an initial value to start with.</p> <p>We can do this within a block of code:</p> <p><pre><code>let circleX;\n\nfunction setup(){\n    createCanvas(400,400);\n    circleX = 40;\n}\n</code></pre> Or, when we declare our variable:</p> <pre><code>let circleX = 40;\n\nfunction setup(){\n    createCanvas(400,400);\n}\n</code></pre>"},{"location":"folder/02_variables/#variable-scope","title":"Variable Scope","text":"<p>Variables have two levels of scope, global and local.</p> <p>We won't go into too much detail about this now, but in short:</p> <p>Global variables are declared at the top of our sketch. They can be used within any block of code.</p> <p>Local variables are declared within a function and can only be used within that function.</p>"},{"location":"folder/02_variables/#making-our-circle-move","title":"Making our Circle Move","text":"<p>After we declare the type and name of our variable and initialize its value, we should have this sketch:</p> <pre><code>let circleX = 0;\n\nfunction setup(){\n  createCanvas(400,400);\n\n}\n\nfunction draw(){\n  background(12,123,220);\n  noStroke();\n  fill(255,194,10);\n  circle(200,200,80);\n}\n</code></pre> <p>Then we need to replace our circle's X value with our new variable:</p> <pre><code>circle(circleX,200,80);\n</code></pre> <p>Lastly, we need a way to increase our variable over time. For this, we can use an incrementation operator.</p>"},{"location":"folder/02_variables/#incrementation-operators","title":"Incrementation Operators","text":"<p>We need to increase our variable by a certain value, then assign that new value back to our variable.</p> <ul> <li><code>ourVariable = ourVariable+1</code> = <code>ourVariable+=1</code> = <code>ourVariable++</code></li> <li>Subtraction - <code>ourVariable-=2</code></li> <li>Multiplication - <code>ourVariable*=2</code></li> <li>Division - <code>ourVariable/=2</code></li> </ul> <p>To move our circle, we can increment our variable <code>circleX</code> by <code>1</code> each time <code>draw()</code> is called.</p> <pre><code>let circleX = 0;\n\nfunction setup(){\n  createCanvas(400, 400);\n\n}\n\nfunction draw(){\n  background(12, 123, 220);\n  noStroke();\n  fill(255, 194, 10);\n  circle(circleX, 200, 80);\n  circleX += 1;\n}\n</code></pre> <p>This example is repeating. Some extra code was added to make this example for the website. We'll learn more about this next class.</p> <p>We can change how fast the circle is moving by changing incrementation value.</p> <pre><code>  circleX += 10;\n</code></pre> <p>This example is repeating. Some extra code was added to make this example for the website. We'll learn more about this next class.</p>"},{"location":"folder/02_variables/#random","title":"random()","text":"<p>Reference</p> <p>Syntax: </p> <ul> <li><code>random(max)</code><ul> <li>returns a random value between 0 and max</li> </ul> </li> <li><code>random(min,max)</code> <ul> <li>returns a random value between min and max</li> </ul> </li> </ul> <p>Parameters</p> <ul> <li>min   - (Number) lower limit</li> <li>max   - (Number) upper limit</li> </ul> <p>This is the first function we\u2019ve used that returns a value!</p>"},{"location":"folder/02_variables/#using-random","title":"Using Random","text":"<p>We can use <code>random()</code> to give <code>circleX</code> a random value when we press our mouse!</p> <pre><code>function mousePressed()\n{\n  circleX = random(0,width);\n}\n</code></pre> <p>Or, by moving our <code>background()</code> and adding some more variables, we can make many circles appear randomly on our screen.</p> <p>Variables:</p> <ul> <li><code>x</code></li> <li><code>y</code></li> <li><code>a</code></li> <li><code>r</code></li> <li><code>b</code></li> <li><code>g</code> </li> </ul> <pre><code>let x;\nlet y; \nlet a;\nlet r;\nlet g;\nlet b;\n\nfunction setup(){\n  createCanvas(400, 400);\n  background(12, 123, 220);\n}\n\nfunction draw(){\n\n  noStroke();\n\n  y = random(height);\n  x = random(width);\n  a = random(60,200);\n  r = random(200,255);\n  g = random(200,255);\n  b = random(100);\n\n  fill(r, g, b,a);\n  circle(x, y,10);\n\n}\n</code></pre>"},{"location":"folder/02_variables/#independent-exercise-face-generator","title":"Independent Exercise: Face Generator","text":"<p>DUE: By beginning of next class</p> <p>Click on the above sketch to make a random face!</p> <p>Open up the code template below and go to File -&gt; Duplicate Read this code and play around with it to figure out how it works - a large part of learning to program is by reading the code of others!</p> <p>Code Template</p> <p>Use this code to make your own custom face generator! Maybe you add a nose, or hair! Or maybe you start from scratch and try to make your own custom generator. This is only an exercise, so play around and see what you can come up with! The only requirement of this exercise is that you add one more shapes that has its size, position, or color, controlled by a randomized variable. See if you can see the relationships between the different shapes to add your own features.</p>"},{"location":"folder/02_variables/#submit","title":"Submit","text":"<p>To Canvas:</p> <ol> <li>Your p5 edit link</li> </ol> <p>To Discord:</p> <ol> <li>Your p5 edit link</li> <li>Three of your favorite faces captured as screenshots.</li> </ol>"},{"location":"notes/notes/","title":"Notes Index","text":""},{"location":"notes/notes/#navigation","title":"Navigation","text":"<p>Use the left panel or hamburger menu to navigate to course notes by topic.</p> <p>Notes listed in course order. Notes will be added as course progresses.</p>  Agnes Martin. Untitled. 1999."}]}