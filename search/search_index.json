{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Syllabus SEMESTER: Fall 2025 LOCATION: Scripps College, Steele 229 TIME: Tuesday and Thursday 4:15-6:45, 8/25-12/3 Weekly class hours: 5 Hours External study hours: 9 Hours INSTRUCTOR Vinny Roca, Scripps College Email: vroca@scrippscollege.edu Office Hours: Lang 227. By appointment; Tuesday & Thursday 1:30-2:30 Schedule office hours Course Description This interdisciplinary introductory course explores technical, artistic, and cultural aspects of programming. Using accessible and inclusive programming environments, students will learn the fundamentals of programming through making visual, interactive, and sound-based projects. Through readings and weekly discussions, students will engage with the political, economic, and cultural impact of code with a particular interest in code as an artistic medium and the power relations in programming. Learning Outcomes The objective of this course is to introduce the fundamental skills of programming for the arts and contextualize this technical knowledge within the cultural, social, economic, and political impact of programming. Through reading responses, projects, discussions, and technical tutorials, students will achieve the following learning outcomes: Technical proficiency in the fundamentals of object-oriented and procedural programming. Ability to analyze the role of programming in media art. Ability to analyze programming as a cultural, historical, and technical object. Gain a critical understanding of the history and cultural impact of programming. Ability to create visual, interactive, and sound-based media art projects using programming. Grading, Assignments, Course Policy Course Breakdown % 15 Time 15 Interactive 15 Performance 15 Game 10 Participation 10 Reading Responses 40 Exercises Evaluation Criteria Projects Completed projects will be graded using the following criteria: Technique Is the assignment well-crafted? Is the conceptual idea behind the assignment supported by the technical and artistic decisions made by the student? Concept Does the student comprehend the scope of the assignment? Is the student able to communicate their ideas clearly? Does the student demonstrate comprehension of the concepts covered in class? Is the student able to articulate the concepts behind their work? Generosity Does the student exhibit insight, criticality, and risk-taking in their work? How much sensitivity and critical insight does the student display towards personal assignments and in critiquing their peers\u2019 work? Exercises Exercises are mainly for student practice and experimentation. Exercises will be graded on their level of completion following the exercise prompt. Participation As this course includes in-person discussions, critiques, tutorials and exercises active participation and attendance make up 10 percent of students\u2019 final grade. All students are required to participate actively during the discussion periods, which will be facilitated using each student\u2019s reading responses. Students more than ten minutes late for class will be marked as late. Three late marks will result in an unexcused absence. More than two unexcused absences may, at the instructor\u2019s discretion, affect the final participation grade. All critique classes are mandatory. If you anticipate missing a critique class or expect to have more than two absences during the course, inform the instructor as soon as possible. Reading Responses Reading responses are due by 5 p.m. the day before discussions. Reading responses should be posted in proper Discord channel. Reading responses will be graded on the level of engagement the student has with the text. Is the student connecting the text to other readings or experiences? Is the student engaging with the text through questions, disagreements, or new lines of thought? As reading responses are essential to the discussion section of the course, late reading responses will not be accepted. Late Work and Extensions For all exercises, late work will not be accepted. Completing exercises on time is essential to the progression of the course. Not completing exercises will result in a student falling behind. In the situation that extra time is needed to complete exercises, students must reach out to the instructor as soon as possible. Late projects not ready by their assigned crit day will automatically lose one letter grade. Each day the project is late, it will lose one more letter grade. After three days, the project will not be accepted. Discord and Email For this class, we will be sharing our exercises, reading responses and projects through Discord. Students will be invited to join the class Discord server on the first day of class. I will respond to Discord messages and email within 24 hrs of receipt. I will respond to messages sent over the weekend on the following Monday. Canvas Submissions Submissions for the class will be made through Canvas. Readings All external readings will be provided on Box using this link. Course Materials Students are expected to work on exercises and assignments outside of class. To complete assignments students will need to make use of their personal computer. Scripps College Land Acknowledgement We would like to respectfully acknowledge that Scripps College sits within the historic homeland of the Tongva people. We acknowledge the painful history of genocide and colonization in our area. We acknowledge the strength and resilience of the Tongva people of the past, present, and future as the original caretakers of the land, water, and air, and we recognize our responsibility to be respectful stewards of the Scripps College campus. Today, this area and this campus are home to many Indigenous people from across the globe and we are proud that they are part of our community and institution. Statement on Inclusion We understand the classroom as a space for practicing freedom; where one may challenge psychic, social, and cultural borders and create meaningful artistic expressions. To do so we must acknowledge and embrace the different identities and backgrounds we inhabit. This means that we will use preferred pronouns, respect self-identifications, and be mindful of special needs. Disagreement is encouraged and supported, however, our differences affect our conceptualization and experience of reality, and it is extremely important to remember that certain gender, race, sex, and class identities are more privileged while others are undermined and marginalized. Consequently, this makes some people feel more protected or vulnerable during debates and discussions. A collaborative effort between the students and Instructor is needed to create a supportive learning environment. While everyone should feel free to experiment creatively and conceptually, if a class member points out that something you have said or shared with the group is offensive, avoid being defensive; instead approach the discussion as a valuable opportunity for us to grow and learn from one another. Alternatively, if you feel that something said in discussion or included in a piece of work is harmful, you are encouraged to speak with the Instructor. Statement adopted from voidLab at https://github.com/voidlab/diversity-statement. Resources Class Resources p5.js Reference p5.js Coding Train 7C Student Resources Campus Safety Chaplains Chicano Latino Student Affairs (CLSA) Claremont Colleges Library The Claremont Colleges Services (TCCS) EmPOWER Center Health Education Outreach (HEO) Huntley Bookstore LiveSafe App Monsour Counseling and Psychological Services (MCAPS) Office of Black Student Affairs (OBSA) Student Disability Resource Center Student Health Insurance Plan Student Health Services Queer Resource Center (QRC)","title":"Syllabus"},{"location":"#syllabus","text":"SEMESTER: Fall 2025 LOCATION: Scripps College, Steele 229 TIME: Tuesday and Thursday 4:15-6:45, 8/25-12/3 Weekly class hours: 5 Hours External study hours: 9 Hours INSTRUCTOR Vinny Roca, Scripps College Email: vroca@scrippscollege.edu Office Hours: Lang 227. By appointment; Tuesday & Thursday 1:30-2:30 Schedule office hours","title":"Syllabus"},{"location":"#course-description","text":"This interdisciplinary introductory course explores technical, artistic, and cultural aspects of programming. Using accessible and inclusive programming environments, students will learn the fundamentals of programming through making visual, interactive, and sound-based projects. Through readings and weekly discussions, students will engage with the political, economic, and cultural impact of code with a particular interest in code as an artistic medium and the power relations in programming.","title":"Course Description"},{"location":"#learning-outcomes","text":"The objective of this course is to introduce the fundamental skills of programming for the arts and contextualize this technical knowledge within the cultural, social, economic, and political impact of programming. Through reading responses, projects, discussions, and technical tutorials, students will achieve the following learning outcomes: Technical proficiency in the fundamentals of object-oriented and procedural programming. Ability to analyze the role of programming in media art. Ability to analyze programming as a cultural, historical, and technical object. Gain a critical understanding of the history and cultural impact of programming. Ability to create visual, interactive, and sound-based media art projects using programming.","title":"Learning Outcomes"},{"location":"#grading-assignments-course-policy","text":"","title":"Grading, Assignments, Course Policy"},{"location":"#course-breakdown","text":"% 15 Time 15 Interactive 15 Performance 15 Game 10 Participation 10 Reading Responses 40 Exercises","title":"Course Breakdown"},{"location":"#evaluation-criteria","text":"","title":"Evaluation Criteria"},{"location":"#projects","text":"Completed projects will be graded using the following criteria: Technique Is the assignment well-crafted? Is the conceptual idea behind the assignment supported by the technical and artistic decisions made by the student? Concept Does the student comprehend the scope of the assignment? Is the student able to communicate their ideas clearly? Does the student demonstrate comprehension of the concepts covered in class? Is the student able to articulate the concepts behind their work? Generosity Does the student exhibit insight, criticality, and risk-taking in their work? How much sensitivity and critical insight does the student display towards personal assignments and in critiquing their peers\u2019 work?","title":"Projects"},{"location":"#exercises","text":"Exercises are mainly for student practice and experimentation. Exercises will be graded on their level of completion following the exercise prompt.","title":"Exercises"},{"location":"#participation","text":"As this course includes in-person discussions, critiques, tutorials and exercises active participation and attendance make up 10 percent of students\u2019 final grade. All students are required to participate actively during the discussion periods, which will be facilitated using each student\u2019s reading responses. Students more than ten minutes late for class will be marked as late. Three late marks will result in an unexcused absence. More than two unexcused absences may, at the instructor\u2019s discretion, affect the final participation grade. All critique classes are mandatory. If you anticipate missing a critique class or expect to have more than two absences during the course, inform the instructor as soon as possible.","title":"Participation"},{"location":"#reading-responses","text":"Reading responses are due by 5 p.m. the day before discussions. Reading responses should be posted in proper Discord channel. Reading responses will be graded on the level of engagement the student has with the text. Is the student connecting the text to other readings or experiences? Is the student engaging with the text through questions, disagreements, or new lines of thought? As reading responses are essential to the discussion section of the course, late reading responses will not be accepted.","title":"Reading Responses"},{"location":"#late-work-and-extensions","text":"For all exercises, late work will not be accepted. Completing exercises on time is essential to the progression of the course. Not completing exercises will result in a student falling behind. In the situation that extra time is needed to complete exercises, students must reach out to the instructor as soon as possible. Late projects not ready by their assigned crit day will automatically lose one letter grade. Each day the project is late, it will lose one more letter grade. After three days, the project will not be accepted.","title":"Late Work and Extensions"},{"location":"#discord-and-email","text":"For this class, we will be sharing our exercises, reading responses and projects through Discord. Students will be invited to join the class Discord server on the first day of class. I will respond to Discord messages and email within 24 hrs of receipt. I will respond to messages sent over the weekend on the following Monday.","title":"Discord and Email"},{"location":"#canvas-submissions","text":"Submissions for the class will be made through Canvas.","title":"Canvas Submissions"},{"location":"#readings","text":"All external readings will be provided on Box using this link.","title":"Readings"},{"location":"#course-materials","text":"Students are expected to work on exercises and assignments outside of class. To complete assignments students will need to make use of their personal computer.","title":"Course Materials"},{"location":"#scripps-college-land-acknowledgement","text":"We would like to respectfully acknowledge that Scripps College sits within the historic homeland of the Tongva people. We acknowledge the painful history of genocide and colonization in our area. We acknowledge the strength and resilience of the Tongva people of the past, present, and future as the original caretakers of the land, water, and air, and we recognize our responsibility to be respectful stewards of the Scripps College campus. Today, this area and this campus are home to many Indigenous people from across the globe and we are proud that they are part of our community and institution.","title":"Scripps College Land Acknowledgement"},{"location":"#statement-on-inclusion","text":"We understand the classroom as a space for practicing freedom; where one may challenge psychic, social, and cultural borders and create meaningful artistic expressions. To do so we must acknowledge and embrace the different identities and backgrounds we inhabit. This means that we will use preferred pronouns, respect self-identifications, and be mindful of special needs. Disagreement is encouraged and supported, however, our differences affect our conceptualization and experience of reality, and it is extremely important to remember that certain gender, race, sex, and class identities are more privileged while others are undermined and marginalized. Consequently, this makes some people feel more protected or vulnerable during debates and discussions. A collaborative effort between the students and Instructor is needed to create a supportive learning environment. While everyone should feel free to experiment creatively and conceptually, if a class member points out that something you have said or shared with the group is offensive, avoid being defensive; instead approach the discussion as a valuable opportunity for us to grow and learn from one another. Alternatively, if you feel that something said in discussion or included in a piece of work is harmful, you are encouraged to speak with the Instructor. Statement adopted from voidLab at https://github.com/voidlab/diversity-statement.","title":"Statement on Inclusion"},{"location":"#resources","text":"","title":"Resources"},{"location":"#class-resources","text":"p5.js Reference p5.js Coding Train","title":"Class Resources"},{"location":"#7c-student-resources","text":"Campus Safety Chaplains Chicano Latino Student Affairs (CLSA) Claremont Colleges Library The Claremont Colleges Services (TCCS) EmPOWER Center Health Education Outreach (HEO) Huntley Bookstore LiveSafe App Monsour Counseling and Psychological Services (MCAPS) Office of Black Student Affairs (OBSA) Student Disability Resource Center Student Health Insurance Plan Student Health Services Queer Resource Center (QRC)","title":"7C Student Resources"},{"location":"00_procedural_experiments/","text":"Playing with Code(s) Code can be approached as a conceptual framework. We could also consider here substituting the word code for conditions or instructions. To make code, is to make the conditions for something to be generated. In this class, we'll be considering code in a literal sense, as computer code. However, the history of code in art has been informed by a long relationship between instructions, art, and games. Rules as Code: Danish Clapping Game Play in a pair Instructions: Face your partner and clap your thighs at the same time. Choose an arm position randomly: Both arms up, both arms to the left, both arms to the right. If you choose the same position, clap hands and repeat from the top. If you choose different positions, repeat from the top. Code and Art Vera Molnar Vera Molnar. Lettres de ma M\u00e8re (\u201cLetter from my Mother\u201d). 1987. Courtesy of The Anne and Michael Spalter Digital Art Collection Loose Codes of Art Robert Barry Robert Barry. ART WORK. 1970. Yoko Ono Yoko Ono. Cut Piece. 1964. Yoko Ono. Grapefruit. 1964. Yoko Ono. DOLLAR PIECE. 1963. Instructions: DOLLAR PIECE Select an amount of dollar. Imagine all the things that you can buy with that amount.(a) Imagine all the things that you cannot buy with that amount.(b) Write it on a piece of paper. 1963 spring Strict Codes of Art Mel Bochner Mel Bochner. Measurement Room: No Vantage Point. 2019\u20132020. Sol Lewitt Sol Lewitt. Wall Drawing #118. 1971 Instructions: \u201cOn a wall surface, any continuous stretch of wall, using a hard pencil, place fifty points at random. The points should be evenly distributed over the area of the wall. All of the points should be connected by straight lines.\u201d Sol LeWitt: A Wall Drawing Retrospective - MASS MoCA Modified version of #118 for paper: On a pieces of paper, using a pencil, place twenty points evenly distributed over the area of one of the paper's sides. All of the points should be connected with straight lines. Game Codes: Dots & Boxes Instructions: Draw a three by three grid of dots Each player takes turn drawing a horizontal or vertical line that connects two dots The player who completes the fourth side of a 1\u00d71 box earns one point and takes another turn (initial the box) The player with the most boxes at the end wins In-class exercise: Conditional Drawing Using Sol LeWitt as a starting point, design your own set of conditions that produce a drawing. In this exercise, try to be as percise as possible with your instructions, while still leaving room for generative variation. Make one drawing with your conditions, then refine your code . After some time, we'll exchange our conditions and see what drawings emerge. Independent Exercise: Sign up for p5.js We will be using p5.js for this class. To use p5.js you will need to make an account. Sign Up Independent Exercise: Pea Work Original: Due: end of the semester or anytime in between Yoko Ono. Pea Piece . 1960. PEA PIECE Carry a bag of peas. Leave a pea wherever you go. 1960 winter A modified version to complete for your exercise: Carry your bag of five beads. Leave a bead where it makes sense to do so. Share an image of a place you left a bead within the class Discord.","title":"Playing with Code(s)"},{"location":"00_procedural_experiments/#playing-with-codes","text":"Code can be approached as a conceptual framework. We could also consider here substituting the word code for conditions or instructions. To make code, is to make the conditions for something to be generated. In this class, we'll be considering code in a literal sense, as computer code. However, the history of code in art has been informed by a long relationship between instructions, art, and games.","title":"Playing with Code(s)"},{"location":"00_procedural_experiments/#rules-as-code-danish-clapping-game","text":"Play in a pair Instructions: Face your partner and clap your thighs at the same time. Choose an arm position randomly: Both arms up, both arms to the left, both arms to the right. If you choose the same position, clap hands and repeat from the top. If you choose different positions, repeat from the top.","title":"Rules as Code: Danish Clapping Game"},{"location":"00_procedural_experiments/#code-and-art","text":"","title":"Code and Art"},{"location":"00_procedural_experiments/#vera-molnar","text":"Vera Molnar. Lettres de ma M\u00e8re (\u201cLetter from my Mother\u201d). 1987. Courtesy of The Anne and Michael Spalter Digital Art Collection","title":"Vera Molnar"},{"location":"00_procedural_experiments/#loose-codes-of-art","text":"","title":"Loose Codes of Art"},{"location":"00_procedural_experiments/#robert-barry","text":"Robert Barry. ART WORK. 1970.","title":"Robert Barry"},{"location":"00_procedural_experiments/#yoko-ono","text":"Yoko Ono. Cut Piece. 1964. Yoko Ono. Grapefruit. 1964. Yoko Ono. DOLLAR PIECE. 1963. Instructions: DOLLAR PIECE Select an amount of dollar. Imagine all the things that you can buy with that amount.(a) Imagine all the things that you cannot buy with that amount.(b) Write it on a piece of paper. 1963 spring","title":"Yoko Ono"},{"location":"00_procedural_experiments/#strict-codes-of-art","text":"","title":"Strict Codes of Art"},{"location":"00_procedural_experiments/#mel-bochner","text":"Mel Bochner. Measurement Room: No Vantage Point. 2019\u20132020.","title":"Mel Bochner"},{"location":"00_procedural_experiments/#sol-lewitt","text":"Sol Lewitt. Wall Drawing #118. 1971 Instructions: \u201cOn a wall surface, any continuous stretch of wall, using a hard pencil, place fifty points at random. The points should be evenly distributed over the area of the wall. All of the points should be connected by straight lines.\u201d Sol LeWitt: A Wall Drawing Retrospective - MASS MoCA Modified version of #118 for paper: On a pieces of paper, using a pencil, place twenty points evenly distributed over the area of one of the paper's sides. All of the points should be connected with straight lines.","title":"Sol Lewitt"},{"location":"00_procedural_experiments/#game-codes-dots-boxes","text":"Instructions: Draw a three by three grid of dots Each player takes turn drawing a horizontal or vertical line that connects two dots The player who completes the fourth side of a 1\u00d71 box earns one point and takes another turn (initial the box) The player with the most boxes at the end wins","title":"Game Codes: Dots &amp; Boxes"},{"location":"00_procedural_experiments/#in-class-exercise-conditional-drawing","text":"Using Sol LeWitt as a starting point, design your own set of conditions that produce a drawing. In this exercise, try to be as percise as possible with your instructions, while still leaving room for generative variation. Make one drawing with your conditions, then refine your code . After some time, we'll exchange our conditions and see what drawings emerge.","title":"In-class exercise: Conditional Drawing"},{"location":"00_procedural_experiments/#independent-exercise-sign-up-for-p5js","text":"We will be using p5.js for this class. To use p5.js you will need to make an account. Sign Up","title":"Independent Exercise: Sign up for p5.js"},{"location":"00_procedural_experiments/#independent-exercise-pea-work","text":"Original: Due: end of the semester or anytime in between Yoko Ono. Pea Piece . 1960. PEA PIECE Carry a bag of peas. Leave a pea wherever you go. 1960 winter A modified version to complete for your exercise: Carry your bag of five beads. Leave a bead where it makes sense to do so. Share an image of a place you left a bead within the class Discord.","title":"Independent Exercise: Pea Work"},{"location":"01_Processing/","text":"hljs.highlightAll(); // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); p5.js, Shapes and Color Get started by going to the p5.js editor website . About p5.js p5.js is an open source project. It a JavaScript library adaptation of the open source project Processing developed by Casey Raes and Ben Fry in 2001. p5.js is a development environment in which artists and designers can both produce software art and learn how to code. p5.js and Processing conceptually builds on the idea that artists make use of forms of \"programming\" and instructions. Agnes Martin. Untitled. 1999. Soll LeWitt. Wall Drawing #260. 1975. p5.js is a tool for making software. P5.js was first developed by Lauren Lee McCarthy in 2013. Artist Spotlight Casey Raes American, b. 1972 Artist Website Atomism Series, 2012-Present Casey Raes. Still Life (RGB A). 2016. Casey Raes. RGB-056-006-080-823-715. 2015. Casey Raes. RGB-056-006-080-823-715. 2015. Lauren Lee McCarthy American, b. 1987 Artist Website Auto 2025 Website Lauren Lee McCarthy. Auto. 2025 Surrogate 2021 Website Lauren Lee McCarthy. Surrogate. 2021 What is p5.js? We spent our first day drawing with our human understandable instructions. To write instructions for our computer to make artworks with our computer, we need to write our instructions in a language the computer understanding. To do that we are going to be writing instructions for our code in the language p5.js uses, JavaScript. Interface of p5 Editor p5.js Editor If you have done so already, head to the p5 Editor . The p5 editor allows us to write code for our browser in our browser! If you haven't done so already, you can sign up for an account and login. The interface of the p5 Editor is fairly simple: The area on the left is where we can write our instructions (also know as code ) for our artworks. The play button at the top allows us to run our code. The stop button stops our code. The top menus allow us to access various options related to the p5 editor. Customizing your p5 editor I reccomend using p5 in High Contrast mode. You can change to High Contrast mode by click on the gear icon and going to General Settings. You can also customize your Text Size for easier reading. Saving and Renaming You can save you sketch by pressing ctrl+s of navigating to file -> save. You can rename your sketch by click on your project name next to the pencil icon. Drawing with Code Code is written in particular \"languages.\" These languages are not as complicated as \"human\" languages, but each language is slightly different and expects you to write your code is specific ways. createCanvas() Reference createCanvas() is a function that sets the size of our sketch. The way to call a function, sometimes refereed to as a command, is the function name followed by open and closed parentheses. Functions are very similar to how you might have learned them in your math classes, such as f(x). A function takes in a value, x, and often times, returns a value, f(x). It is important to note that not all functions take in values, but we will take about that a bit later. createCanvas() , for example, takes in the parameters width and height . The reference for createCanvas() would look something like this: Syntax: size(a, b) Parameters a - width b - height Syntax is the word we use to describe the particular writing style of a programming language. Every programming language has a different syntax . The syntax for size is that it takes in and a and b parameter. a is equal to the width of our sketch and b is equal to our height. If we want our sketch to look be 400 pixels by 400 pixels we could write; function setup(){ //Set our sketch to 800 by 800 pixels createCanvas(400,400); } Notice the \"//\" on the first line. This marks a comment. A comment is meant for human programmers and is not \"read\" by our computer. Also notice the semi colon \";\" at the end of the second line. For our purposes now, we can think of the semi colon as a period, marking the end of our line of code. Errors If I spell 'createCanvas()' incorrectly, my sketch won't run, and p5 will let me know I have an error. function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } Error message background() Reference background() is a function that sets the background for our sketch. background() can take in many different types of parameters including color values and images. For now we'll focus on setting a gray scale value. Syntax: background(a) Parameters a - Gray value (0-255) To draw a middle gray background on our sketch: function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } function draw(){ background(127); } setup() and draw() We'll get more into how setup() and draw() function in the next class. For now, we can think of setup() as where we set up our sketch by drawing our canvas, and draw() is where we can make our drawing. We want to make sure the our code is in between the { } of the function. circle() Reference circle() is a function that draws an circle to our canvas. Syntax: circle(a, b, c) Parameters a - x-coordinate of the circle b - y-coordinate of the circle c - width and height Coordinate system of p5.js Our current sketch with grid lines every 10 pixels To draw a circle with a diameter of 200 in the center our screen we would write: function draw(){ background(127); circle(200,200,100); } Our circle Our circle on a coordinate grid Drawing Order The order that we write our code is important! The computer \"reads\" our code from the top to bottom, just like we do. The drawing order in p5 is the same. Each shape is drawn on top of the previous shape. Try adding a line of code to make a new circle in the center our our sketch with a diameter of 200 pixels. circle(200,200,200); Because our code now looks like this: function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } function draw(){ background(127); circle(200,200,100); circle(200,200,200); } We are first drawing our background, then drawing our smaller circle, and, finally, the larger circle on top. Our larger circle covering our smaller circle If we change the ordering of our circles: circle(400,400,200); circle(400,400,100); We'll see the smaller circle drawn on top of the larger one: rect() and square() Reference rect() draws a rectangle to our screen. Syntax: rect(a, b, c, d) Parameters a - x-coordinate b - y-coordinate c - width d - height For drawing a rectangle with equal sides, we can also use the square() function. Although for most of this course you might find it helpful to change the sides of your rectangle independently of one another. Syntax: square(a, b, c) Parameters a - x-coordinate b - y-coordinate c - width and height Try drawing a square at (200,200) with a size and width of 100. rect(400,400,100,100); What do you notice? Unlike circle() which places the circle's center at the given (x,y) parameter, rect() places the rectangle at its top left corner. We can think of this as similar to how you might draw out a rectangle on the desktop of your computer. rectMode() Reference We can modify how rectangles are drawn by using the function rectMode() . rectMode() can take in a few parameters, but we will focus on CENTER and CORNER rectMode(CORNER) is the default behavior with our rectangle being draw from the upper left corner. rectMode(CENTER) will draw our rectangle at the center of the given (x,y) coordinates. If we were to write: rect(200,200,100,100); rectMode(CENTER); We would notice that nothing happens. For rectMode() to work properly, we need to tell our computer to draw our rectangles in the center before drawing our rectangle. If we write: rectMode(CENTER); rect(200,200,100,100); We get this result: In essence, rectMode() will effect any rectangle after it is called. With this in mind, we can call rectMode() multiple times in a sketch to change the behavior of different rectangles. Let's try writing: rectMode(CENTER); rect(200,200,100,100); rectMode(CORNER); rect(200,200,100,100); We can see out first rectangle remain in the center, while our second is drawn from the corner. fill() Reference fill() is similar to rectMode() in that it changes the behavior of our shapes. fill() sets the color that shapes are filled with. Before moving onto color, fill() can also take in a gray value between 0 - 255. Syntax: fill(a) Parameters a - Gray value (0-255) Writing fill() before our most recent rectangle: rectMode(CORNER); fill(127); rect(200,200,100,100); It changes the color of our rectangle to gray. Drawing Exercise Navigate to File -> New For this exercise, create the below 400 by 400 pixel drawing using the code we have learned so far. Additionally, to get comfortable looking at p5's reference, to complete this exercise, you'll need to look into the following functions and figure out how to use them in your sketch. line() (Reference) - Draws lines to screen stroke() (Reference) - Sets line and border color noStroke() (Reference) - Turns off strokes strokeWeight() (Reference) - Changes the thickness of strokes Be sure to comment your code to keep track of what you are writing! Begin with: function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } function draw(){ background(200); } Color Josef & Anni Albers Foundation Anni Albers. Black White Yellow. 1926. Josef Albers. Homage to the Square: \"Ascending\". 1953. Recreation of Josef Albers' painting in p5 Code: function setup() { createCanvas(400, 400); } function draw() { background(247, 238, 220); noStroke(); rectMode(CENTER); // Squares fill(138, 200, 237); rect(200, 200, 390, 390); fill(196, 195, 194); rect(200, 220, 315, 315); fill(255, 250, 244); rect(200, 239, 235, 235); fill(254, 226, 21); rect(200, 259, 156.5, 156.5); } If we copy this sketch into p5, we notice our fill() looks quite different. Before we would write fill(127); and see our shapes turn gray. Now we can see the syntax is fill(a, b, c) . p5 by default represents colors in Red, Blue and Green values, or RGB for short. Syntax: fill(a,b,c) a - amount of red (0-255); b - amount of green (0-255); c - amount of blue (0-255); This is also true for our background() Syntax: background(a,b,c) a - amount of red (0-255); b - amount of green (0-255); c - amount of blue (0-255); Try changing some of the colors in the Albers' sketch to see the effects. With RGB, we \"mix\" red, green, and blue together to get different results. For example if we wanted to fill our shapes will yellow, we would write: //Yellow in RGB fill(255,255,0); A yellow circle Mixing RGB values leads to a variety of colors: //purple fill(255,0,255); //cyan fill(0,255,255); //white fill(255,255,255); //black fill(0,0,0); Color Exercise Using Google's Color Picker tool for reference, create and 400 x 400 image of three or more shapes that, next to each other, form a gradient. Choose a background color that compliments your gradient. Example: Three circles forming a color gradient Opacity Josef Albers' opacity illusion painting Recreation of Josef Albers' painting using opacity Code: function setup() { createCanvas(400, 600); } function draw() { background(134, 119, 90); noStroke(); rectMode(CENTER); fill(97, 88, 89); // Three rectangles behind rect(200, 300, 308, 102); rect(200, 450, 308, 102); rect(200, 150, 308, 102); // Main center rectangle fill(254, 255, 223); rect(200, 300, 207, 510); // Center rectangles with opacity fill(97, 88, 89, 230); rect(200, 450, 207, 102); fill(97, 88, 89, 180); rect(200, 300, 207, 102); fill(97, 88, 89, 100); rect(200, 150, 207, 102); } With our colors for our fill() , there is a hidden fourth parameter, alpha , commonly known as opacity! Syntax: fill(a, b, c, d) a - amount of red (whole number 0-255) b - amount of green (whole number 0-255) c - amount of blue (whole number 0-255) d - alpha (decimal number 0-255) Circle at full opacity Circle at half opacity Circle at a quarter opacity Notice how the background color blends with my shape's fill color Opacity Exercise Try creating an image similar to the one you created for the Color Exercise. Instead of using multiple colors, use one color and change the alpha parameter of the fill() function. Independent Exercise: Drawing in Color Due next at the start of next class session. Part 1: Turrell At either sunrise or sunset between now and our next class session attend the lighting program at James Turrell's Dividing the Light at Pomona College Skyspace . James Turell. Dividing the Light. 2007. Reflect on your experience between the relationship between the LED color lights, and the color of the sky. This work is a form of new media art! The lights that are part of exhibition had to be programmed to match with the time of day and to change colors as the sky changes. Exercise: Write a poetic set of instructions for James Turrell's Dividing the Light . How would you describe the colors? What is the progression of the piece? Be as specific as possible. Next class we'll be talking about how we can change values within our code while our program is running. Consider what values are changing with the lights to given different results. Part 2: Pusey Read the article about the work of Mavis Pusey posted to discord. Using p5.js, recreate the below portion of Pusey's painting Personate as an 400x400 sketch. To make this image, you'll need to look into the functions quad() (Reference) and triangle() (Reference) . As a hint you can drawing shapes beyond our 400 x 400 canvas! Mavis Pusey's Personante Mavis Pusey. Personante. 1990. Portion of painting to recreate in p5 Portion of painting with grid lines every 50 pixels Colors of painting with RGB values Submit Submit to Canvas: Share your p5 Edit link Text of your Dividing the Light instructions. Submit to Discord: Share your p5 Edit link Text of you Dividing the Light instructions.","title":"01 Processing"},{"location":"01_Processing/#p5js-shapes-and-color","text":"Get started by going to the p5.js editor website .","title":"p5.js, Shapes and Color"},{"location":"01_Processing/#about-p5js","text":"p5.js is an open source project. It a JavaScript library adaptation of the open source project Processing developed by Casey Raes and Ben Fry in 2001. p5.js is a development environment in which artists and designers can both produce software art and learn how to code. p5.js and Processing conceptually builds on the idea that artists make use of forms of \"programming\" and instructions. Agnes Martin. Untitled. 1999. Soll LeWitt. Wall Drawing #260. 1975. p5.js is a tool for making software. P5.js was first developed by Lauren Lee McCarthy in 2013.","title":"About p5.js"},{"location":"01_Processing/#artist-spotlight","text":"","title":"Artist Spotlight"},{"location":"01_Processing/#casey-raes","text":"American, b. 1972 Artist Website","title":"Casey Raes"},{"location":"01_Processing/#atomism","text":"Series, 2012-Present Casey Raes. Still Life (RGB A). 2016. Casey Raes. RGB-056-006-080-823-715. 2015. Casey Raes. RGB-056-006-080-823-715. 2015.","title":"Atomism"},{"location":"01_Processing/#lauren-lee-mccarthy","text":"American, b. 1987 Artist Website","title":"Lauren Lee McCarthy"},{"location":"01_Processing/#auto","text":"2025 Website Lauren Lee McCarthy. Auto. 2025","title":"Auto"},{"location":"01_Processing/#surrogate","text":"2021 Website Lauren Lee McCarthy. Surrogate. 2021","title":"Surrogate"},{"location":"01_Processing/#what-is-p5js","text":"We spent our first day drawing with our human understandable instructions. To write instructions for our computer to make artworks with our computer, we need to write our instructions in a language the computer understanding. To do that we are going to be writing instructions for our code in the language p5.js uses, JavaScript. Interface of p5 Editor","title":"What is p5.js?"},{"location":"01_Processing/#p5js-editor","text":"If you have done so already, head to the p5 Editor . The p5 editor allows us to write code for our browser in our browser! If you haven't done so already, you can sign up for an account and login. The interface of the p5 Editor is fairly simple: The area on the left is where we can write our instructions (also know as code ) for our artworks. The play button at the top allows us to run our code. The stop button stops our code. The top menus allow us to access various options related to the p5 editor.","title":"p5.js Editor"},{"location":"01_Processing/#customizing-your-p5-editor","text":"I reccomend using p5 in High Contrast mode. You can change to High Contrast mode by click on the gear icon and going to General Settings. You can also customize your Text Size for easier reading.","title":"Customizing your p5 editor"},{"location":"01_Processing/#saving-and-renaming","text":"You can save you sketch by pressing ctrl+s of navigating to file -> save. You can rename your sketch by click on your project name next to the pencil icon.","title":"Saving and Renaming"},{"location":"01_Processing/#drawing-with-code","text":"Code is written in particular \"languages.\" These languages are not as complicated as \"human\" languages, but each language is slightly different and expects you to write your code is specific ways.","title":"Drawing with Code"},{"location":"01_Processing/#createcanvas","text":"Reference createCanvas() is a function that sets the size of our sketch. The way to call a function, sometimes refereed to as a command, is the function name followed by open and closed parentheses. Functions are very similar to how you might have learned them in your math classes, such as f(x). A function takes in a value, x, and often times, returns a value, f(x). It is important to note that not all functions take in values, but we will take about that a bit later. createCanvas() , for example, takes in the parameters width and height . The reference for createCanvas() would look something like this: Syntax: size(a, b) Parameters a - width b - height Syntax is the word we use to describe the particular writing style of a programming language. Every programming language has a different syntax . The syntax for size is that it takes in and a and b parameter. a is equal to the width of our sketch and b is equal to our height. If we want our sketch to look be 400 pixels by 400 pixels we could write; function setup(){ //Set our sketch to 800 by 800 pixels createCanvas(400,400); } Notice the \"//\" on the first line. This marks a comment. A comment is meant for human programmers and is not \"read\" by our computer. Also notice the semi colon \";\" at the end of the second line. For our purposes now, we can think of the semi colon as a period, marking the end of our line of code.","title":"createCanvas()"},{"location":"01_Processing/#errors","text":"If I spell 'createCanvas()' incorrectly, my sketch won't run, and p5 will let me know I have an error. function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } Error message","title":"Errors"},{"location":"01_Processing/#background","text":"Reference background() is a function that sets the background for our sketch. background() can take in many different types of parameters including color values and images. For now we'll focus on setting a gray scale value. Syntax: background(a) Parameters a - Gray value (0-255) To draw a middle gray background on our sketch: function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } function draw(){ background(127); }","title":"background()"},{"location":"01_Processing/#setup-and-draw","text":"We'll get more into how setup() and draw() function in the next class. For now, we can think of setup() as where we set up our sketch by drawing our canvas, and draw() is where we can make our drawing. We want to make sure the our code is in between the { } of the function.","title":"setup() and draw()"},{"location":"01_Processing/#circle","text":"Reference circle() is a function that draws an circle to our canvas. Syntax: circle(a, b, c) Parameters a - x-coordinate of the circle b - y-coordinate of the circle c - width and height Coordinate system of p5.js Our current sketch with grid lines every 10 pixels To draw a circle with a diameter of 200 in the center our screen we would write: function draw(){ background(127); circle(200,200,100); } Our circle Our circle on a coordinate grid","title":"circle()"},{"location":"01_Processing/#drawing-order","text":"The order that we write our code is important! The computer \"reads\" our code from the top to bottom, just like we do. The drawing order in p5 is the same. Each shape is drawn on top of the previous shape. Try adding a line of code to make a new circle in the center our our sketch with a diameter of 200 pixels. circle(200,200,200); Because our code now looks like this: function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } function draw(){ background(127); circle(200,200,100); circle(200,200,200); } We are first drawing our background, then drawing our smaller circle, and, finally, the larger circle on top. Our larger circle covering our smaller circle If we change the ordering of our circles: circle(400,400,200); circle(400,400,100); We'll see the smaller circle drawn on top of the larger one:","title":"Drawing Order"},{"location":"01_Processing/#rect-and-square","text":"Reference rect() draws a rectangle to our screen. Syntax: rect(a, b, c, d) Parameters a - x-coordinate b - y-coordinate c - width d - height For drawing a rectangle with equal sides, we can also use the square() function. Although for most of this course you might find it helpful to change the sides of your rectangle independently of one another. Syntax: square(a, b, c) Parameters a - x-coordinate b - y-coordinate c - width and height Try drawing a square at (200,200) with a size and width of 100. rect(400,400,100,100); What do you notice? Unlike circle() which places the circle's center at the given (x,y) parameter, rect() places the rectangle at its top left corner. We can think of this as similar to how you might draw out a rectangle on the desktop of your computer.","title":"rect() and square()"},{"location":"01_Processing/#rectmode","text":"Reference We can modify how rectangles are drawn by using the function rectMode() . rectMode() can take in a few parameters, but we will focus on CENTER and CORNER rectMode(CORNER) is the default behavior with our rectangle being draw from the upper left corner. rectMode(CENTER) will draw our rectangle at the center of the given (x,y) coordinates. If we were to write: rect(200,200,100,100); rectMode(CENTER); We would notice that nothing happens. For rectMode() to work properly, we need to tell our computer to draw our rectangles in the center before drawing our rectangle. If we write: rectMode(CENTER); rect(200,200,100,100); We get this result: In essence, rectMode() will effect any rectangle after it is called. With this in mind, we can call rectMode() multiple times in a sketch to change the behavior of different rectangles. Let's try writing: rectMode(CENTER); rect(200,200,100,100); rectMode(CORNER); rect(200,200,100,100); We can see out first rectangle remain in the center, while our second is drawn from the corner.","title":"rectMode()"},{"location":"01_Processing/#fill","text":"Reference fill() is similar to rectMode() in that it changes the behavior of our shapes. fill() sets the color that shapes are filled with. Before moving onto color, fill() can also take in a gray value between 0 - 255. Syntax: fill(a) Parameters a - Gray value (0-255) Writing fill() before our most recent rectangle: rectMode(CORNER); fill(127); rect(200,200,100,100); It changes the color of our rectangle to gray.","title":"fill()"},{"location":"01_Processing/#drawing-exercise","text":"Navigate to File -> New For this exercise, create the below 400 by 400 pixel drawing using the code we have learned so far. Additionally, to get comfortable looking at p5's reference, to complete this exercise, you'll need to look into the following functions and figure out how to use them in your sketch. line() (Reference) - Draws lines to screen stroke() (Reference) - Sets line and border color noStroke() (Reference) - Turns off strokes strokeWeight() (Reference) - Changes the thickness of strokes Be sure to comment your code to keep track of what you are writing! Begin with: function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } function draw(){ background(200); }","title":"Drawing Exercise"},{"location":"01_Processing/#color","text":"Josef & Anni Albers Foundation Anni Albers. Black White Yellow. 1926. Josef Albers. Homage to the Square: \"Ascending\". 1953. Recreation of Josef Albers' painting in p5 Code: function setup() { createCanvas(400, 400); } function draw() { background(247, 238, 220); noStroke(); rectMode(CENTER); // Squares fill(138, 200, 237); rect(200, 200, 390, 390); fill(196, 195, 194); rect(200, 220, 315, 315); fill(255, 250, 244); rect(200, 239, 235, 235); fill(254, 226, 21); rect(200, 259, 156.5, 156.5); } If we copy this sketch into p5, we notice our fill() looks quite different. Before we would write fill(127); and see our shapes turn gray. Now we can see the syntax is fill(a, b, c) . p5 by default represents colors in Red, Blue and Green values, or RGB for short. Syntax: fill(a,b,c) a - amount of red (0-255); b - amount of green (0-255); c - amount of blue (0-255); This is also true for our background() Syntax: background(a,b,c) a - amount of red (0-255); b - amount of green (0-255); c - amount of blue (0-255); Try changing some of the colors in the Albers' sketch to see the effects. With RGB, we \"mix\" red, green, and blue together to get different results. For example if we wanted to fill our shapes will yellow, we would write: //Yellow in RGB fill(255,255,0); A yellow circle Mixing RGB values leads to a variety of colors: //purple fill(255,0,255); //cyan fill(0,255,255); //white fill(255,255,255); //black fill(0,0,0);","title":"Color"},{"location":"01_Processing/#color-exercise","text":"Using Google's Color Picker tool for reference, create and 400 x 400 image of three or more shapes that, next to each other, form a gradient. Choose a background color that compliments your gradient. Example: Three circles forming a color gradient","title":"Color Exercise"},{"location":"01_Processing/#opacity","text":"Josef Albers' opacity illusion painting Recreation of Josef Albers' painting using opacity Code: function setup() { createCanvas(400, 600); } function draw() { background(134, 119, 90); noStroke(); rectMode(CENTER); fill(97, 88, 89); // Three rectangles behind rect(200, 300, 308, 102); rect(200, 450, 308, 102); rect(200, 150, 308, 102); // Main center rectangle fill(254, 255, 223); rect(200, 300, 207, 510); // Center rectangles with opacity fill(97, 88, 89, 230); rect(200, 450, 207, 102); fill(97, 88, 89, 180); rect(200, 300, 207, 102); fill(97, 88, 89, 100); rect(200, 150, 207, 102); } With our colors for our fill() , there is a hidden fourth parameter, alpha , commonly known as opacity! Syntax: fill(a, b, c, d) a - amount of red (whole number 0-255) b - amount of green (whole number 0-255) c - amount of blue (whole number 0-255) d - alpha (decimal number 0-255) Circle at full opacity Circle at half opacity Circle at a quarter opacity Notice how the background color blends with my shape's fill color","title":"Opacity"},{"location":"01_Processing/#opacity-exercise","text":"Try creating an image similar to the one you created for the Color Exercise. Instead of using multiple colors, use one color and change the alpha parameter of the fill() function.","title":"Opacity Exercise"},{"location":"01_Processing/#independent-exercise-drawing-in-color","text":"Due next at the start of next class session.","title":"Independent Exercise: Drawing in Color"},{"location":"01_Processing/#part-1-turrell","text":"At either sunrise or sunset between now and our next class session attend the lighting program at James Turrell's Dividing the Light at Pomona College Skyspace . James Turell. Dividing the Light. 2007. Reflect on your experience between the relationship between the LED color lights, and the color of the sky. This work is a form of new media art! The lights that are part of exhibition had to be programmed to match with the time of day and to change colors as the sky changes. Exercise: Write a poetic set of instructions for James Turrell's Dividing the Light . How would you describe the colors? What is the progression of the piece? Be as specific as possible. Next class we'll be talking about how we can change values within our code while our program is running. Consider what values are changing with the lights to given different results.","title":"Part 1: Turrell"},{"location":"01_Processing/#part-2-pusey","text":"Read the article about the work of Mavis Pusey posted to discord. Using p5.js, recreate the below portion of Pusey's painting Personate as an 400x400 sketch. To make this image, you'll need to look into the functions quad() (Reference) and triangle() (Reference) . As a hint you can drawing shapes beyond our 400 x 400 canvas!","title":"Part 2: Pusey"},{"location":"01_Processing/#mavis-puseys-personante","text":"Mavis Pusey. Personante. 1990. Portion of painting to recreate in p5 Portion of painting with grid lines every 50 pixels Colors of painting with RGB values","title":"Mavis Pusey's Personante"},{"location":"01_Processing/#submit","text":"Submit to Canvas: Share your p5 Edit link Text of your Dividing the Light instructions. Submit to Discord: Share your p5 Edit link Text of you Dividing the Light instructions.","title":"Submit"},{"location":"02_variables/","text":"hljs.highlightAll(); // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); #sketch_01-container { width: 85%; max-width: 400px; margin: auto; } #sketch_01-container canvas { width: 85% !important; height: auto !important; display: block; } Variables RECAP: What we learned last class: What is p5.js? How to code essential shapes How to code colors How to code attributes PLAN: The flow of p5.js setup() and draw() How to write blocks of code mouseX and mouseY mousePressed() width and height Basic math in p5.js How to make our own variables How to use incrementation operators random() Independent exercise: Face Generator setup() and draw() setup() -> The starting conditions of our p5 sketch. draw() -> The continuous loop of our p5 sketch. Setup condition of a tennis match (Serena vs. Venus Williams, 2027) Draw condition of a tennis match (Serena vs. Venus Williams, 2027) Setup condition of a Pong Draw condition of a Pong Setup condition of p5 sketch Draw condition of p5 sketch (Click to restart) Code Block To get this logic of setting up our sketch with setup() then continually drawing our sketch with draw() , we need to learn how to add these functions to our code. To do that we need to examine the code blocks. In short, a code block is a section of code that is grouped together. Example: function setup(){ //some code //some more code //even more code } This code block above consists of a few elements: function - This designates our code block as a function. setup() - This is the name of our function. setup() is a special function that p5 already knows how to handle. { } - Open and closed curly brackets, these indicate where we will write our code. Body - this is just the code that we will be writing. NOTE : Unlike when we were drawing without setup() and draw() , the order of these functions doesn't matter. We could reverse their positions and setup() would still run first. However , the order inside our code blocks does matter. Code will be executed from the top line to the bottom. Drawing with Variables Let's start by going over all we did last class by using the following to draw a circle: createCanvas() background() noStroke() fill() circle() function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(200,200,80); } Result of the above code Looking more closely at draw() , we can see that even though draw is happening over and over again, its drawing the same thing! In order to make our sketch draw dynamically, we need to change the values of our sketch dynamically. We can do this with variables mouseX and mouseY To start we'll use some of p5's built-in variables. Reference mouseX is a variable that always stores our mouse's horizontal position. mouseY is a variable that always stores our mouse's vertical position. These values update as we move our mouse! As an experiment, let's replace our circle() x value with mouseX circle(mouseX,200,80); If we change the y value to mouseY , our circle will follow our mouse: circle(mouseX,mouseY,80); Let's see what happens if we move our background() to the top of our setup() and change the size of our circle to 10. Remember, this will cause background() to only run once. function setup(){ createCanvas(400,400); background(12,123,220); } function draw(){ noStroke(); fill(255,194,10); circle(mouseX,mouseY,10); } We made a painting program! Our sketch is not drawing our circle over and over again at our mouseX and mouseY position without redrawing the background. mousePressed() mousePressed() is a special function within p5 that is called every time we click our mouse. We can use this to clear our drawing to start on a fresh background. To use mousePressed() we need to make a new block of code. To clear our background when our mouse is pressed, we can add a new background() in our mousePressed() function. function setup(){ size(400,400); background(12,123,220); } function draw(){ noStroke(); fill(255,194,10); circle(mouseX,mouseY,10); } function mousePressed(){ background(12,123,220); } We made resetting painting program! As a note, mouseX and mouseY can replace any value in our sketch. If I move my background() from setup() to draw() and replace my circle diameter with mouseX . circle(200, 200, mouseX); Our mouseX variable now changes the size of our circle! The size of our circle controlled by the position of our mouse! In-class Exercise: Painting Program Spend some time using the sketch we wrote to create your own painting program! Try adjusting the opacity value in your fill() to get new results! width and height Some other built in p5 variables include width and height . These variables always store the width and height of my sketch. function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(width/2,height/2,80); } Arithmetic Operators + - Addition - - Subtraction * - Multiplication / - Division = - Equals What is a Variable? What is mouseX or width ? Variables are named storage location in our computer's memory where we can store values. mouseX and width are both named storage location where Processing is constantly updating their associated values. Simplified drawing of variables in memory Making our Own Variable Steps of a Variable Stating let Name of variable Initialize variable Types System Variables int - whole numbers float - decimal numbers ...and many more Processing Variables color - type for holding a color value ...and many more Ones we'll use later on String - words and sentences ...and many more Name We can name our variable anything, but it is good to use a name that allows us to keep track of what we want it to do. As an example, circleX to control the x position of our circle. Some rules to follow: Lower case letter to start Dog vs. dog No numbers as first character 1dog vs. dog1 No spaces black cat vs. blackCat use camelCase blackcat vs. blackCat Don\u2019t use reserved keywords or existing Processing variable names int vs. numberOfCats Initialize Give our variable an initial value to start with. We can do this within a block of code: float circleX; void setup(){ size(400,400); circleX = 40; } Or, when we declare our variable: float circleX = 40; function setup(){ createCanvas(400,400); } Variable Scope Variables have two levels of scope, global and local . We won't go into too much detail about this now, but in short: Global variables are declared at the top of our sketch. They can be used within any block of code. Local variables are declared within a function and can only be used within that function. Making our Circle Move After we declare the type and name of our variable and initialize its value, we should have this sketch: let circleX = 0; function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(200,200,80); } Then we need to replace our circle's X value with our new variable: circle(circleX,200,80); Lastly, we need a way to increase our variable over time. For this, we can use an incrementation operator. Incrementation Operators We need to increase our variable by a certain value, then assign that new value back to our variable. ourVariable = ourVariable+1 = ourVariable+=1 = ourVariable++ Subtraction - ourVariable-=2 Multiplication - ourVariable*=2 Division - ourVariable/=2 To move our circle, we can increment our variable circleX by 1 each time draw() is called. let circleX = 0; function setup(){ createCanvas(400, 400); } function draw(){ background(12, 123, 220); noStroke(); fill(255, 194, 10); circle(circleX, 200, 80); circleX += 1; } Our moving circle! We can change how fast the circle is moving by changing the value circleX is changing by. circleX += 20; random() Reference Syntax: random(high) returns a random value between 0 and high random(low,high) returns a random value between low and high Parameters low - (float) lower limit high - (float) upper limit This is the first function we\u2019ll be using that returns a value! Using Random We can use random() to give circleX a random value. float circleX = random(0,width); Or, by moving our background() and adding in some more variables, we can make many circles appear randomly on our screen. Variables: x y a r b g let x; let y; let a; let r; let g; let b; function setup(){ createCanvas(400, 400); background(12, 123, 220); } function draw(){ noStroke(); y = random(height); x = random(width); a = random(60,200); r = random(200,255); g = random(200,255); b = random(100); fill(r, g, b,a); circle(x, y,30); } Independent Exercise: Face Generator DUE: By beginning of next class Make a new Processing sketch and copy the example code below. Read this code and play around with it to figure out how it works - a large part of learning to program is by reading the code of others! let faceSize; let eyeSize; let eyeX; let eyeY; let mouthY; let mouthSizeX; let mouthSizeY; function setup() { createCanvas(400, 400); } function draw() { //face fill(147, 41, 214); circle(width/2, height/2, faceSize); //eyes fill(255); circle(width/2+eyeX, height/2-eyeY, eyeSize); circle(width/2-eyeX, height/2-eyeY, eyeSize); //pupils fill(0); circle(width/2+eyeX, height/2-eyeY, eyeSize*.5); circle(width/2-eyeX, height/2-eyeY, eyeSize*.5); //mouth fill(255, 0, 0); rectMode(CENTER); rect(width/2, height/2+mouthY, mouthSizeX, mouthSizeY); } function mousePressed() { noStroke(); background(random(100, 255), random(100, 255), random(60)); //face faceSize = random(width*.25, width*.75); //eyes eyeSize = faceSize * random(.1, .7); eyeX = random(faceSize/10, faceSize/2); eyeY = random(faceSize/10, faceSize/5); //mouth mouthY = random(faceSize/10, faceSize/2); mouthSizeX = faceSize*random(.1, .8); mouthSizeY = mouthSizeX*random(.1, .2); } Use this code to make your own custom face generator! Maybe you add a nose, or hair! Or maybe you start from scratch and try to make your own custom generator. This is only an exercise, so play around and see what you can come up with! The only requirement of this exercise is that you add one more shape that has its size, position, or color, controlled by variables. See if you can see the relationships between the different shapes to add your own features. Submit In the class Discord, share 3 (or more) of your favorite faces your generator made. You can capture the images using screenshots or the save() function in Processing. Upload Link Upload: A zipped folder containing your Processing sketch as well as the three of your favorite images from the generator. Your Zipped folder should be named using the following format: Firstname_LastName_FaceGenerator If you make a mistake and need to upload another folder, append the zipped file name with a numerical value: i.e. Firstname_LastName_FaceGenerator_02 How to Zip a folder: Windows MacOS","title":"02 variables"},{"location":"02_variables/#variables","text":"RECAP: What we learned last class: What is p5.js? How to code essential shapes How to code colors How to code attributes PLAN: The flow of p5.js setup() and draw() How to write blocks of code mouseX and mouseY mousePressed() width and height Basic math in p5.js How to make our own variables How to use incrementation operators random() Independent exercise: Face Generator","title":"Variables"},{"location":"02_variables/#setup-and-draw","text":"setup() -> The starting conditions of our p5 sketch. draw() -> The continuous loop of our p5 sketch. Setup condition of a tennis match (Serena vs. Venus Williams, 2027) Draw condition of a tennis match (Serena vs. Venus Williams, 2027) Setup condition of a Pong Draw condition of a Pong Setup condition of p5 sketch Draw condition of p5 sketch (Click to restart)","title":"setup() and draw()"},{"location":"02_variables/#code-block","text":"To get this logic of setting up our sketch with setup() then continually drawing our sketch with draw() , we need to learn how to add these functions to our code. To do that we need to examine the code blocks. In short, a code block is a section of code that is grouped together. Example: function setup(){ //some code //some more code //even more code } This code block above consists of a few elements: function - This designates our code block as a function. setup() - This is the name of our function. setup() is a special function that p5 already knows how to handle. { } - Open and closed curly brackets, these indicate where we will write our code. Body - this is just the code that we will be writing. NOTE : Unlike when we were drawing without setup() and draw() , the order of these functions doesn't matter. We could reverse their positions and setup() would still run first. However , the order inside our code blocks does matter. Code will be executed from the top line to the bottom.","title":"Code Block"},{"location":"02_variables/#drawing-with-variables","text":"Let's start by going over all we did last class by using the following to draw a circle: createCanvas() background() noStroke() fill() circle() function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(200,200,80); } Result of the above code Looking more closely at draw() , we can see that even though draw is happening over and over again, its drawing the same thing! In order to make our sketch draw dynamically, we need to change the values of our sketch dynamically. We can do this with variables","title":"Drawing with Variables"},{"location":"02_variables/#mousex-and-mousey","text":"To start we'll use some of p5's built-in variables. Reference mouseX is a variable that always stores our mouse's horizontal position. mouseY is a variable that always stores our mouse's vertical position. These values update as we move our mouse! As an experiment, let's replace our circle() x value with mouseX circle(mouseX,200,80); If we change the y value to mouseY , our circle will follow our mouse: circle(mouseX,mouseY,80); Let's see what happens if we move our background() to the top of our setup() and change the size of our circle to 10. Remember, this will cause background() to only run once. function setup(){ createCanvas(400,400); background(12,123,220); } function draw(){ noStroke(); fill(255,194,10); circle(mouseX,mouseY,10); } We made a painting program! Our sketch is not drawing our circle over and over again at our mouseX and mouseY position without redrawing the background.","title":"mouseX and mouseY"},{"location":"02_variables/#mousepressed","text":"mousePressed() is a special function within p5 that is called every time we click our mouse. We can use this to clear our drawing to start on a fresh background. To use mousePressed() we need to make a new block of code. To clear our background when our mouse is pressed, we can add a new background() in our mousePressed() function. function setup(){ size(400,400); background(12,123,220); } function draw(){ noStroke(); fill(255,194,10); circle(mouseX,mouseY,10); } function mousePressed(){ background(12,123,220); } We made resetting painting program! As a note, mouseX and mouseY can replace any value in our sketch. If I move my background() from setup() to draw() and replace my circle diameter with mouseX . circle(200, 200, mouseX); Our mouseX variable now changes the size of our circle! The size of our circle controlled by the position of our mouse!","title":"mousePressed()"},{"location":"02_variables/#in-class-exercise-painting-program","text":"Spend some time using the sketch we wrote to create your own painting program! Try adjusting the opacity value in your fill() to get new results!","title":"In-class Exercise: Painting Program"},{"location":"02_variables/#width-and-height","text":"Some other built in p5 variables include width and height . These variables always store the width and height of my sketch. function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(width/2,height/2,80); }","title":"width and height"},{"location":"02_variables/#arithmetic-operators","text":"+ - Addition - - Subtraction * - Multiplication / - Division = - Equals","title":"Arithmetic Operators"},{"location":"02_variables/#what-is-a-variable","text":"What is mouseX or width ? Variables are named storage location in our computer's memory where we can store values. mouseX and width are both named storage location where Processing is constantly updating their associated values. Simplified drawing of variables in memory","title":"What is a Variable?"},{"location":"02_variables/#making-our-own-variable","text":"","title":"Making our Own Variable"},{"location":"02_variables/#steps-of-a-variable","text":"Stating let Name of variable Initialize variable","title":"Steps of a Variable"},{"location":"02_variables/#types","text":"System Variables int - whole numbers float - decimal numbers ...and many more Processing Variables color - type for holding a color value ...and many more Ones we'll use later on String - words and sentences ...and many more","title":"Types"},{"location":"02_variables/#name","text":"We can name our variable anything, but it is good to use a name that allows us to keep track of what we want it to do. As an example, circleX to control the x position of our circle. Some rules to follow: Lower case letter to start Dog vs. dog No numbers as first character 1dog vs. dog1 No spaces black cat vs. blackCat use camelCase blackcat vs. blackCat Don\u2019t use reserved keywords or existing Processing variable names int vs. numberOfCats","title":"Name"},{"location":"02_variables/#initialize","text":"Give our variable an initial value to start with. We can do this within a block of code: float circleX; void setup(){ size(400,400); circleX = 40; } Or, when we declare our variable: float circleX = 40; function setup(){ createCanvas(400,400); }","title":"Initialize"},{"location":"02_variables/#variable-scope","text":"Variables have two levels of scope, global and local . We won't go into too much detail about this now, but in short: Global variables are declared at the top of our sketch. They can be used within any block of code. Local variables are declared within a function and can only be used within that function.","title":"Variable Scope"},{"location":"02_variables/#making-our-circle-move","text":"After we declare the type and name of our variable and initialize its value, we should have this sketch: let circleX = 0; function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(200,200,80); } Then we need to replace our circle's X value with our new variable: circle(circleX,200,80); Lastly, we need a way to increase our variable over time. For this, we can use an incrementation operator.","title":"Making our Circle Move"},{"location":"02_variables/#incrementation-operators","text":"We need to increase our variable by a certain value, then assign that new value back to our variable. ourVariable = ourVariable+1 = ourVariable+=1 = ourVariable++ Subtraction - ourVariable-=2 Multiplication - ourVariable*=2 Division - ourVariable/=2 To move our circle, we can increment our variable circleX by 1 each time draw() is called. let circleX = 0; function setup(){ createCanvas(400, 400); } function draw(){ background(12, 123, 220); noStroke(); fill(255, 194, 10); circle(circleX, 200, 80); circleX += 1; } Our moving circle! We can change how fast the circle is moving by changing the value circleX is changing by. circleX += 20;","title":"Incrementation Operators"},{"location":"02_variables/#random","text":"Reference Syntax: random(high) returns a random value between 0 and high random(low,high) returns a random value between low and high Parameters low - (float) lower limit high - (float) upper limit This is the first function we\u2019ll be using that returns a value!","title":"random()"},{"location":"02_variables/#using-random","text":"We can use random() to give circleX a random value. float circleX = random(0,width); Or, by moving our background() and adding in some more variables, we can make many circles appear randomly on our screen. Variables: x y a r b g let x; let y; let a; let r; let g; let b; function setup(){ createCanvas(400, 400); background(12, 123, 220); } function draw(){ noStroke(); y = random(height); x = random(width); a = random(60,200); r = random(200,255); g = random(200,255); b = random(100); fill(r, g, b,a); circle(x, y,30); }","title":"Using Random"},{"location":"02_variables/#independent-exercise-face-generator","text":"DUE: By beginning of next class Make a new Processing sketch and copy the example code below. Read this code and play around with it to figure out how it works - a large part of learning to program is by reading the code of others! let faceSize; let eyeSize; let eyeX; let eyeY; let mouthY; let mouthSizeX; let mouthSizeY; function setup() { createCanvas(400, 400); } function draw() { //face fill(147, 41, 214); circle(width/2, height/2, faceSize); //eyes fill(255); circle(width/2+eyeX, height/2-eyeY, eyeSize); circle(width/2-eyeX, height/2-eyeY, eyeSize); //pupils fill(0); circle(width/2+eyeX, height/2-eyeY, eyeSize*.5); circle(width/2-eyeX, height/2-eyeY, eyeSize*.5); //mouth fill(255, 0, 0); rectMode(CENTER); rect(width/2, height/2+mouthY, mouthSizeX, mouthSizeY); } function mousePressed() { noStroke(); background(random(100, 255), random(100, 255), random(60)); //face faceSize = random(width*.25, width*.75); //eyes eyeSize = faceSize * random(.1, .7); eyeX = random(faceSize/10, faceSize/2); eyeY = random(faceSize/10, faceSize/5); //mouth mouthY = random(faceSize/10, faceSize/2); mouthSizeX = faceSize*random(.1, .8); mouthSizeY = mouthSizeX*random(.1, .2); } Use this code to make your own custom face generator! Maybe you add a nose, or hair! Or maybe you start from scratch and try to make your own custom generator. This is only an exercise, so play around and see what you can come up with! The only requirement of this exercise is that you add one more shape that has its size, position, or color, controlled by variables. See if you can see the relationships between the different shapes to add your own features.","title":"Independent Exercise: Face Generator"},{"location":"02_variables/#submit","text":"In the class Discord, share 3 (or more) of your favorite faces your generator made. You can capture the images using screenshots or the save() function in Processing. Upload Link Upload: A zipped folder containing your Processing sketch as well as the three of your favorite images from the generator. Your Zipped folder should be named using the following format: Firstname_LastName_FaceGenerator If you make a mistake and need to upload another folder, append the zipped file name with a numerical value: i.e. Firstname_LastName_FaceGenerator_02 How to Zip a folder: Windows MacOS","title":"Submit"},{"location":"clock/","text":"clock time and map to show movement can map the variable introduce math concepts, like sin and cos","title":"Clock"},{"location":"game/","text":"","title":"Game"},{"location":"interactive/","text":"","title":"Interactive"},{"location":"performance/","text":"","title":"Performance"},{"location":"schedule/","text":"Schedule table { border: none !important; border-collapse: collapse !important; line-height: 2em !important; } tbody td{ border: .15em solid !important; } td:nth-child(1){ border: none !important; } tbody{ } td{ padding: .2em !important; } th{ border: none !important; } tbody tr:nth-child(4n+1), tbody tr:nth-child(4n+2) { background-color: #dee0e3 ; } tbody td:first-child { border-right: none; } #no-class{ background-color: pink; } body{ } } @media (min-width: 768px) { .col-md-9 { width: 100% !important; } .d-md-block { display: none !important; } #component-content{ margin-left:0 !important; } } // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); Please note that is this is a live schedule and is ever evolving as the course (/world) changes. Please check back frequently for due dates of assignments and course proceedings. This scedule contains links to all in-class lectures and tutorials as well as links to class assignments. Course Plan W Day Class Due 1 TUES 8/26 - Introduction(s) - Playing with Code(s) THUR 8/28 - Tutorial: Processing, Shape, and Color Due: - Install Processing 2 TUES 9/2 - Tutorial: Variables Due: - Drawing In Color THUR 9/4 - Tutorial: [Flow] Due: - Face Generator 3 TUES 9/9 - Tutorial: [Repeat] Due: THUR 9/11 - Tutorial: [Math && Time] Due: 4 TUES 9/16 - Discussion - Studio Time: Time Due: THUR 9/18 CRIT: Time Due: 5 TUES 9/23 - Tutorial: [Interactivity] Due: THUR 9/25 - Tutorial: [Text && Arrays] Project Due: 6 TUES 9/30 - Tutorial: [Image && Transform] Due: THUR 10/2 - Tutorial [Functions] Due: 7 TUES 10/7 - Studio Time: Interactive Due: THUR 10/9 - Discussion - Studio Time: Interactive Due: 8 TUES 10/14 No Class: Break Due: THUR 10/16 CRIT: Interactive Due: 9 TUES 10/21 - Tutorial: [Sound In && Sound Out] Due: THUR 10/23 - Tutorial: [Procedural Program Structure] Due: 10 TUES 10/28 - Discussion - Studio Time: Performance Due: THUR 10/30 - Studio Time: Performance Due: 11 TUES 11/4 CRIT: Performance Due: THUR 11/6 - Tutorial: [Classes && Objects] Due: 12 TUES 11/11 - Tutorial: [ArrayLists] Due: THUR 11/13 - Tutorial: [PVectors] Due: 13 TUES 11/18 - Tutorial: [Game Logic] Due: THUR 11/20 - Studio Time: Game Due: 14 TUES 11/25 - Studio Time: Game Due: THUR 11/27 No Class: Break Due: 15 TUES 12/2 CRIT: Game Due:","title":"Schedule"},{"location":"schedule/#schedule","text":"table { border: none !important; border-collapse: collapse !important; line-height: 2em !important; } tbody td{ border: .15em solid !important; } td:nth-child(1){ border: none !important; } tbody{ } td{ padding: .2em !important; } th{ border: none !important; } tbody tr:nth-child(4n+1), tbody tr:nth-child(4n+2) { background-color: #dee0e3 ; } tbody td:first-child { border-right: none; } #no-class{ background-color: pink; } body{ } } @media (min-width: 768px) { .col-md-9 { width: 100% !important; } .d-md-block { display: none !important; } #component-content{ margin-left:0 !important; } } // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); Please note that is this is a live schedule and is ever evolving as the course (/world) changes. Please check back frequently for due dates of assignments and course proceedings. This scedule contains links to all in-class lectures and tutorials as well as links to class assignments.","title":"Schedule"},{"location":"schedule/#course-plan","text":"W Day Class Due 1 TUES 8/26 - Introduction(s) - Playing with Code(s) THUR 8/28 - Tutorial: Processing, Shape, and Color Due: - Install Processing 2 TUES 9/2 - Tutorial: Variables Due: - Drawing In Color THUR 9/4 - Tutorial: [Flow] Due: - Face Generator 3 TUES 9/9 - Tutorial: [Repeat] Due: THUR 9/11 - Tutorial: [Math && Time] Due: 4 TUES 9/16 - Discussion - Studio Time: Time Due: THUR 9/18 CRIT: Time Due: 5 TUES 9/23 - Tutorial: [Interactivity] Due: THUR 9/25 - Tutorial: [Text && Arrays] Project Due: 6 TUES 9/30 - Tutorial: [Image && Transform] Due: THUR 10/2 - Tutorial [Functions] Due: 7 TUES 10/7 - Studio Time: Interactive Due: THUR 10/9 - Discussion - Studio Time: Interactive Due: 8 TUES 10/14 No Class: Break Due: THUR 10/16 CRIT: Interactive Due: 9 TUES 10/21 - Tutorial: [Sound In && Sound Out] Due: THUR 10/23 - Tutorial: [Procedural Program Structure] Due: 10 TUES 10/28 - Discussion - Studio Time: Performance Due: THUR 10/30 - Studio Time: Performance Due: 11 TUES 11/4 CRIT: Performance Due: THUR 11/6 - Tutorial: [Classes && Objects] Due: 12 TUES 11/11 - Tutorial: [ArrayLists] Due: THUR 11/13 - Tutorial: [PVectors] Due: 13 TUES 11/18 - Tutorial: [Game Logic] Due: THUR 11/20 - Studio Time: Game Due: 14 TUES 11/25 - Studio Time: Game Due: THUR 11/27 No Class: Break Due: 15 TUES 12/2 CRIT: Game Due:","title":"Course Plan"},{"location":"time/","text":"","title":"Time"}]}