{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hljs.highlightAll(); Syllabus void setup() { size(200,200,200); } Multiple Sketches with Instance Mode","title":"Syllabus"},{"location":"#syllabus","text":"void setup() { size(200,200,200); }","title":"Syllabus"},{"location":"#multiple-sketches-with-instance-mode","text":"","title":"Multiple Sketches with Instance Mode"},{"location":"01_Processing/","text":"hljs.highlightAll(); Processing, Shapes and Color Get started by openning up Processing on your computers. About Processing Procesing is an open source project by Casey Raes and Ben Fry . It is a development environment in which artists and designers can both produce software art and learn how to code. Processing conceptually builds on the idea that artists make use of forms of \"programming\" and instructions. Agnes Martin. Untitled. 1999. Soll LeWitt. Wall Drawing #260. 1975. Processing is a tool for making software. Processing's approach to software: Software is a unique medium with unique qualities Every programming language is a distinct material Sketching is necessary for the development of ideas Programming is not just for engineers \"Processing...repositions programming in a way that is accessible to people who are interested in programming but who may be intimidated by or uninterested in the type taught in computer science departments. The computer originated as a tool for fast calculations and has evolved into a medium for expression.\" -Casey Raes, Ben Fry - Processing: a programming handbook for visual designersand artists Processing started in 2001 and has grown into the Processing Foundation which includes a web interpretation of Processing called P5.js , created by Lauren Lee McCarthy . Still Life (RGB A), 2016, Casey Raes Auto, 2025, Lauren Lee McCarthy What is Processing? Interface of Processing Interface of Processing The interface of Processing is fairly simple: The large area in the center functions like a text editor where we can enter the instructions (also know as code ) for our artworks. The play button at the top allows us to run our code. The stop button stops our code. The top menus allow us to access various options related to the Processing editor. Customize your Processing Editor Navigate to Tools -> Theme Selector -> the select a theme. Selecting a Dark Mode theme Drawing with Code size() size() sets the size of our sketch. size() takes in the parameters width and height . size(width, height); if we want our sketch to look be 800 pixels by 800 pixels we could write; //Set our sketch to 800 by 800 pixels size(800,800); Notice the \"//\" on the first line. This marks a comment. A comment is meant for human programmers and is not \"read\" by our computer. Also notice the semi colon \";\" at the end of the second line. For our purposes now, we can think of the semi colon as a period, marking the end of our line of code. background() backgroud() sets the background for our sketch. Background can take in many different types of parameters including color values and images. For now we'll focus on setting a gray scale value. background(gray) - gray is a decimal number between 0 and 255 with black being 0 and 255 being white. To draw a middle gray background on our sketch: //Draw a middle gray background background(127); ellipse() Reference ellipse() draws an ellipse to our screen. ellipse(a, b, c, d) Parameters a - x-coordinate of the ellipse b - y-coordinate of the ellipse c - width of the ellipse by default d - height of the ellipse by default Coordinate system of Processing Our current sketch with grid lines every 20 pixels To draw a circle with a diameter of 200 in the center our screen we would write: ellipse(400,400,200,200); Our ellipse Our ellipse on a coordinate grid Drawing Order The order that we write our code is important! The computer \"reads\" our code from the top to bottom, just like we do. The drawing order in Processing is the same. Each shape is drawn on top of the previous shape. Try adding a line of code to make a new circle in the center our our sketch with a diameter of 400 pixels. ellipse(400,400,400,400); Because our code now looks like this: //Set our sketch to 800 by 800 pixels size(800,800); //Draw a middle gray background background(127); ellipse(400,400,200,200); ellipse(400,400,400,400); We are first drawing our background, then drawing our smaller ellipse, and, finally, the larger ellipse on top. Our larger ellipse covering our smaller ellipse If we change the ordering of our ellipses: ellipse(400,400,400,400); ellipse(400,400,200,200); We'll see the smaller ellipse drawn on top of the larger one: rect() Reference rect() draws a rectangle to our screen. rect(a, b, c, d) Parameters a - x-coordinate b - y-coordinate c - width d - height Try drawing a square at (400,400) with a size and width of 200. rect(400,400,200,200); What do you notice? Unlike ellipse() which places the ellipse's center at the given (x,y) parameter, rect() places the rectangle at its top left corner. We can think of this as simliar to how you might draw out a rectangle on the desktop of your computer. rectMode() Reference We can modify how rectangles our drawn by using the function rectMode() . rectMode() can take in a few parameters, but we will focus on CENTER and CORNER rectMode(CORNER) is the default behavior with our rectangle being draw from the upper left corner. rectMode(CENTER) will draw our retangle at the center of the given (x,y) coordinates. If we were to write: rect(400,400,200,200); rectMode(CENTER); We would notice that nothing happens. For rectMode() to work properly, we need to tell our computer to draw our rectangles in the center before drawing our rectangle. If we write: rectMode(CENTER); rect(400,400,200,200); We get this result: In essence, rectMode() will effect any rectangle after it is called. With this in mind, we can call rectMode() multiple times in a sketch to change the behavior of different rectangles. Let's try writing: rectMode(CENTER); rect(400,400,200,200); rectMode(CORNER); rect(400,400,200,200); We can see out first rectangle remain in the center, while our second is drawn from the corner. fill() fill() is simliar to rectMode() in that it changes the behavior of our shapes. fill() sets the color that shapes are filled with. Before moving onto color, fill() can also take in a gray value between 0 - 255. Writing fill() before our most recent rectangle: rectMode(CORNER); fill(127); rect(400,400,200,200); It changes the color of our rectangle to gray. Class Exercise - Shapes, Fills, and Strokes For this exercise, create the below 800 by 800 pixel drawing using the code we have learned so far. Additionally, to get comfortable looking at Processing's reference, to complete this exercise, you'll need to look into the following functions and figure out how to use them in your sketch. line() (Reference) - Draws lines to screen stroke() (Reference) - Sets line and border color noStroke() (Reference) - Turns off strokes strokeWeight() (Reference) - Changes the thinkness of strokes Be sure to comment your code to keep track of what you are writing! Begin with: size(800,800); background(200); Mavis Pusey, \u201cPersonante\u201d (1990), oil on canvas, 53 \u00bd \u00d7 75 inches (courtesy the Neil Lane-Jacobson Family Foundation) Quad tool hint, you can draw shapes beyond the bound of the canvas","title":"01 Processing"},{"location":"01_Processing/#processing-shapes-and-color","text":"Get started by openning up Processing on your computers.","title":"Processing, Shapes and Color"},{"location":"01_Processing/#about-processing","text":"Procesing is an open source project by Casey Raes and Ben Fry . It is a development environment in which artists and designers can both produce software art and learn how to code. Processing conceptually builds on the idea that artists make use of forms of \"programming\" and instructions. Agnes Martin. Untitled. 1999. Soll LeWitt. Wall Drawing #260. 1975. Processing is a tool for making software. Processing's approach to software: Software is a unique medium with unique qualities Every programming language is a distinct material Sketching is necessary for the development of ideas Programming is not just for engineers \"Processing...repositions programming in a way that is accessible to people who are interested in programming but who may be intimidated by or uninterested in the type taught in computer science departments. The computer originated as a tool for fast calculations and has evolved into a medium for expression.\" -Casey Raes, Ben Fry - Processing: a programming handbook for visual designersand artists Processing started in 2001 and has grown into the Processing Foundation which includes a web interpretation of Processing called P5.js , created by Lauren Lee McCarthy . Still Life (RGB A), 2016, Casey Raes Auto, 2025, Lauren Lee McCarthy","title":"About Processing"},{"location":"01_Processing/#what-is-processing","text":"Interface of Processing","title":"What is Processing?"},{"location":"01_Processing/#interface-of-processing","text":"The interface of Processing is fairly simple: The large area in the center functions like a text editor where we can enter the instructions (also know as code ) for our artworks. The play button at the top allows us to run our code. The stop button stops our code. The top menus allow us to access various options related to the Processing editor.","title":"Interface of Processing"},{"location":"01_Processing/#customize-your-processing-editor","text":"Navigate to Tools -> Theme Selector -> the select a theme. Selecting a Dark Mode theme","title":"Customize your Processing Editor"},{"location":"01_Processing/#drawing-with-code","text":"","title":"Drawing with Code"},{"location":"01_Processing/#size","text":"size() sets the size of our sketch. size() takes in the parameters width and height . size(width, height); if we want our sketch to look be 800 pixels by 800 pixels we could write; //Set our sketch to 800 by 800 pixels size(800,800); Notice the \"//\" on the first line. This marks a comment. A comment is meant for human programmers and is not \"read\" by our computer. Also notice the semi colon \";\" at the end of the second line. For our purposes now, we can think of the semi colon as a period, marking the end of our line of code.","title":"size()"},{"location":"01_Processing/#background","text":"backgroud() sets the background for our sketch. Background can take in many different types of parameters including color values and images. For now we'll focus on setting a gray scale value. background(gray) - gray is a decimal number between 0 and 255 with black being 0 and 255 being white. To draw a middle gray background on our sketch: //Draw a middle gray background background(127);","title":"background()"},{"location":"01_Processing/#ellipse","text":"Reference ellipse() draws an ellipse to our screen. ellipse(a, b, c, d) Parameters a - x-coordinate of the ellipse b - y-coordinate of the ellipse c - width of the ellipse by default d - height of the ellipse by default Coordinate system of Processing Our current sketch with grid lines every 20 pixels To draw a circle with a diameter of 200 in the center our screen we would write: ellipse(400,400,200,200); Our ellipse Our ellipse on a coordinate grid","title":"ellipse()"},{"location":"01_Processing/#drawing-order","text":"The order that we write our code is important! The computer \"reads\" our code from the top to bottom, just like we do. The drawing order in Processing is the same. Each shape is drawn on top of the previous shape. Try adding a line of code to make a new circle in the center our our sketch with a diameter of 400 pixels. ellipse(400,400,400,400); Because our code now looks like this: //Set our sketch to 800 by 800 pixels size(800,800); //Draw a middle gray background background(127); ellipse(400,400,200,200); ellipse(400,400,400,400); We are first drawing our background, then drawing our smaller ellipse, and, finally, the larger ellipse on top. Our larger ellipse covering our smaller ellipse If we change the ordering of our ellipses: ellipse(400,400,400,400); ellipse(400,400,200,200); We'll see the smaller ellipse drawn on top of the larger one:","title":"Drawing Order"},{"location":"01_Processing/#rect","text":"Reference rect() draws a rectangle to our screen. rect(a, b, c, d) Parameters a - x-coordinate b - y-coordinate c - width d - height Try drawing a square at (400,400) with a size and width of 200. rect(400,400,200,200); What do you notice? Unlike ellipse() which places the ellipse's center at the given (x,y) parameter, rect() places the rectangle at its top left corner. We can think of this as simliar to how you might draw out a rectangle on the desktop of your computer.","title":"rect()"},{"location":"01_Processing/#rectmode","text":"Reference We can modify how rectangles our drawn by using the function rectMode() . rectMode() can take in a few parameters, but we will focus on CENTER and CORNER rectMode(CORNER) is the default behavior with our rectangle being draw from the upper left corner. rectMode(CENTER) will draw our retangle at the center of the given (x,y) coordinates. If we were to write: rect(400,400,200,200); rectMode(CENTER); We would notice that nothing happens. For rectMode() to work properly, we need to tell our computer to draw our rectangles in the center before drawing our rectangle. If we write: rectMode(CENTER); rect(400,400,200,200); We get this result: In essence, rectMode() will effect any rectangle after it is called. With this in mind, we can call rectMode() multiple times in a sketch to change the behavior of different rectangles. Let's try writing: rectMode(CENTER); rect(400,400,200,200); rectMode(CORNER); rect(400,400,200,200); We can see out first rectangle remain in the center, while our second is drawn from the corner.","title":"rectMode()"},{"location":"01_Processing/#fill","text":"fill() is simliar to rectMode() in that it changes the behavior of our shapes. fill() sets the color that shapes are filled with. Before moving onto color, fill() can also take in a gray value between 0 - 255. Writing fill() before our most recent rectangle: rectMode(CORNER); fill(127); rect(400,400,200,200); It changes the color of our rectangle to gray.","title":"fill()"},{"location":"01_Processing/#class-exercise-shapes-fills-and-strokes","text":"For this exercise, create the below 800 by 800 pixel drawing using the code we have learned so far. Additionally, to get comfortable looking at Processing's reference, to complete this exercise, you'll need to look into the following functions and figure out how to use them in your sketch. line() (Reference) - Draws lines to screen stroke() (Reference) - Sets line and border color noStroke() (Reference) - Turns off strokes strokeWeight() (Reference) - Changes the thinkness of strokes Be sure to comment your code to keep track of what you are writing! Begin with: size(800,800); background(200); Mavis Pusey, \u201cPersonante\u201d (1990), oil on canvas, 53 \u00bd \u00d7 75 inches (courtesy the Neil Lane-Jacobson Family Foundation) Quad tool hint, you can draw shapes beyond the bound of the canvas","title":"Class Exercise - Shapes, Fills, and Strokes"},{"location":"schedule/","text":"`# Schedule @media (min-width: 768px) { .col-md-9 { width: 100% !important; } .d-md-block { display: none !important; } #component-content{ margin-left:0 !important; } } // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); Please note that is this is a live schedule and is ever evolving as the course (/world) changes. Please check back frequently for due dates of assignments and course proceedings. This scedule contains links to all in-class lectures and tutorials as well as links to class assignments. Typical weekly plan Tuesday Thursday Discussion - 50 min Software Tutorial - 1 H 30 M Review of Assignments - 20 M Software Tutorial - 2 H Course Plan Class Due 8/26 - Introduction(s) - Procedural Play 8/28 - Tutorial: Processing, Shape, and Color - Begin Merhutu Exercise Assignment Due: - Install Processing 9/2 9/4 9/9 9/11 9/16 9/18 9/23 9/25 9/30 10/2 10/7 10/9 10/14 10/16 10/21 10/23 10/28 10/30 11/4 11/6 11/11 11/13 11/18 11/20 11/25 11/27 12/2 12/4","title":"Schedule"},{"location":"schedule/#typical-weekly-plan","text":"Tuesday Thursday Discussion - 50 min Software Tutorial - 1 H 30 M Review of Assignments - 20 M Software Tutorial - 2 H","title":"Typical weekly plan"},{"location":"schedule/#course-plan","text":"Class Due 8/26 - Introduction(s) - Procedural Play 8/28 - Tutorial: Processing, Shape, and Color - Begin Merhutu Exercise Assignment Due: - Install Processing 9/2 9/4 9/9 9/11 9/16 9/18 9/23 9/25 9/30 10/2 10/7 10/9 10/14 10/16 10/21 10/23 10/28 10/30 11/4 11/6 11/11 11/13 11/18 11/20 11/25 11/27 12/2 12/4","title":"Course Plan"}]}