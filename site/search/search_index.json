{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Syllabus SEMESTER: Fall 2025 LOCATION: Scripps College, Steele 229 TIME: Tuesday and Thursday 4:15-6:45, 8/25-12/3 Weekly class hours: 5 Hours External study hours: 9 Hours INSTRUCTOR Vinny Roca, Scripps College Email: vroca@scrippscollege.edu Office Hours: Lang 227. By appointment; Tuesday & Thursday 1:30-2:30 Schedule office hours Course Description This interdisciplinary introductory course explores technical, artistic, and cultural aspects of programming. Using accessible and inclusive programming environments, students will learn the fundamentals of programming through making visual, interactive, and sound-based projects. Through readings and weekly discussions, students will engage with the political, economic, and cultural impact of code with a particular interest in code as an artistic medium and the power relations in programming. Learning Outcomes The objective of this course is to introduce the fundamental skills of programming for the arts and contextualize this technical knowledge within the cultural, social, economic, and political impact of programming. Through reading responses, projects, discussions, and technical tutorials, students will achieve the following learning outcomes: Technical proficiency in the fundamentals of object-oriented and procedural programming. Ability to analyze the role of programming in media art. Ability to analyze programming as a cultural, historical, and technical object. Gain a critical understanding of the history and cultural impact of programming. Ability to create visual, interactive, and sound-based media art projects using programming. Grading, Assignments, Course Policy Course Breakdown % 10 Time 15 Narrative 15 Performance 20 Game Ring 10 Participation 20 Reading Responses 30 Exercises Evaluation Criteria Projects Completed projects will be graded using the following criteria: Technique Is the assignment well-crafted? Is the conceptual idea behind the assignment supported by the technical and artistic decisions made by the student? Concept Does the student comprehend the scope of the assignment? Is the student able to communicate their ideas clearly? Does the student demonstrate comprehension of the concepts covered in class? Is the student able to articulate the concepts behind their work? Generosity Does the student exhibit insight, criticality, and risk-taking in their work? How much sensitivity and critical insight does the student display towards personal assignments and in critiquing their peers\u2019 work? Exercises Exercises are mainly for student practice and experimentation. Exercises will be graded on their level of completion following the exercise prompt. Participation As this course includes in-person discussions, critiques, tutorials and exercises active participation and attendance make up 10 percent of students\u2019 final grade. All students are required to participate actively during the discussion periods, which will be facilitated using each student\u2019s reading responses. Students more than ten minutes late for class will be marked as late. Three late marks will result in an unexcused absence. More than two unexcused absences may, at the instructor\u2019s discretion, affect the final participation grade. All critique classes are mandatory. If you anticipate missing a critique class or expect to have more than two absences during the course, inform the instructor as soon as possible. Reading Responses Reading responses are due by 5 p.m. the day before discussions. Reading responses should be posted in the proper Discord channel. Reading responses will be graded on the level of engagement the student has with the text. Is the student connecting the text to other readings or experiences? Is the student engaging with the text through questions, disagreements, or new lines of thought? As reading responses are essential to the discussion section of the course, late reading responses will not be accepted. Late Work and Extensions For all exercises, late work will not be accepted. Completing exercises on time is essential to the progression of the course. Not completing exercises will result in a student falling behind. In the situation that extra time is needed to complete exercises, students must reach out to the instructor as soon as possible. Late projects not ready by their assigned crit day will automatically lose one letter grade. Each day the project is late, it will lose one more letter grade. After three days, the project will not be accepted. Class Website Class website will serve a a live syllabus, schedule, and notes for this course. All exercises and assignments are described on the class website. Discord and Email For this class, we will be sharing our exercises, reading responses and projects through Discord. Students will be invited to join the class Discord server on the first day of class. I will respond to Discord messages and email within 24 hrs of receipt. I will respond to messages sent over the weekend on the following Monday. Canvas Submissions Submissions for the class will be made through Canvas. Readings All external readings and videos will be provided using Box. Lab Hours && Course Materials Students are expected to work on exercises and assignments outside of class. To complete some assignments, students will need to make use of their personal computer. Students enrolled in this course will have 24/hr access to this computer lab. If you have any issues accessing the lab outside of the course hours, please contact me. Use of Generative AI ChatGPT and many other models, including Claude or CoPilot, can write code. As new programmers, this will be very helpful for you. However, it can also be detrimental. The goal of this course is to teach you the fundamentals of programming and to explore how these fundamentals have drastically changed how one might approach being an artist. ChatGPT or other models can allow us to skip over these fundamentals, moving us to an endless cycle of copy, paste, test, copy, paste, test, and so on\u2026 Coding, or the act of writing code, is always the last step. Before comes an intensive process of thinking, testing on paper, sketching, diagramming, or whatever approach you choose. Programming is not about writing code; it is about thinking and creating with our computers, knowing how changing variables or creating objects can give us both the results we aimed for, but also unexpected results. In this way, ChatGPT can be harmful to the beginner programmer. It removes the need for a fundamental understanding and replaces it with the illusion of knowledge. I strongly suggest that over this course, ChatGPT becomes a last resort. There are many other resources available to you: In-class help, Discord messages, your peers, office hours, p5 examples, online videos, and much more. If you find yourself moving to type in a prompt, I suggest first asking yourself, \u201cIs there more I can do to work towards this problem?\u201d Class Policy Any code found to be copied and pasted from ChatGPT will be considered plagiarism. Examples Some bad uses of prompt-based AI: Write a p5 sketch to do x. Make this p5 sketch look more interesting. Some good uses: How do I calculate points across the circumference of a circle? How do I find the distance between two vectors? How does a computer change the value of a variable in memory? What these examples above tend to demonstrate is that good uses of ChatGPT assist us in our learning process as we write our programs. There will be a temptation to make more complex projects with the use of ChatGPT. I urge you all to acknowledge your level of knowledge and abilities, and to trust that as you continue to make more art with code, as you write more and more complex programs, your knowledge of programming will grow, and so will your ability to know when ChatGPT and similar tools are supporting your learning. Scripps College Land Acknowledgement We would like to respectfully acknowledge that Scripps College sits within the historic homeland of the Tongva people. We acknowledge the painful history of genocide and colonization in our area. We acknowledge the strength and resilience of the Tongva people of the past, present, and future as the original caretakers of the land, water, and air, and we recognize our responsibility to be respectful stewards of the Scripps College campus. Today, this area and this campus are home to many Indigenous people from across the globe and we are proud that they are part of our community and institution. Statement on Inclusion We understand the classroom as a space for practicing freedom; where one may challenge psychic, social, and cultural borders and create meaningful artistic expressions. To do so we must acknowledge and embrace the different identities and backgrounds we inhabit. This means that we will use preferred pronouns, respect self-identifications, and be mindful of special needs. Disagreement is encouraged and supported, however, our differences affect our conceptualization and experience of reality, and it is extremely important to remember that certain gender, race, sex, and class identities are more privileged while others are undermined and marginalized. Consequently, this makes some people feel more protected or vulnerable during debates and discussions. A collaborative effort between the students and Instructor is needed to create a supportive learning environment. While everyone should feel free to experiment creatively and conceptually, if a class member points out that something you have said or shared with the group is offensive, avoid being defensive; instead approach the discussion as a valuable opportunity for us to grow and learn from one another. Alternatively, if you feel that something said in discussion or included in a piece of work is harmful, you are encouraged to speak with the Instructor. Statement adopted from voidLab at https://github.com/voidlab/diversity-statement. Accommodations The instructor will work individually with each student on reasonable accommodations. If you have questions about accommodations for the course, please do not hesitate to contact me. Campus Disability Coordinators Pomona Claremont Graduate University Scripps College Claremont McKenna College Harvey Mudd College Pitzer College Keck Graduate Institute Resources Class Resources p5.js Reference p5.js Coding Train Patt Vira JavaScript Documentation More advanced: The Nature of Code Further Reading: Aesthetic Programming 7C Student Resources Campus Safety Chaplains Chicano Latino Student Affairs (CLSA) Claremont Colleges Library The Claremont Colleges Services (TCCS) EmPOWER Center Health Education Outreach (HEO) Huntley Bookstore LiveSafe App Monsour Counseling and Psychological Services (MCAPS) Office of Black Student Affairs (OBSA) Student Disability Resource Center Student Health Insurance Plan Student Health Services Queer Resource Center (QRC)","title":"Syllabus"},{"location":"#syllabus","text":"SEMESTER: Fall 2025 LOCATION: Scripps College, Steele 229 TIME: Tuesday and Thursday 4:15-6:45, 8/25-12/3 Weekly class hours: 5 Hours External study hours: 9 Hours INSTRUCTOR Vinny Roca, Scripps College Email: vroca@scrippscollege.edu Office Hours: Lang 227. By appointment; Tuesday & Thursday 1:30-2:30 Schedule office hours","title":"Syllabus"},{"location":"#course-description","text":"This interdisciplinary introductory course explores technical, artistic, and cultural aspects of programming. Using accessible and inclusive programming environments, students will learn the fundamentals of programming through making visual, interactive, and sound-based projects. Through readings and weekly discussions, students will engage with the political, economic, and cultural impact of code with a particular interest in code as an artistic medium and the power relations in programming.","title":"Course Description"},{"location":"#learning-outcomes","text":"The objective of this course is to introduce the fundamental skills of programming for the arts and contextualize this technical knowledge within the cultural, social, economic, and political impact of programming. Through reading responses, projects, discussions, and technical tutorials, students will achieve the following learning outcomes: Technical proficiency in the fundamentals of object-oriented and procedural programming. Ability to analyze the role of programming in media art. Ability to analyze programming as a cultural, historical, and technical object. Gain a critical understanding of the history and cultural impact of programming. Ability to create visual, interactive, and sound-based media art projects using programming.","title":"Learning Outcomes"},{"location":"#grading-assignments-course-policy","text":"","title":"Grading, Assignments, Course Policy"},{"location":"#course-breakdown","text":"% 10 Time 15 Narrative 15 Performance 20 Game Ring 10 Participation 20 Reading Responses 30 Exercises","title":"Course Breakdown"},{"location":"#evaluation-criteria","text":"","title":"Evaluation Criteria"},{"location":"#projects","text":"Completed projects will be graded using the following criteria: Technique Is the assignment well-crafted? Is the conceptual idea behind the assignment supported by the technical and artistic decisions made by the student? Concept Does the student comprehend the scope of the assignment? Is the student able to communicate their ideas clearly? Does the student demonstrate comprehension of the concepts covered in class? Is the student able to articulate the concepts behind their work? Generosity Does the student exhibit insight, criticality, and risk-taking in their work? How much sensitivity and critical insight does the student display towards personal assignments and in critiquing their peers\u2019 work?","title":"Projects"},{"location":"#exercises","text":"Exercises are mainly for student practice and experimentation. Exercises will be graded on their level of completion following the exercise prompt.","title":"Exercises"},{"location":"#participation","text":"As this course includes in-person discussions, critiques, tutorials and exercises active participation and attendance make up 10 percent of students\u2019 final grade. All students are required to participate actively during the discussion periods, which will be facilitated using each student\u2019s reading responses. Students more than ten minutes late for class will be marked as late. Three late marks will result in an unexcused absence. More than two unexcused absences may, at the instructor\u2019s discretion, affect the final participation grade. All critique classes are mandatory. If you anticipate missing a critique class or expect to have more than two absences during the course, inform the instructor as soon as possible.","title":"Participation"},{"location":"#reading-responses","text":"Reading responses are due by 5 p.m. the day before discussions. Reading responses should be posted in the proper Discord channel. Reading responses will be graded on the level of engagement the student has with the text. Is the student connecting the text to other readings or experiences? Is the student engaging with the text through questions, disagreements, or new lines of thought? As reading responses are essential to the discussion section of the course, late reading responses will not be accepted.","title":"Reading Responses"},{"location":"#late-work-and-extensions","text":"For all exercises, late work will not be accepted. Completing exercises on time is essential to the progression of the course. Not completing exercises will result in a student falling behind. In the situation that extra time is needed to complete exercises, students must reach out to the instructor as soon as possible. Late projects not ready by their assigned crit day will automatically lose one letter grade. Each day the project is late, it will lose one more letter grade. After three days, the project will not be accepted.","title":"Late Work and Extensions"},{"location":"#class-website","text":"Class website will serve a a live syllabus, schedule, and notes for this course. All exercises and assignments are described on the class website.","title":"Class Website"},{"location":"#discord-and-email","text":"For this class, we will be sharing our exercises, reading responses and projects through Discord. Students will be invited to join the class Discord server on the first day of class. I will respond to Discord messages and email within 24 hrs of receipt. I will respond to messages sent over the weekend on the following Monday.","title":"Discord and Email"},{"location":"#canvas-submissions","text":"Submissions for the class will be made through Canvas.","title":"Canvas Submissions"},{"location":"#readings","text":"All external readings and videos will be provided using Box.","title":"Readings"},{"location":"#lab-hours-course-materials","text":"Students are expected to work on exercises and assignments outside of class. To complete some assignments, students will need to make use of their personal computer. Students enrolled in this course will have 24/hr access to this computer lab. If you have any issues accessing the lab outside of the course hours, please contact me.","title":"Lab Hours &amp;&amp; Course Materials"},{"location":"#use-of-generative-ai","text":"ChatGPT and many other models, including Claude or CoPilot, can write code. As new programmers, this will be very helpful for you. However, it can also be detrimental. The goal of this course is to teach you the fundamentals of programming and to explore how these fundamentals have drastically changed how one might approach being an artist. ChatGPT or other models can allow us to skip over these fundamentals, moving us to an endless cycle of copy, paste, test, copy, paste, test, and so on\u2026 Coding, or the act of writing code, is always the last step. Before comes an intensive process of thinking, testing on paper, sketching, diagramming, or whatever approach you choose. Programming is not about writing code; it is about thinking and creating with our computers, knowing how changing variables or creating objects can give us both the results we aimed for, but also unexpected results. In this way, ChatGPT can be harmful to the beginner programmer. It removes the need for a fundamental understanding and replaces it with the illusion of knowledge. I strongly suggest that over this course, ChatGPT becomes a last resort. There are many other resources available to you: In-class help, Discord messages, your peers, office hours, p5 examples, online videos, and much more. If you find yourself moving to type in a prompt, I suggest first asking yourself, \u201cIs there more I can do to work towards this problem?\u201d","title":"Use of Generative AI"},{"location":"#class-policy","text":"Any code found to be copied and pasted from ChatGPT will be considered plagiarism.","title":"Class Policy"},{"location":"#examples","text":"Some bad uses of prompt-based AI: Write a p5 sketch to do x. Make this p5 sketch look more interesting. Some good uses: How do I calculate points across the circumference of a circle? How do I find the distance between two vectors? How does a computer change the value of a variable in memory? What these examples above tend to demonstrate is that good uses of ChatGPT assist us in our learning process as we write our programs. There will be a temptation to make more complex projects with the use of ChatGPT. I urge you all to acknowledge your level of knowledge and abilities, and to trust that as you continue to make more art with code, as you write more and more complex programs, your knowledge of programming will grow, and so will your ability to know when ChatGPT and similar tools are supporting your learning.","title":"Examples"},{"location":"#scripps-college-land-acknowledgement","text":"We would like to respectfully acknowledge that Scripps College sits within the historic homeland of the Tongva people. We acknowledge the painful history of genocide and colonization in our area. We acknowledge the strength and resilience of the Tongva people of the past, present, and future as the original caretakers of the land, water, and air, and we recognize our responsibility to be respectful stewards of the Scripps College campus. Today, this area and this campus are home to many Indigenous people from across the globe and we are proud that they are part of our community and institution.","title":"Scripps College Land Acknowledgement"},{"location":"#statement-on-inclusion","text":"We understand the classroom as a space for practicing freedom; where one may challenge psychic, social, and cultural borders and create meaningful artistic expressions. To do so we must acknowledge and embrace the different identities and backgrounds we inhabit. This means that we will use preferred pronouns, respect self-identifications, and be mindful of special needs. Disagreement is encouraged and supported, however, our differences affect our conceptualization and experience of reality, and it is extremely important to remember that certain gender, race, sex, and class identities are more privileged while others are undermined and marginalized. Consequently, this makes some people feel more protected or vulnerable during debates and discussions. A collaborative effort between the students and Instructor is needed to create a supportive learning environment. While everyone should feel free to experiment creatively and conceptually, if a class member points out that something you have said or shared with the group is offensive, avoid being defensive; instead approach the discussion as a valuable opportunity for us to grow and learn from one another. Alternatively, if you feel that something said in discussion or included in a piece of work is harmful, you are encouraged to speak with the Instructor. Statement adopted from voidLab at https://github.com/voidlab/diversity-statement.","title":"Statement on Inclusion"},{"location":"#accommodations","text":"The instructor will work individually with each student on reasonable accommodations. If you have questions about accommodations for the course, please do not hesitate to contact me. Campus Disability Coordinators Pomona Claremont Graduate University Scripps College Claremont McKenna College Harvey Mudd College Pitzer College Keck Graduate Institute","title":"Accommodations"},{"location":"#resources","text":"","title":"Resources"},{"location":"#class-resources","text":"p5.js Reference p5.js Coding Train Patt Vira JavaScript Documentation More advanced: The Nature of Code Further Reading: Aesthetic Programming","title":"Class Resources"},{"location":"#7c-student-resources","text":"Campus Safety Chaplains Chicano Latino Student Affairs (CLSA) Claremont Colleges Library The Claremont Colleges Services (TCCS) EmPOWER Center Health Education Outreach (HEO) Huntley Bookstore LiveSafe App Monsour Counseling and Psychological Services (MCAPS) Office of Black Student Affairs (OBSA) Student Disability Resource Center Student Health Insurance Plan Student Health Services Queer Resource Center (QRC)","title":"7C Student Resources"},{"location":"00_procedural_experiments/","text":"Playing with Code(s) Code can be approached as a conceptual framework. We could also consider here substituting the word code for conditions or instructions. To make code is to make the conditions for something to be generated. In this class, we'll be considering code in a literal sense, as computer code. However, the history of code in art has been informed by a long relationship between instructions, art, and games. Rules as Code: Danish Clapping Game Play in pairs Instructions: Face your partner and clap your thighs at the same time. Choose an arm position randomly: Both arms up, both arms to the left, both arms to the right. If you choose the same position, clap hands and repeat from the top. If you choose different positions, repeat from the top. Code and Art Vera Molnar Vera Molnar. Lettres de ma M\u00e8re (\u201cLetter from my Mother\u201d). 1987. Courtesy of The Anne and Michael Spalter Digital Art Collection Loose Codes of Art Robert Barry Robert Barry. ART WORK. 1970. Yoko Ono Yoko Ono. Cut Piece. 1964. Yoko Ono. Grapefruit. 1964. Yoko Ono. DOLLAR PIECE. 1963. Instructions: DOLLAR PIECE Select an amount of dollar. Imagine all the things that you can buy with that amount.(a) Imagine all the things that you cannot buy with that amount.(b) Write it on a piece of paper. 1963 spring Strict Codes of Art Mel Bochner Mel Bochner. Measurement Room: No Vantage Point. 2019\u20132020. Sol LeWitt Sol LeWitt. Wall Drawing #118. 1971 Instructions: \u201cOn a wall surface, any continuous stretch of wall, using a hard pencil, place fifty points at random. The points should be evenly distributed over the area of the wall. All of the points should be connected by straight lines.\u201d Sol LeWitt: A Wall Drawing Retrospective - MASS MoCA Modified version of #118 for paper: On a pieces of paper, using a pencil, place twenty points evenly distributed over the area of one of the paper's sides. All of the points should be connected with straight lines. Game Codes: Dots & Boxes Instructions: Draw a three by three grid of dots Each player takes turns drawing a horizontal or vertical line that connects two dots The player who completes the fourth side of a 1\u00d71 box earns one point and takes another turn (mark initials in the box) The player with the most boxes at the end wins In-class exercise: Conditional Drawing Using Sol LeWitt as a starting point, design your own set of conditions that produce a drawing. In this exercise, try to be as percise as possible with your instructions, while still leaving room for generative variation. Make one drawing with your conditions, then refine your code . After some time, we'll exchange our conditions and see what drawings emerge. Independent Exercise: Sign up for p5.js We will be using p5.js for this class. To use p5.js you will need to make an account. Sign Up Independent Exercise: Pea Work Original: Due: end of the semester or anytime in between Yoko Ono. Pea Piece . 1960. PEA PIECE Carry a bag of peas. Leave a pea wherever you go. 1960 winter A modified version to complete for your exercise: Carry your bag of five beads. Leave a bead where it makes sense to do so. Share an image of a place you left a bead within the class Discord.","title":"Playing with Code(s)"},{"location":"00_procedural_experiments/#playing-with-codes","text":"Code can be approached as a conceptual framework. We could also consider here substituting the word code for conditions or instructions. To make code is to make the conditions for something to be generated. In this class, we'll be considering code in a literal sense, as computer code. However, the history of code in art has been informed by a long relationship between instructions, art, and games.","title":"Playing with Code(s)"},{"location":"00_procedural_experiments/#rules-as-code-danish-clapping-game","text":"Play in pairs Instructions: Face your partner and clap your thighs at the same time. Choose an arm position randomly: Both arms up, both arms to the left, both arms to the right. If you choose the same position, clap hands and repeat from the top. If you choose different positions, repeat from the top.","title":"Rules as Code: Danish Clapping Game"},{"location":"00_procedural_experiments/#code-and-art","text":"","title":"Code and Art"},{"location":"00_procedural_experiments/#vera-molnar","text":"Vera Molnar. Lettres de ma M\u00e8re (\u201cLetter from my Mother\u201d). 1987. Courtesy of The Anne and Michael Spalter Digital Art Collection","title":"Vera Molnar"},{"location":"00_procedural_experiments/#loose-codes-of-art","text":"","title":"Loose Codes of Art"},{"location":"00_procedural_experiments/#robert-barry","text":"Robert Barry. ART WORK. 1970.","title":"Robert Barry"},{"location":"00_procedural_experiments/#yoko-ono","text":"Yoko Ono. Cut Piece. 1964. Yoko Ono. Grapefruit. 1964. Yoko Ono. DOLLAR PIECE. 1963. Instructions: DOLLAR PIECE Select an amount of dollar. Imagine all the things that you can buy with that amount.(a) Imagine all the things that you cannot buy with that amount.(b) Write it on a piece of paper. 1963 spring","title":"Yoko Ono"},{"location":"00_procedural_experiments/#strict-codes-of-art","text":"","title":"Strict Codes of Art"},{"location":"00_procedural_experiments/#mel-bochner","text":"Mel Bochner. Measurement Room: No Vantage Point. 2019\u20132020.","title":"Mel Bochner"},{"location":"00_procedural_experiments/#sol-lewitt","text":"Sol LeWitt. Wall Drawing #118. 1971 Instructions: \u201cOn a wall surface, any continuous stretch of wall, using a hard pencil, place fifty points at random. The points should be evenly distributed over the area of the wall. All of the points should be connected by straight lines.\u201d Sol LeWitt: A Wall Drawing Retrospective - MASS MoCA Modified version of #118 for paper: On a pieces of paper, using a pencil, place twenty points evenly distributed over the area of one of the paper's sides. All of the points should be connected with straight lines.","title":"Sol LeWitt"},{"location":"00_procedural_experiments/#game-codes-dots-boxes","text":"Instructions: Draw a three by three grid of dots Each player takes turns drawing a horizontal or vertical line that connects two dots The player who completes the fourth side of a 1\u00d71 box earns one point and takes another turn (mark initials in the box) The player with the most boxes at the end wins","title":"Game Codes: Dots &amp; Boxes"},{"location":"00_procedural_experiments/#in-class-exercise-conditional-drawing","text":"Using Sol LeWitt as a starting point, design your own set of conditions that produce a drawing. In this exercise, try to be as percise as possible with your instructions, while still leaving room for generative variation. Make one drawing with your conditions, then refine your code . After some time, we'll exchange our conditions and see what drawings emerge.","title":"In-class exercise: Conditional Drawing"},{"location":"00_procedural_experiments/#independent-exercise-sign-up-for-p5js","text":"We will be using p5.js for this class. To use p5.js you will need to make an account. Sign Up","title":"Independent Exercise: Sign up for p5.js"},{"location":"00_procedural_experiments/#independent-exercise-pea-work","text":"Original: Due: end of the semester or anytime in between Yoko Ono. Pea Piece . 1960. PEA PIECE Carry a bag of peas. Leave a pea wherever you go. 1960 winter A modified version to complete for your exercise: Carry your bag of five beads. Leave a bead where it makes sense to do so. Share an image of a place you left a bead within the class Discord.","title":"Independent Exercise: Pea Work"},{"location":"01_Processing/","text":"hljs.highlightAll(); // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); p5.js, Shapes and Color Get started by going to the p5.js editor website . About p5.js p5.js is an open source project. It is a JavaScript library adaptation of the open source project Processing developed by Casey Reas and Ben Fry in 2001. p5.js is a development environment in which artists and designers can both produce software art and learn how to code. p5.js and Processing conceptually builds on the idea that artists make use of forms of \"programming\" and instructions. Agnes Martin. Untitled. 1999. Sol LeWitt. Wall Drawing #260. 1975. p5.js is a tool for making software. p5.js was first developed by Lauren Lee McCarthy in 2013. Artist Spotlight Casey Reas American, b. 1972 Artist Website Atomism Series, 2012-Present Casey Reas. Still Life (RGB A). 2016. Casey Reas. RGB-056-006-080-823-715. 2015. Casey Reas. RGB-056-006-080-823-715. 2015. Lauren Lee McCarthy American, b. 1987 Artist Website Auto 2025 Website Lauren Lee McCarthy. Auto. 2025 Surrogate 2021 Website Lauren Lee McCarthy. Surrogate. 2021 What is p5.js? We spent our first day drawing with our human-understandable instructions. To write instructions for our computer to make artworks with our computer, we need to write our instructions in a language the computer understands. To do that, we will write instructions in the language p5.js uses: JavaScript. Interface of p5 Editor p5.js Editor If you have done so already, head to the p5 Editor . The p5 editor allows us to write code for our browser in our browser! If you haven't done so already, you can sign up for an account and login. The interface of the p5 Editor is fairly simple: The area on the left is where we can write our instructions (also known as code ) for our artworks. The play button at the top allows us to run our code. The stop button stops our code. The top menus allow us to access various options related to the p5 editor. Customizing your p5 editor I recommend using p5 in High Contrast mode. You can change to High Contrast mode by clicking on the gear icon and going to General Settings. You can also customize your Text Size for easier reading. Saving and Renaming You can save your sketch by pressing ctrl+s of navigating to file -> save. You can rename your sketch by clicking on your project name next to the pencil icon. Drawing with Code Code is written in particular \"languages.\" These languages are not as complicated as \"human\" languages, but each language is slightly different and expects you to write your code in specific ways. createCanvas() Reference createCanvas() is a function that sets the size of our canvas. The way to call a function, sometimes referred to as a command, is the function name followed by open and closed parentheses. Functions are very similar to how you might have learned them in your math classes, such as f(x). A function takes in a value, x, and oftentimes, returns a value, f(x). It is important to note that not all functions take in values, but we will talk about that a bit later. createCanvas() , for example, takes in the parameters width and height . The reference for createCanvas() would look something like this: Syntax: createCanvas(a, b) Parameters a - width b - height Syntax is the word we use to describe the particular writing style of a programming language. Every programming language has a different syntax . The syntax for creatCanvas is that it takes in and a and b parameter. a is equal to the width of our sketch and b is equal to our height. If we want our sketch to be 400 pixels by 400 pixels we could write; function setup(){ //Set our sketch to 800 by 800 pixels createCanvas(400,400); } Notice the \"//\" on the first line. This marks a comment. A comment is meant for human programmers and is not \"read\" by our computer. Also notice the semi colon \";\" at the end of the second line. For our purposes now, we can think of the semi colon as a period, marking the end of our line of code. Errors If I spell 'createCanvas()' incorrectly, my sketch won't run, and p5 will let me know I have an error. function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } Error message background() Reference background() is a function that sets the background for our sketch. background() can take in many different types of parameters including color values and images. For now we'll focus on setting a grayscale value. Syntax: background(a) Parameters a - Gray value (0-255) To draw a middle gray background on our sketch: function setup(){ //Set our sketch to 400 by 400 pixels createCanvas(400,400); } function draw(){ background(127); } setup() and draw() We'll get more into how setup() and draw() function in the next class. For now, we can think of setup() as where we set up our sketch by drawing our canvas, and draw() is where we can make our drawing. We want to make sure that our code is in between the { } of the function. circle() Reference circle() is a function that draws a circle to our canvas. Syntax: circle(a, b, c) Parameters a - x-coordinate of the circle b - y-coordinate of the circle c - width and height Coordinate system of p5.js Our current sketch with grid lines every 10 pixels To draw a circle with a diameter of 200 in the center of our screen we would write: function draw(){ background(127); circle(200,200,100); } Our circle Our circle on a coordinate grid Drawing Order The order that we write our code is important! The computer \"reads\" our code from the top to bottom, just like we do. The drawing order in p5 is the same. Each shape is drawn on top of the previous shape. Try adding a line of code to make a new circle in the center of our our sketch with a diameter of 200 pixels. circle(200,200,200); Because our code now looks like this: function setup(){ //Set our sketch to 400 by 400 pixels createCanvas(400,400); } function draw(){ background(127); circle(200,200,100); circle(200,200,200); } We are first drawing our background, then drawing our smaller circle, and, finally, the larger circle on top. Our larger circle covering our smaller circle If we change the ordering of our circles: circle(400,400,200); circle(400,400,100); We'll see the smaller circle drawn on top of the larger one: rect() and square() Reference rect() draws a rectangle to our screen. Syntax: rect(a, b, c, d) Parameters a - x-coordinate b - y-coordinate c - width d - height For drawing a rectangle with equal sides, we can also use the square() function. Although for most of this course you might find it helpful to change the sides of your rectangle independently of one another. Syntax: square(a, b, c) Parameters a - x-coordinate b - y-coordinate c - width and height Try drawing a square at (200,200) with a size and width of 100. rect(400,400,100,100); What do you notice? Unlike circle() which places the circle's center at the given (x,y) parameter, rect() places the rectangle at its top left corner. We can think of this as similar to how you might draw out a rectangle on the desktop of your computer. rectMode() Reference We can modify how rectangles are drawn by using the function rectMode() . rectMode() can take in a few parameters, but we will focus on CENTER and CORNER rectMode(CORNER) is the default behavior with our rectangle being drawn from the upper left corner. rectMode(CENTER) will draw our rectangle at the center of the given (x,y) coordinates. If we were to write: rect(200,200,100,100); rectMode(CENTER); We would notice that nothing happens. For rectMode() to work properly, we need to tell our computer to draw our rectangles in the center before drawing our rectangle. If we write: rectMode(CENTER); rect(200,200,100,100); We get this result: In essence, rectMode() will affect any rectangle after it is called. With this in mind, we can call rectMode() multiple times in a sketch to change the behavior of different rectangles. Let's try writing: rectMode(CENTER); rect(200,200,100,100); rectMode(CORNER); rect(200,200,100,100); We can see our first rectangle remain in the center, while our second is drawn from the corner. fill() Reference fill() is similar to rectMode() in that it changes the behavior of our shapes. fill() sets the color that shapes are filled with. Before moving onto color, fill() can also take in a gray value between 0 - 255. Syntax: fill(a) Parameters a - Gray value (0-255) Writing fill() before our most recent rectangle: rectMode(CORNER); fill(127); rect(200,200,100,100); It changes the color of our rectangle to gray. Drawing Exercise Navigate to File -> New For this exercise, create the below 400 by 400 pixel drawing using the code we have learned so far. Additionally, to get comfortable looking at p5's reference, to complete this exercise, you'll need to look into the following functions and figure out how to use them in your sketch. line() (Reference) - Draws lines to screen stroke() (Reference) - Sets line and border color noStroke() (Reference) - Turns off strokes strokeWeight() (Reference) - Changes the thickness of strokes Be sure add comments to your code to keep track of what you are writing! Begin with: function setup(){ //Set our sketch to 400 by 400 pixels createCanvas(400,400); } function draw(){ background(200); } Color Josef & Anni Albers Foundation Anni Albers. Black White Yellow. 1926. Josef Albers. Homage to the Square: \"Ascending\". 1953. Recreation of Josef Albers' painting in p5 Code If we open this sketch into p5, we notice our fill() looks quite different. Before we would write fill(127); and see our shapes turn gray. Now we can see the syntax is fill(a, b, c) . p5 by default represents colors in Red, Green and Blue values, or RGB for short. Syntax: fill(a,b,c) a - amount of red (0-255); b - amount of green (0-255); c - amount of blue (0-255); This is also true for our background() Syntax: background(a,b,c) a - amount of red (0-255); b - amount of green (0-255); c - amount of blue (0-255); Try changing some of the colors in the Albers' sketch to see the effects. With RGB, we \"mix\" red, green, and blue together to get different results. For example if we wanted to fill our shapes with yellow, we would write: //Yellow in RGB fill(255,255,0); A yellow circle Mixing RGB values leads to a variety of colors: //purple fill(255,0,255); //cyan fill(0,255,255); //white fill(255,255,255); //black fill(0,0,0); Color Exercise Using Google's Color Picker tool for reference, create and 400 x 400 image of three or more shapes that, next to each other, form a gradient. Choose a background color that complements your gradient. Example: Three circles forming a color gradient Opacity Josef Albers' opacity illusion painting Recreation of Josef Albers' painting using opacity Code With our colors for our fill() , there is a hidden fourth parameter, alpha , commonly known as opacity! Syntax: fill(a, b, c, d) a - amount of red (whole number 0-255) b - amount of green (whole number 0-255) c - amount of blue (whole number 0-255) d - alpha (decimal number 0-255) Circle at full opacity Circle at half opacity Circle at quarter opacity Notice how the background color blends with my shape's fill color Opacity Exercise Try creating an image similar to the one you created for the Color Exercise. Instead of using multiple colors, use one color and change the alpha parameter of the fill() function. Sharing your Sketch To share your sketch from p5.js: Make sure you are logged in and your sketch is saved. Navigate to File -> Share You can copy your Fullscreen or Edit link to share with others! (We'll discuss Embed later). Independent Exercise: Drawing in Color Due next at the start of next class session. Part 1: Turrell At either sunrise or sunset between now and our next class session attend the lighting program at James Turrell's Dividing the Light at Pomona College Skyspace . James Turell. Dividing the Light. 2007. Reflect on your experience of the relationship between the LED color lights and the color of the sky. This work is a form of new media art! The lights that are part of the work had to be programmed to match with the time of day and to change colors as the sky changes. Exercise: Write a poetic set of instructions for James Turrell's Dividing the Light . How would you describe the colors? What is the progression of the piece? Be as specific as possible. Next class we'll be talking about how we can change values within our code while our program is running. Consider what values are changing with the lights to give different results. Part 2: Pusey Read the article about the work of Mavis Pusey posted to discord. Using p5.js, recreate the below portion of Pusey's painting Personante as a 400x400 sketch. To make this image, you'll need to look into the functions quad() (Reference) and triangle() (Reference) . As a hint you can draw shapes beyond our 400 x 400 canvas! Mavis Pusey's Personante Mavis Pusey. Personante. 1990. Portion of painting to recreate in p5 Portion of painting with grid lines every 50 pixels Colors of painting with RGB values Submit Submit to Canvas: Share your p5 Edit link Text of your Dividing the Light instructions. Submit to Discord: Share your p5 Edit link Text of your Dividing the Light instructions.","title":"01 Processing"},{"location":"01_Processing/#p5js-shapes-and-color","text":"Get started by going to the p5.js editor website .","title":"p5.js, Shapes and Color"},{"location":"01_Processing/#about-p5js","text":"p5.js is an open source project. It is a JavaScript library adaptation of the open source project Processing developed by Casey Reas and Ben Fry in 2001. p5.js is a development environment in which artists and designers can both produce software art and learn how to code. p5.js and Processing conceptually builds on the idea that artists make use of forms of \"programming\" and instructions. Agnes Martin. Untitled. 1999. Sol LeWitt. Wall Drawing #260. 1975. p5.js is a tool for making software. p5.js was first developed by Lauren Lee McCarthy in 2013.","title":"About p5.js"},{"location":"01_Processing/#artist-spotlight","text":"","title":"Artist Spotlight"},{"location":"01_Processing/#casey-reas","text":"American, b. 1972 Artist Website","title":"Casey Reas"},{"location":"01_Processing/#atomism","text":"Series, 2012-Present Casey Reas. Still Life (RGB A). 2016. Casey Reas. RGB-056-006-080-823-715. 2015. Casey Reas. RGB-056-006-080-823-715. 2015.","title":"Atomism"},{"location":"01_Processing/#lauren-lee-mccarthy","text":"American, b. 1987 Artist Website","title":"Lauren Lee McCarthy"},{"location":"01_Processing/#auto","text":"2025 Website Lauren Lee McCarthy. Auto. 2025","title":"Auto"},{"location":"01_Processing/#surrogate","text":"2021 Website Lauren Lee McCarthy. Surrogate. 2021","title":"Surrogate"},{"location":"01_Processing/#what-is-p5js","text":"We spent our first day drawing with our human-understandable instructions. To write instructions for our computer to make artworks with our computer, we need to write our instructions in a language the computer understands. To do that, we will write instructions in the language p5.js uses: JavaScript. Interface of p5 Editor","title":"What is p5.js?"},{"location":"01_Processing/#p5js-editor","text":"If you have done so already, head to the p5 Editor . The p5 editor allows us to write code for our browser in our browser! If you haven't done so already, you can sign up for an account and login. The interface of the p5 Editor is fairly simple: The area on the left is where we can write our instructions (also known as code ) for our artworks. The play button at the top allows us to run our code. The stop button stops our code. The top menus allow us to access various options related to the p5 editor.","title":"p5.js Editor"},{"location":"01_Processing/#customizing-your-p5-editor","text":"I recommend using p5 in High Contrast mode. You can change to High Contrast mode by clicking on the gear icon and going to General Settings. You can also customize your Text Size for easier reading.","title":"Customizing your p5 editor"},{"location":"01_Processing/#saving-and-renaming","text":"You can save your sketch by pressing ctrl+s of navigating to file -> save. You can rename your sketch by clicking on your project name next to the pencil icon.","title":"Saving and Renaming"},{"location":"01_Processing/#drawing-with-code","text":"Code is written in particular \"languages.\" These languages are not as complicated as \"human\" languages, but each language is slightly different and expects you to write your code in specific ways.","title":"Drawing with Code"},{"location":"01_Processing/#createcanvas","text":"Reference createCanvas() is a function that sets the size of our canvas. The way to call a function, sometimes referred to as a command, is the function name followed by open and closed parentheses. Functions are very similar to how you might have learned them in your math classes, such as f(x). A function takes in a value, x, and oftentimes, returns a value, f(x). It is important to note that not all functions take in values, but we will talk about that a bit later. createCanvas() , for example, takes in the parameters width and height . The reference for createCanvas() would look something like this: Syntax: createCanvas(a, b) Parameters a - width b - height Syntax is the word we use to describe the particular writing style of a programming language. Every programming language has a different syntax . The syntax for creatCanvas is that it takes in and a and b parameter. a is equal to the width of our sketch and b is equal to our height. If we want our sketch to be 400 pixels by 400 pixels we could write; function setup(){ //Set our sketch to 800 by 800 pixels createCanvas(400,400); } Notice the \"//\" on the first line. This marks a comment. A comment is meant for human programmers and is not \"read\" by our computer. Also notice the semi colon \";\" at the end of the second line. For our purposes now, we can think of the semi colon as a period, marking the end of our line of code.","title":"createCanvas()"},{"location":"01_Processing/#errors","text":"If I spell 'createCanvas()' incorrectly, my sketch won't run, and p5 will let me know I have an error. function setup(){ //Set our sketch to 400 by 400 pixels createCanva(400,400); } Error message","title":"Errors"},{"location":"01_Processing/#background","text":"Reference background() is a function that sets the background for our sketch. background() can take in many different types of parameters including color values and images. For now we'll focus on setting a grayscale value. Syntax: background(a) Parameters a - Gray value (0-255) To draw a middle gray background on our sketch: function setup(){ //Set our sketch to 400 by 400 pixels createCanvas(400,400); } function draw(){ background(127); }","title":"background()"},{"location":"01_Processing/#setup-and-draw","text":"We'll get more into how setup() and draw() function in the next class. For now, we can think of setup() as where we set up our sketch by drawing our canvas, and draw() is where we can make our drawing. We want to make sure that our code is in between the { } of the function.","title":"setup() and draw()"},{"location":"01_Processing/#circle","text":"Reference circle() is a function that draws a circle to our canvas. Syntax: circle(a, b, c) Parameters a - x-coordinate of the circle b - y-coordinate of the circle c - width and height Coordinate system of p5.js Our current sketch with grid lines every 10 pixels To draw a circle with a diameter of 200 in the center of our screen we would write: function draw(){ background(127); circle(200,200,100); } Our circle Our circle on a coordinate grid","title":"circle()"},{"location":"01_Processing/#drawing-order","text":"The order that we write our code is important! The computer \"reads\" our code from the top to bottom, just like we do. The drawing order in p5 is the same. Each shape is drawn on top of the previous shape. Try adding a line of code to make a new circle in the center of our our sketch with a diameter of 200 pixels. circle(200,200,200); Because our code now looks like this: function setup(){ //Set our sketch to 400 by 400 pixels createCanvas(400,400); } function draw(){ background(127); circle(200,200,100); circle(200,200,200); } We are first drawing our background, then drawing our smaller circle, and, finally, the larger circle on top. Our larger circle covering our smaller circle If we change the ordering of our circles: circle(400,400,200); circle(400,400,100); We'll see the smaller circle drawn on top of the larger one:","title":"Drawing Order"},{"location":"01_Processing/#rect-and-square","text":"Reference rect() draws a rectangle to our screen. Syntax: rect(a, b, c, d) Parameters a - x-coordinate b - y-coordinate c - width d - height For drawing a rectangle with equal sides, we can also use the square() function. Although for most of this course you might find it helpful to change the sides of your rectangle independently of one another. Syntax: square(a, b, c) Parameters a - x-coordinate b - y-coordinate c - width and height Try drawing a square at (200,200) with a size and width of 100. rect(400,400,100,100); What do you notice? Unlike circle() which places the circle's center at the given (x,y) parameter, rect() places the rectangle at its top left corner. We can think of this as similar to how you might draw out a rectangle on the desktop of your computer.","title":"rect() and square()"},{"location":"01_Processing/#rectmode","text":"Reference We can modify how rectangles are drawn by using the function rectMode() . rectMode() can take in a few parameters, but we will focus on CENTER and CORNER rectMode(CORNER) is the default behavior with our rectangle being drawn from the upper left corner. rectMode(CENTER) will draw our rectangle at the center of the given (x,y) coordinates. If we were to write: rect(200,200,100,100); rectMode(CENTER); We would notice that nothing happens. For rectMode() to work properly, we need to tell our computer to draw our rectangles in the center before drawing our rectangle. If we write: rectMode(CENTER); rect(200,200,100,100); We get this result: In essence, rectMode() will affect any rectangle after it is called. With this in mind, we can call rectMode() multiple times in a sketch to change the behavior of different rectangles. Let's try writing: rectMode(CENTER); rect(200,200,100,100); rectMode(CORNER); rect(200,200,100,100); We can see our first rectangle remain in the center, while our second is drawn from the corner.","title":"rectMode()"},{"location":"01_Processing/#fill","text":"Reference fill() is similar to rectMode() in that it changes the behavior of our shapes. fill() sets the color that shapes are filled with. Before moving onto color, fill() can also take in a gray value between 0 - 255. Syntax: fill(a) Parameters a - Gray value (0-255) Writing fill() before our most recent rectangle: rectMode(CORNER); fill(127); rect(200,200,100,100); It changes the color of our rectangle to gray.","title":"fill()"},{"location":"01_Processing/#drawing-exercise","text":"Navigate to File -> New For this exercise, create the below 400 by 400 pixel drawing using the code we have learned so far. Additionally, to get comfortable looking at p5's reference, to complete this exercise, you'll need to look into the following functions and figure out how to use them in your sketch. line() (Reference) - Draws lines to screen stroke() (Reference) - Sets line and border color noStroke() (Reference) - Turns off strokes strokeWeight() (Reference) - Changes the thickness of strokes Be sure add comments to your code to keep track of what you are writing! Begin with: function setup(){ //Set our sketch to 400 by 400 pixels createCanvas(400,400); } function draw(){ background(200); }","title":"Drawing Exercise"},{"location":"01_Processing/#color","text":"Josef & Anni Albers Foundation Anni Albers. Black White Yellow. 1926. Josef Albers. Homage to the Square: \"Ascending\". 1953. Recreation of Josef Albers' painting in p5 Code If we open this sketch into p5, we notice our fill() looks quite different. Before we would write fill(127); and see our shapes turn gray. Now we can see the syntax is fill(a, b, c) . p5 by default represents colors in Red, Green and Blue values, or RGB for short. Syntax: fill(a,b,c) a - amount of red (0-255); b - amount of green (0-255); c - amount of blue (0-255); This is also true for our background() Syntax: background(a,b,c) a - amount of red (0-255); b - amount of green (0-255); c - amount of blue (0-255); Try changing some of the colors in the Albers' sketch to see the effects. With RGB, we \"mix\" red, green, and blue together to get different results. For example if we wanted to fill our shapes with yellow, we would write: //Yellow in RGB fill(255,255,0); A yellow circle Mixing RGB values leads to a variety of colors: //purple fill(255,0,255); //cyan fill(0,255,255); //white fill(255,255,255); //black fill(0,0,0);","title":"Color"},{"location":"01_Processing/#color-exercise","text":"Using Google's Color Picker tool for reference, create and 400 x 400 image of three or more shapes that, next to each other, form a gradient. Choose a background color that complements your gradient. Example: Three circles forming a color gradient","title":"Color Exercise"},{"location":"01_Processing/#opacity","text":"Josef Albers' opacity illusion painting Recreation of Josef Albers' painting using opacity Code With our colors for our fill() , there is a hidden fourth parameter, alpha , commonly known as opacity! Syntax: fill(a, b, c, d) a - amount of red (whole number 0-255) b - amount of green (whole number 0-255) c - amount of blue (whole number 0-255) d - alpha (decimal number 0-255) Circle at full opacity Circle at half opacity Circle at quarter opacity Notice how the background color blends with my shape's fill color","title":"Opacity"},{"location":"01_Processing/#opacity-exercise","text":"Try creating an image similar to the one you created for the Color Exercise. Instead of using multiple colors, use one color and change the alpha parameter of the fill() function.","title":"Opacity Exercise"},{"location":"01_Processing/#sharing-your-sketch","text":"To share your sketch from p5.js: Make sure you are logged in and your sketch is saved. Navigate to File -> Share You can copy your Fullscreen or Edit link to share with others! (We'll discuss Embed later).","title":"Sharing your Sketch"},{"location":"01_Processing/#independent-exercise-drawing-in-color","text":"Due next at the start of next class session.","title":"Independent Exercise: Drawing in Color"},{"location":"01_Processing/#part-1-turrell","text":"At either sunrise or sunset between now and our next class session attend the lighting program at James Turrell's Dividing the Light at Pomona College Skyspace . James Turell. Dividing the Light. 2007. Reflect on your experience of the relationship between the LED color lights and the color of the sky. This work is a form of new media art! The lights that are part of the work had to be programmed to match with the time of day and to change colors as the sky changes. Exercise: Write a poetic set of instructions for James Turrell's Dividing the Light . How would you describe the colors? What is the progression of the piece? Be as specific as possible. Next class we'll be talking about how we can change values within our code while our program is running. Consider what values are changing with the lights to give different results.","title":"Part 1: Turrell"},{"location":"01_Processing/#part-2-pusey","text":"Read the article about the work of Mavis Pusey posted to discord. Using p5.js, recreate the below portion of Pusey's painting Personante as a 400x400 sketch. To make this image, you'll need to look into the functions quad() (Reference) and triangle() (Reference) . As a hint you can draw shapes beyond our 400 x 400 canvas!","title":"Part 2: Pusey"},{"location":"01_Processing/#mavis-puseys-personante","text":"Mavis Pusey. Personante. 1990. Portion of painting to recreate in p5 Portion of painting with grid lines every 50 pixels Colors of painting with RGB values","title":"Mavis Pusey's Personante"},{"location":"01_Processing/#submit","text":"Submit to Canvas: Share your p5 Edit link Text of your Dividing the Light instructions. Submit to Discord: Share your p5 Edit link Text of your Dividing the Light instructions.","title":"Submit"},{"location":"02_variables/","text":"hljs.highlightAll(); // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); #sketch_01-container { width: 85%; max-width: 400px; margin: auto; } #sketch_01-container canvas { width: 85% !important; height: auto !important; display: block; } Variables RECAP: What we learned last class: What is p5.js? How to code essential shapes How to code colors How to code attributes PLAN: The flow of p5.js setup() and draw() How to write blocks of code mouseX and mouseY mousePressed() width and height Basic math in p5.js How to make our own variables How to use incrementation operators random() Independent exercise: Face Generator setup() and draw() setup() -> The starting conditions of our p5 sketch. draw() -> The continuous loop of our p5 sketch. Setup condition of a tennis match (Serena vs. Venus Williams, 2027) Draw condition of a tennis match (Serena vs. Venus Williams, 2027) Setup condition of a Pong Draw condition of a Pong Setup condition of p5 sketch Draw condition of p5 sketch (Click to restart) Code Block To understand the logic of setting up our sketch with setup() then continually drawing our sketch with draw() , we need to learn about the syntax of these functions. To do that we need to examine the code blocks. In short, a code block is a section of code that is grouped together. Example: function setup(){ //some code //some more code //even more code } This code block above consists of a few elements: function - This designates our code block as a function. setup() - This is the name of our function. setup() is a special function that p5 already knows how to handle. { } - Open and closed curly brackets, these indicate where we will write our code. Body - this is just the code that we will be writing. NOTE : Unlike when we were drawing without setup() and draw() , the order of these functions doesn't matter. We could reverse their positions and setup() would still run first. However , the order inside our code blocks does matter. Code will be executed from the top line to the bottom. Drawing with Variables Let's start by going over all we did last class by using the following to draw a circle: createCanvas() background() noStroke() fill() circle() function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(200,200,80); } Result of the above code Looking more closely at draw() , we can see that even though draw is happening over and over again, it's drawing the same thing! In order to make our sketch draw dynamically, we need to change the values of our sketch dynamically. We can do this with variables mouseX and mouseY To start we'll use some of p5's built-in variables. Reference mouseX is a variable that always stores our mouse's horizontal position. mouseY is a variable that always stores our mouse's vertical position. These values update as we move our mouse! As an experiment, let's replace our circle() x value with mouseX circle(mouseX,200,80); If we change the y value to mouseY , our circle will follow our mouse: circle(mouseX,mouseY,80); Let's see what happens if we move our background() to the top of our setup() and change the size of our circle to 10. Remember, this will cause background() to only run once. function setup(){ createCanvas(400,400); background(12,123,220); } function draw(){ noStroke(); fill(255,194,10); circle(mouseX,mouseY,10); } We made a painting program! Our sketch is now drawing our circle over and over again at our mouseX and mouseY position without redrawing the background. mousePressed() mousePressed() is a special function within p5 that is called every time we click our mouse. We can use this to clear our drawing to start on a fresh background. To use mousePressed() we need to make a new block of code. To clear our background when our mouse is pressed, we can add a new background() in our mousePressed() function. function setup(){ size(400,400); background(12,123,220); } function draw(){ noStroke(); fill(255,194,10); circle(mouseX,mouseY,10); } function mousePressed(){ background(12,123,220); } We made resetting painting program! As a note, mouseX and mouseY can replace any value in our sketch. If I move my background() from setup() to draw() and replace my circle diameter with mouseX . circle(200, 200, mouseX); Our mouseX variable now changes the size of our circle! The size of our circle controlled by the position of our mouse! In-class Exercise: Painting Program Spend some time using the sketch we wrote to create your own painting program! Try adjusting the opacity value in your fill() to get new results! width and height Some other built in p5 variables include width and height . These variables always store the width and height of my sketch. function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(width/2,height/2,80); } Arithmetic Operators + - Addition - - Subtraction * - Multiplication / - Division = - Equals What is a Variable? What is mouseX or width ? Variables are named storage locations in our computer's memory where we can store values. mouseX and width are both named storage location where p5 is constantly updating their associated values. Simplified drawing of variables in memory Making our Own Variable Let's work towards this example: our circle moves across our canvas and we can click to reset it's position to the start. Click the canvas to reset our Circle! Steps to Making a Variable Stating let Name of variable Initialize variable let We can use the keyword let to begin declaring a variable. Example: let frog; let toad; let bird; In JavaScript, we don't need to tell our editor what type of variable we are making. In other words, we don't need to let JavaScript know if our variable is a Number, a word, or something else. In part, it is up to the artist to keep track of what type of variable we want each new variable to be. Some variable types: JavaScript variables: Number: both decimal and whole numbers String: words or sentences ...and many more Name We can name our variable anything, but it is good to use a name that allows us to keep track of what we want it to do. As an example, circleX to control the x position of our circle. Some rules to follow: Lower case letter to start Dog vs. dog No numbers as first character 1dog vs. dog1 No spaces black cat vs. blackCat use camelCase blackcat vs. blackCat Don\u2019t use reserved keywords or existing p5 variable names. Initialize Give our variable an initial value to start with. We can do this within a block of code: let circleX; function setup(){ createCanvas(400,400); circleX = 40; } Or, when we declare our variable: let circleX = 40; function setup(){ createCanvas(400,400); } Variable Scope Variables have two levels of scope, global and local . We won't go into too much detail about this now, but in short: Global variables are declared at the top of our sketch. They can be used within any block of code. Local variables are declared within a function and can only be used within that function. Making our Circle Move After we declare the type and name of our variable and initialize its value, we should have this sketch: let circleX = 0; function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(200,200,80); } Then we need to replace our circle's X value with our new variable: circle(circleX,200,80); Lastly, we need a way to increase our variable over time. For this, we can use an incrementation operator. Incrementation Operators We need to increase our variable by a certain value, then assign that new value back to our variable. ourVariable = ourVariable+1 = ourVariable+=1 = ourVariable++ Subtraction - ourVariable-=2 Multiplication - ourVariable*=2 Division - ourVariable/=2 To move our circle, we can increment our variable circleX by 1 each time draw() is called. let circleX = 0; function setup(){ createCanvas(400, 400); } function draw(){ background(12, 123, 220); noStroke(); fill(255, 194, 10); circle(circleX, 200, 80); circleX += 1; } This example is repeating. Some extra code was added to make this example for the website. We'll learn more about this next class. We can change how fast the circle is moving by changing incrementation value. circleX += 10; This example is repeating. Some extra code was added to make this example for the website. We'll learn more about this next class. random() Reference Syntax: random(max) returns a random value between 0 and max random(min,max) returns a random value between min and max Parameters min - (Number) lower limit max - (Number) upper limit This is the first function we\u2019ve used that returns a value! Using Random We can use random() to give circleX a random value when we press our mouse! function mousePressed() { circleX = random(0,width); } Or, by moving our background() and adding some more variables, we can make many circles appear randomly on our screen. Variables: x y a r b g let x; let y; let a; let r; let g; let b; function setup(){ createCanvas(400, 400); background(12, 123, 220); } function draw(){ noStroke(); y = random(height); x = random(width); a = random(60,200); r = random(200,255); g = random(200,255); b = random(100); fill(r, g, b,a); circle(x, y,10); } Independent Exercise: Face Generator DUE: By beginning of next class Click on the above sketch to make a random face! Open up the code template below and go to File -> Duplicate Read this code and play around with it to figure out how it works - a large part of learning to program is by reading the code of others! Code Template Use this code to make your own custom face generator! Maybe you add a nose, or hair! Or maybe you start from scratch and try to make your own custom generator. This is only an exercise, so play around and see what you can come up with! The only requirement of this exercise is that you add one more shapes that has its size, position, or color, controlled by a randomized variable. See if you can see the relationships between the different shapes to add your own features. Submit To Canvas: Your p5 edit link To Discord: Your p5 edit link Three of your favorite faces captured as screenshots.","title":"02 variables"},{"location":"02_variables/#variables","text":"RECAP: What we learned last class: What is p5.js? How to code essential shapes How to code colors How to code attributes PLAN: The flow of p5.js setup() and draw() How to write blocks of code mouseX and mouseY mousePressed() width and height Basic math in p5.js How to make our own variables How to use incrementation operators random() Independent exercise: Face Generator","title":"Variables"},{"location":"02_variables/#setup-and-draw","text":"setup() -> The starting conditions of our p5 sketch. draw() -> The continuous loop of our p5 sketch. Setup condition of a tennis match (Serena vs. Venus Williams, 2027) Draw condition of a tennis match (Serena vs. Venus Williams, 2027) Setup condition of a Pong Draw condition of a Pong Setup condition of p5 sketch Draw condition of p5 sketch (Click to restart)","title":"setup() and draw()"},{"location":"02_variables/#code-block","text":"To understand the logic of setting up our sketch with setup() then continually drawing our sketch with draw() , we need to learn about the syntax of these functions. To do that we need to examine the code blocks. In short, a code block is a section of code that is grouped together. Example: function setup(){ //some code //some more code //even more code } This code block above consists of a few elements: function - This designates our code block as a function. setup() - This is the name of our function. setup() is a special function that p5 already knows how to handle. { } - Open and closed curly brackets, these indicate where we will write our code. Body - this is just the code that we will be writing. NOTE : Unlike when we were drawing without setup() and draw() , the order of these functions doesn't matter. We could reverse their positions and setup() would still run first. However , the order inside our code blocks does matter. Code will be executed from the top line to the bottom.","title":"Code Block"},{"location":"02_variables/#drawing-with-variables","text":"Let's start by going over all we did last class by using the following to draw a circle: createCanvas() background() noStroke() fill() circle() function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(200,200,80); } Result of the above code Looking more closely at draw() , we can see that even though draw is happening over and over again, it's drawing the same thing! In order to make our sketch draw dynamically, we need to change the values of our sketch dynamically. We can do this with variables","title":"Drawing with Variables"},{"location":"02_variables/#mousex-and-mousey","text":"To start we'll use some of p5's built-in variables. Reference mouseX is a variable that always stores our mouse's horizontal position. mouseY is a variable that always stores our mouse's vertical position. These values update as we move our mouse! As an experiment, let's replace our circle() x value with mouseX circle(mouseX,200,80); If we change the y value to mouseY , our circle will follow our mouse: circle(mouseX,mouseY,80); Let's see what happens if we move our background() to the top of our setup() and change the size of our circle to 10. Remember, this will cause background() to only run once. function setup(){ createCanvas(400,400); background(12,123,220); } function draw(){ noStroke(); fill(255,194,10); circle(mouseX,mouseY,10); } We made a painting program! Our sketch is now drawing our circle over and over again at our mouseX and mouseY position without redrawing the background.","title":"mouseX and mouseY"},{"location":"02_variables/#mousepressed","text":"mousePressed() is a special function within p5 that is called every time we click our mouse. We can use this to clear our drawing to start on a fresh background. To use mousePressed() we need to make a new block of code. To clear our background when our mouse is pressed, we can add a new background() in our mousePressed() function. function setup(){ size(400,400); background(12,123,220); } function draw(){ noStroke(); fill(255,194,10); circle(mouseX,mouseY,10); } function mousePressed(){ background(12,123,220); } We made resetting painting program! As a note, mouseX and mouseY can replace any value in our sketch. If I move my background() from setup() to draw() and replace my circle diameter with mouseX . circle(200, 200, mouseX); Our mouseX variable now changes the size of our circle! The size of our circle controlled by the position of our mouse!","title":"mousePressed()"},{"location":"02_variables/#in-class-exercise-painting-program","text":"Spend some time using the sketch we wrote to create your own painting program! Try adjusting the opacity value in your fill() to get new results!","title":"In-class Exercise: Painting Program"},{"location":"02_variables/#width-and-height","text":"Some other built in p5 variables include width and height . These variables always store the width and height of my sketch. function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(width/2,height/2,80); }","title":"width and height"},{"location":"02_variables/#arithmetic-operators","text":"+ - Addition - - Subtraction * - Multiplication / - Division = - Equals","title":"Arithmetic Operators"},{"location":"02_variables/#what-is-a-variable","text":"What is mouseX or width ? Variables are named storage locations in our computer's memory where we can store values. mouseX and width are both named storage location where p5 is constantly updating their associated values. Simplified drawing of variables in memory","title":"What is a Variable?"},{"location":"02_variables/#making-our-own-variable","text":"Let's work towards this example: our circle moves across our canvas and we can click to reset it's position to the start. Click the canvas to reset our Circle!","title":"Making our Own Variable"},{"location":"02_variables/#steps-to-making-a-variable","text":"Stating let Name of variable Initialize variable","title":"Steps to Making a Variable"},{"location":"02_variables/#let","text":"We can use the keyword let to begin declaring a variable. Example: let frog; let toad; let bird; In JavaScript, we don't need to tell our editor what type of variable we are making. In other words, we don't need to let JavaScript know if our variable is a Number, a word, or something else. In part, it is up to the artist to keep track of what type of variable we want each new variable to be. Some variable types: JavaScript variables: Number: both decimal and whole numbers String: words or sentences ...and many more","title":"let"},{"location":"02_variables/#name","text":"We can name our variable anything, but it is good to use a name that allows us to keep track of what we want it to do. As an example, circleX to control the x position of our circle. Some rules to follow: Lower case letter to start Dog vs. dog No numbers as first character 1dog vs. dog1 No spaces black cat vs. blackCat use camelCase blackcat vs. blackCat Don\u2019t use reserved keywords or existing p5 variable names.","title":"Name"},{"location":"02_variables/#initialize","text":"Give our variable an initial value to start with. We can do this within a block of code: let circleX; function setup(){ createCanvas(400,400); circleX = 40; } Or, when we declare our variable: let circleX = 40; function setup(){ createCanvas(400,400); }","title":"Initialize"},{"location":"02_variables/#variable-scope","text":"Variables have two levels of scope, global and local . We won't go into too much detail about this now, but in short: Global variables are declared at the top of our sketch. They can be used within any block of code. Local variables are declared within a function and can only be used within that function.","title":"Variable Scope"},{"location":"02_variables/#making-our-circle-move","text":"After we declare the type and name of our variable and initialize its value, we should have this sketch: let circleX = 0; function setup(){ createCanvas(400,400); } function draw(){ background(12,123,220); noStroke(); fill(255,194,10); circle(200,200,80); } Then we need to replace our circle's X value with our new variable: circle(circleX,200,80); Lastly, we need a way to increase our variable over time. For this, we can use an incrementation operator.","title":"Making our Circle Move"},{"location":"02_variables/#incrementation-operators","text":"We need to increase our variable by a certain value, then assign that new value back to our variable. ourVariable = ourVariable+1 = ourVariable+=1 = ourVariable++ Subtraction - ourVariable-=2 Multiplication - ourVariable*=2 Division - ourVariable/=2 To move our circle, we can increment our variable circleX by 1 each time draw() is called. let circleX = 0; function setup(){ createCanvas(400, 400); } function draw(){ background(12, 123, 220); noStroke(); fill(255, 194, 10); circle(circleX, 200, 80); circleX += 1; } This example is repeating. Some extra code was added to make this example for the website. We'll learn more about this next class. We can change how fast the circle is moving by changing incrementation value. circleX += 10; This example is repeating. Some extra code was added to make this example for the website. We'll learn more about this next class.","title":"Incrementation Operators"},{"location":"02_variables/#random","text":"Reference Syntax: random(max) returns a random value between 0 and max random(min,max) returns a random value between min and max Parameters min - (Number) lower limit max - (Number) upper limit This is the first function we\u2019ve used that returns a value!","title":"random()"},{"location":"02_variables/#using-random","text":"We can use random() to give circleX a random value when we press our mouse! function mousePressed() { circleX = random(0,width); } Or, by moving our background() and adding some more variables, we can make many circles appear randomly on our screen. Variables: x y a r b g let x; let y; let a; let r; let g; let b; function setup(){ createCanvas(400, 400); background(12, 123, 220); } function draw(){ noStroke(); y = random(height); x = random(width); a = random(60,200); r = random(200,255); g = random(200,255); b = random(100); fill(r, g, b,a); circle(x, y,10); }","title":"Using Random"},{"location":"02_variables/#independent-exercise-face-generator","text":"DUE: By beginning of next class Click on the above sketch to make a random face! Open up the code template below and go to File -> Duplicate Read this code and play around with it to figure out how it works - a large part of learning to program is by reading the code of others! Code Template Use this code to make your own custom face generator! Maybe you add a nose, or hair! Or maybe you start from scratch and try to make your own custom generator. This is only an exercise, so play around and see what you can come up with! The only requirement of this exercise is that you add one more shapes that has its size, position, or color, controlled by a randomized variable. See if you can see the relationships between the different shapes to add your own features.","title":"Independent Exercise: Face Generator"},{"location":"02_variables/#submit","text":"To Canvas: Your p5 edit link To Discord: Your p5 edit link Three of your favorite faces captured as screenshots.","title":"Submit"},{"location":"03_flow/","text":"hljs.highlightAll(); // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); <script src=\"../assets/sketches/p5.js\"> Flow RECAP: What we learned last class: setup() and draw() How to write blocks of code mouseX and mouseY mousePressed() width and height Basic math in p5.js How to make our own variables How to use incrementation operators random() PLAN: if boolean expressions relational operators else and else if logical operators boolean data type Conditional Statement Conditional: if A conditional statement, often called an \"if statement\", is a block of code that only runs if a certain condition is met. We can think of conditions as statements that start with \"if\". Thinking back to our exercise on James Turrell. We could say: If the sky is light blue, the lights turn orange. If the sky is black, the light turn white. Or, as an example relevant to our moving ball from last class: If the circle reaches the edge of the sketch, move in the opposite direction. We'll slowly work towards this example, but first we need to know what an if statement looks like in code. if(...some condition...){ //run this code } With the parentheses of our if statement, we are looking to see if some condition is true. If it is true, the block of code will run. If it is not true, p5 will skip over the block of code and move on. We call the condition the if statement is checking a boolean expression . One way to create boolean expression is by using relational operators . Relational Operators Relational operators compare the values of two numbers and returns a value of true or false. > - greater than < - less than >= - greater than or equal to <= - less than or equal to == - equal to != - not equal to For example: 0 > 255 = true 54.5 < 54.4 = false Relational operators work best when we use them with variables. Let's use an if statement and a relational operator in our code to change the color of our sketch when our mouse is on the right side of our canvas. function setup() { createCanvas(400, 400); } function draw() { background(255, 255, 0); if (mouseX > width / 2) { background(255, 0, 0); } stroke(0, 0, 255); strokeWeight(4); line(width / 2, 0, width / 2, height); } Conditional: else We can use an else statement in conjunction with an if statement. And else statement is a block of code that will only run if the condition within our if statement is not met. A pseudo code example might look like: if(my birthday){ //Sing Happy Birthday! } else{ //Wait for my Birthday } We can use else in our screen color example to check when our mouse is on the right side of the screen. function setup() { createCanvas(400, 400); } function draw() { if (mouseX > width / 2) { background(255, 0, 0); } else { background(255, 255, 0); } stroke(0, 0, 255); strokeWeight(4); line(width / 2, 0, width / 2, height); } Conditional: else if In addition to else, we can use an else if statement after our if statement to check for specific conditions. else if , like if , checks to see if a boolean expression is true. If we change the size of our canvas to 300 by 300 or 600 by 600, we can easily divide our canvas into thirds. From there we can use an if , else if , and if statement to change the color of our canvas when our mouse is in the left, right, and center. function setup() { createCanvas(300, 300); } function draw() { if (mouseX < 100) { background(0, 0, 255); } else if (mouseX < 200) { background(0, 255, 0); } else { background(255, 0, 0); } stroke(0); line(100, 0, 100, height); line(200, 0, 200, height); } Class Exercise: Conditional Use what we have learned thus far to make the below example. Start with a 400 by 200 canvas. As a hint, you'll need to use two else if statements! No need to include the \"HOVER TO START\" message. That is just to keep the class website tidy! Logical Operators Logical Operators: && - And || - Or ! - Not We can use logical operators to check for multiple boolean expressions. Let's work towards making this hover effect! To begin, we could start by detecting in our mouse passes over the left side of our square. function setup() { createCanvas(400, 400); } function draw() { background(200); if (mouseX > 100) { fill(255); } else { fill(0); } noStroke(); rectMode(CENTER); square(200, 200, 200); } We can use the logical operator && to check if our mouseX and mouseY are within our circle. function setup() { createCanvas(400, 400); } function draw() { background(200); if (mouseX > 100 && mouseX < 300 && mouseY > 100 && mouseY < 300) { fill(255); } else { fill(0); } noStroke(); rectMode(CENTER); square(200, 200, 200); } We can also simply this code by replacing the x , y and width of our square with variables. If I keep my rectMode using CENTER, I can check my mouse position at the relationship between my x or y variable and half my width. This allows our code to work when our square is at any location and has any size. let x = 200; let y = 200; let w = 200; function setup() { createCanvas(400, 400); } function draw() { background(200); if (mouseX > x-w/2 && mouseX <x+w/2 && mouseY > y-w/2 && mouseY<y+w/2 ) { fill(255); } else { fill(0); } noStroke(); rectMode(CENTER); square(x, y, w); fill(255) circle(x,y,10); } if it is a new block of code only executed if a certain condition is what what goes inside our parantheses boolean expression relational operators compares two values use relation operators with variable change color based on side of mouse else when there is a relationshp between different things else if exercise logical operators and , or and not roller over exercise fadded circle - dist(); bouncing ball == show mistake x = x-7; x = x+7; show print variable for speed multiply -1 or statement Y gravity mousePressed another variable, mouse pressed boolean = !boolean. indpendent exercise","title":"03 flow"},{"location":"03_flow/#flow","text":"RECAP: What we learned last class: setup() and draw() How to write blocks of code mouseX and mouseY mousePressed() width and height Basic math in p5.js How to make our own variables How to use incrementation operators random() PLAN: if boolean expressions relational operators else and else if logical operators boolean data type Conditional Statement","title":"Flow"},{"location":"03_flow/#conditional-if","text":"A conditional statement, often called an \"if statement\", is a block of code that only runs if a certain condition is met. We can think of conditions as statements that start with \"if\". Thinking back to our exercise on James Turrell. We could say: If the sky is light blue, the lights turn orange. If the sky is black, the light turn white. Or, as an example relevant to our moving ball from last class: If the circle reaches the edge of the sketch, move in the opposite direction. We'll slowly work towards this example, but first we need to know what an if statement looks like in code. if(...some condition...){ //run this code } With the parentheses of our if statement, we are looking to see if some condition is true. If it is true, the block of code will run. If it is not true, p5 will skip over the block of code and move on. We call the condition the if statement is checking a boolean expression . One way to create boolean expression is by using relational operators .","title":"Conditional: if"},{"location":"03_flow/#relational-operators","text":"Relational operators compare the values of two numbers and returns a value of true or false. > - greater than < - less than >= - greater than or equal to <= - less than or equal to == - equal to != - not equal to For example: 0 > 255 = true 54.5 < 54.4 = false Relational operators work best when we use them with variables. Let's use an if statement and a relational operator in our code to change the color of our sketch when our mouse is on the right side of our canvas. function setup() { createCanvas(400, 400); } function draw() { background(255, 255, 0); if (mouseX > width / 2) { background(255, 0, 0); } stroke(0, 0, 255); strokeWeight(4); line(width / 2, 0, width / 2, height); }","title":"Relational Operators"},{"location":"03_flow/#conditional-else","text":"We can use an else statement in conjunction with an if statement. And else statement is a block of code that will only run if the condition within our if statement is not met. A pseudo code example might look like: if(my birthday){ //Sing Happy Birthday! } else{ //Wait for my Birthday } We can use else in our screen color example to check when our mouse is on the right side of the screen. function setup() { createCanvas(400, 400); } function draw() { if (mouseX > width / 2) { background(255, 0, 0); } else { background(255, 255, 0); } stroke(0, 0, 255); strokeWeight(4); line(width / 2, 0, width / 2, height); }","title":"Conditional: else"},{"location":"03_flow/#conditional-else-if","text":"In addition to else, we can use an else if statement after our if statement to check for specific conditions. else if , like if , checks to see if a boolean expression is true. If we change the size of our canvas to 300 by 300 or 600 by 600, we can easily divide our canvas into thirds. From there we can use an if , else if , and if statement to change the color of our canvas when our mouse is in the left, right, and center. function setup() { createCanvas(300, 300); } function draw() { if (mouseX < 100) { background(0, 0, 255); } else if (mouseX < 200) { background(0, 255, 0); } else { background(255, 0, 0); } stroke(0); line(100, 0, 100, height); line(200, 0, 200, height); }","title":"Conditional: else if"},{"location":"03_flow/#class-exercise-conditional","text":"Use what we have learned thus far to make the below example. Start with a 400 by 200 canvas. As a hint, you'll need to use two else if statements! No need to include the \"HOVER TO START\" message. That is just to keep the class website tidy!","title":"Class Exercise: Conditional"},{"location":"03_flow/#logical-operators","text":"Logical Operators: && - And || - Or ! - Not We can use logical operators to check for multiple boolean expressions. Let's work towards making this hover effect! To begin, we could start by detecting in our mouse passes over the left side of our square. function setup() { createCanvas(400, 400); } function draw() { background(200); if (mouseX > 100) { fill(255); } else { fill(0); } noStroke(); rectMode(CENTER); square(200, 200, 200); } We can use the logical operator && to check if our mouseX and mouseY are within our circle. function setup() { createCanvas(400, 400); } function draw() { background(200); if (mouseX > 100 && mouseX < 300 && mouseY > 100 && mouseY < 300) { fill(255); } else { fill(0); } noStroke(); rectMode(CENTER); square(200, 200, 200); } We can also simply this code by replacing the x , y and width of our square with variables. If I keep my rectMode using CENTER, I can check my mouse position at the relationship between my x or y variable and half my width. This allows our code to work when our square is at any location and has any size. let x = 200; let y = 200; let w = 200; function setup() { createCanvas(400, 400); } function draw() { background(200); if (mouseX > x-w/2 && mouseX <x+w/2 && mouseY > y-w/2 && mouseY<y+w/2 ) { fill(255); } else { fill(0); } noStroke(); rectMode(CENTER); square(x, y, w); fill(255) circle(x,y,10); } if it is a new block of code only executed if a certain condition is what what goes inside our parantheses boolean expression relational operators compares two values use relation operators with variable change color based on side of mouse else when there is a relationshp between different things else if exercise logical operators and , or and not roller over exercise fadded circle - dist(); bouncing ball == show mistake x = x-7; x = x+7; show print variable for speed multiply -1 or statement Y gravity mousePressed another variable, mouse pressed boolean = !boolean. indpendent exercise","title":"Logical Operators"},{"location":"Introduction/","text":"/* Button styling */ #focusToggle { position: fixed; bottom: 20px; right: 20px; z-index: 1000; padding: 0.2em .5em; background: #333; color: #fff; border: none; border-radius: 6px; cursor: pointer; opacity: .5; } /* Hide button on small screens */ @media (max-width: 767.9px) { #focusToggle { display: none; } } /* Focus mode styles */ .focus-mode .section-content, .focus-mode h2 { display: none; /* hide all by default in focus mode */ } .focus-mode .section-content.active, .focus-mode h2.active { display: block; /* show only active section */ } Focus document.addEventListener(\"DOMContentLoaded\", () => { const button = document.getElementById(\"focusToggle\"); let focusEnabled = false; // Wrap content after each h2 const headings = document.querySelectorAll(\"h2\"); headings.forEach(h2 => { const wrapper = document.createElement(\"div\"); wrapper.classList.add(\"section-content\"); let sibling = h2.nextElementSibling; while (sibling && sibling.tagName !== \"H2\") { const next = sibling.nextElementSibling; wrapper.appendChild(sibling); sibling = next; } h2.insertAdjacentElement(\"afterend\", wrapper); }); const sections = document.querySelectorAll(\".section-content\"); function showSectionById(id) { sections.forEach(wrapper => { const h2 = wrapper.previousElementSibling; if (h2.id === id) { wrapper.classList.add(\"active\"); h2.classList.add(\"active\"); } else { wrapper.classList.remove(\"active\"); h2.classList.remove(\"active\"); } }); } // Default section if (location.hash) { showSectionById(location.hash.substring(1)); } else if (headings.length) { showSectionById(headings[0].id); } window.addEventListener(\"hashchange\", () => { showSectionById(location.hash.substring(1)); }); // Toggle focus mode function toggleFocusMode(enable) { focusEnabled = enable; document.body.classList.toggle(\"focus-mode\", focusEnabled); button.textContent = focusEnabled ? \"Exit Focus\" : \"Focus\"; } button.addEventListener(\"click\", () => { toggleFocusMode(!focusEnabled); }); // Disable focus mode on small screens function checkScreenWidth() { if (window.innerWidth <= 767.9) { toggleFocusMode(false); // automatically turn off button.style.display = \"none\"; // hide button } else { button.style.display = \"block\"; // show button } } window.addEventListener(\"resize\", checkScreenWidth); checkScreenWidth(); // initial check }); HELLO! Plan For Today 2 Hours 30 min Introductions - 15 min About Me - 5 min Syllabus Review - 10 min Schedule and Class Website - 5 min Class Discord - 10 min Break - 10 min Course Goals - 10 min Playing With Code(s) Introductions Name Pronouns Home college/Major/Year Any experience you have had with Code or Programming? Why were you interested in signing up for this course and what is one thing you are looking to take away from this class? If you have one, favorite art work that combines art and technology? About Me Vincent Roca, Assistant Professor of Media Studies (you can call me Vinny) He/Him Media Art/Games/Animation/Sculpture Syllabus Class Syllabus Class Website and Schedule Class Website: code.vinnyroca.info If you see an error or typo, please send me an email or Discord message. Schedule Class Discord Join the Class Discord Please change your nickname on the server to match your name in the classroom. How to change your server nickname Course Goals To learn the fundamentals of the programming for artistic practice. To examine the relationship between code, art and technology critically in a variety of contexts. Practice p5.js and JavaScript Learn the foundations of programming from variables to objects Learn how to create visual, sonic and interactive media artworks Basics of HTML and CSS Learn how to put on p5.js projects on the internet on our own websites! Projects Time An experimental clock that provides a different relationship to time, Narrative Blend text, functions and algorithms together to reveal a narrative or experience through the manipulation of images. Performance (Group Project of 3-4) Use sound, camera, and interactive inputs and outputs to generate a projected performance. Game Ring Use new knowledge in object oriented program to create a game that emerges from your lived experience of the world. The class will create a series of websites for our games that are all interconnected through a web ring. Thinking, Reading, Watching In this course, we will be studying the cultural, artistic, and political impacts of programming. To facilitate this study, we will hold four critical discussions throughout the quarter, each covering a different topic. Art && Technology History of the Future , Casey Raes Glitch Feminism , Legacy Russell Cyberfeminist Index , Mindy Seu Culture && Ideology Algorithms of Oppression , Safiya Noble Indigenous Circuits: Navajo Women and the Racialization of Early Electronic Manufacture , Lisa Nakamura It\u2019s In the Game\u201917 - Sondra Perry Surveillance && Power Citizenfour , Laura Poitras Helga Tawil-Souri , Digital Occupation Facial Weaponization Suite , Zach Blas Internet && Play Making Space for A Handmade Web , Chia Amisola A Handmade Web , J. R. Carpenter Against the Dark Forest , Erin Kissane","title":"Introduction"},{"location":"Introduction/#hello","text":"","title":"HELLO!"},{"location":"Introduction/#plan-for-today","text":"2 Hours 30 min Introductions - 15 min About Me - 5 min Syllabus Review - 10 min Schedule and Class Website - 5 min Class Discord - 10 min Break - 10 min Course Goals - 10 min Playing With Code(s)","title":"Plan For Today"},{"location":"Introduction/#introductions","text":"Name Pronouns Home college/Major/Year Any experience you have had with Code or Programming? Why were you interested in signing up for this course and what is one thing you are looking to take away from this class? If you have one, favorite art work that combines art and technology?","title":"Introductions"},{"location":"Introduction/#about-me","text":"Vincent Roca, Assistant Professor of Media Studies (you can call me Vinny) He/Him Media Art/Games/Animation/Sculpture","title":"About Me"},{"location":"Introduction/#syllabus","text":"Class Syllabus","title":"Syllabus"},{"location":"Introduction/#class-website-and-schedule","text":"Class Website: code.vinnyroca.info If you see an error or typo, please send me an email or Discord message. Schedule","title":"Class Website and Schedule"},{"location":"Introduction/#class-discord","text":"Join the Class Discord Please change your nickname on the server to match your name in the classroom. How to change your server nickname","title":"Class Discord"},{"location":"Introduction/#course-goals","text":"To learn the fundamentals of the programming for artistic practice. To examine the relationship between code, art and technology critically in a variety of contexts.","title":"Course Goals"},{"location":"Introduction/#practice","text":"","title":"Practice"},{"location":"Introduction/#p5js-and-javascript","text":"Learn the foundations of programming from variables to objects Learn how to create visual, sonic and interactive media artworks","title":"p5.js and JavaScript"},{"location":"Introduction/#basics-of-html-and-css","text":"Learn how to put on p5.js projects on the internet on our own websites!","title":"Basics of HTML and CSS"},{"location":"Introduction/#projects","text":"","title":"Projects"},{"location":"Introduction/#time","text":"An experimental clock that provides a different relationship to time,","title":"Time"},{"location":"Introduction/#narrative","text":"Blend text, functions and algorithms together to reveal a narrative or experience through the manipulation of images.","title":"Narrative"},{"location":"Introduction/#performance-group-project-of-3-4","text":"Use sound, camera, and interactive inputs and outputs to generate a projected performance.","title":"Performance (Group Project of 3-4)"},{"location":"Introduction/#game-ring","text":"Use new knowledge in object oriented program to create a game that emerges from your lived experience of the world. The class will create a series of websites for our games that are all interconnected through a web ring.","title":"Game Ring"},{"location":"Introduction/#thinking-reading-watching","text":"In this course, we will be studying the cultural, artistic, and political impacts of programming. To facilitate this study, we will hold four critical discussions throughout the quarter, each covering a different topic.","title":"Thinking, Reading, Watching"},{"location":"Introduction/#art-technology","text":"History of the Future , Casey Raes Glitch Feminism , Legacy Russell Cyberfeminist Index , Mindy Seu","title":"Art &amp;&amp; Technology"},{"location":"Introduction/#culture-ideology","text":"Algorithms of Oppression , Safiya Noble Indigenous Circuits: Navajo Women and the Racialization of Early Electronic Manufacture , Lisa Nakamura It\u2019s In the Game\u201917 - Sondra Perry","title":"Culture &amp;&amp; Ideology"},{"location":"Introduction/#surveillance-power","text":"Citizenfour , Laura Poitras Helga Tawil-Souri , Digital Occupation Facial Weaponization Suite , Zach Blas","title":"Surveillance &amp;&amp; Power"},{"location":"Introduction/#internet-play","text":"Making Space for A Handmade Web , Chia Amisola A Handmade Web , J. R. Carpenter Against the Dark Forest , Erin Kissane","title":"Internet &amp;&amp; Play"},{"location":"art/","text":"","title":"Art && Technology"},{"location":"clock/","text":"clock time and map to show movement can map the variable introduce math concepts, like sin and cos","title":"Clock"},{"location":"culture/","text":"","title":"Culture && Ideology"},{"location":"game/","text":"","title":"Game Ring"},{"location":"narrative/","text":"","title":"Narrative"},{"location":"performance/","text":"","title":"Performance"},{"location":"play/","text":"","title":"Play && Internet"},{"location":"power/","text":"","title":"Power && Surveillance"},{"location":"schedule/","text":"Schedule table { border: none !important; border-collapse: collapse !important; } tbody td{ border: .15em solid !important; } td:nth-child(1){ border: none !important; } tbody{ } td{ } th{ border: none !important; } tbody tr:nth-child(4n+1), tbody tr:nth-child(4n+2) { background-color: #dee0e3 ; } tbody td:first-child { border-right: none; } #no-class{ background-color: pink; } body{ } } @media (min-width: 768px) { .col-md-9 { width: 100% !important; } .d-md-block { display: none !important; } #component-content{ margin-left:0 !important; } } // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); Please note that is this is a live schedule and is ever evolving as the course (/world) changes. Please check back frequently for due dates of assignments and course proceedings. This scedule contains links to all in-class lectures and tutorials as well as links to class assignments. Course Plan W Day Class Due 1 TUES 8/26 - Introduction(s) - Playing with Code(s) THUR 8/28 - Tutorial: p5.js, Shape, and Color Due: - Sign up for p5.js 2 TUES 9/2 - Tutorial: Variables Due: - Drawing In Color THUR 9/4 - Tutorial: [Flow] Due: - Face Generator 3 TUES 9/9 - Tutorial: [Repeat] Due: - Flow Exercise THUR 9/11 - Tutorial: [Math && Time] - Assign: Time Due: - Repeat Exercise 4 TUES 9/16 - Discussion \ud83d\udcd6 - Studio Time: Time Due: - Begin work on Time project Due on Monday Before 5 pm: - Art && Technology Response THUR 9/18 CRIT \ud83c\udf1e: Time Due: - Time Project 5 TUES 9/23 - Tutorial: [Interactivity && Transforms] THUR 9/25 - Tutorial: [Text && Arrays] Due: - Exercise 6 TUES 9/30 - Tutorial: [Image && Algorithms] Due: - Exercise THUR 10/2 - Tutorial [Functions] Due: - Exercise 7 TUES 10/7 - Discussion \ud83d\udcd6 - Studio Time: Narrative Due: - Begin work on Narrative project Due on Monday Before 5 pm: - Culture && Ideology Response THUR 10/9 CRIT \ud83c\udf1e: Narrative Due: Narrative Project 8 TUES 10/14 No Class \ud83c\udf1d: Break Break THUR 10/16 - Tutorial: [Sound In && Sound Out] - Assign: Performance 9 TUES 10/21 - Tutorial: [Capture] Due: - Sound Exercise - Performance Groups THUR 10/23 - Discussion \ud83d\udcd6 - Studio Time: Performance Due: - Begin work on Performance project Due on Monday Before 5 pm: - Power && Surveillance Response 10 TUES 10/28 - Studio Time: Testing Performance Due: - Completed Framework of Performance Project THUR 10/30 CRIT \ud83c\udf1e: Performance Due: - Performance Project 11 TUES 11/4 - Tutorial: [Classes && Objects] THUR 11/6 - Tutorial: [Classes && Objects] Due: - Classes Exercise 12 TUES 11/11 - Tutorial: [VS Code && HTML] Due: - Game Ring Design Document THUR 11/13 - Tutorial: [CSS + Github] Due: - Game Ring HTML Mock-up 13 TUES 11/18 - Studio Time: Game Ring Due: - Git Repository and Game Ring Web Address THUR 11/20 - Discussion \ud83d\udcd6 - Studio Time: Game Ring Due on Monday Before 5 pm: - Play && Internet Response 14 TUES 11/25 - Studio Time: Game Ring Due: - Continued work on Game Ring THUR 11/27 No Class \ud83c\udf1d: Break Break 15 TUES 12/2 CRIT \ud83c\udf1e: Game Ring Due: Game Ring Project","title":"Schedule"},{"location":"schedule/#schedule","text":"table { border: none !important; border-collapse: collapse !important; } tbody td{ border: .15em solid !important; } td:nth-child(1){ border: none !important; } tbody{ } td{ } th{ border: none !important; } tbody tr:nth-child(4n+1), tbody tr:nth-child(4n+2) { background-color: #dee0e3 ; } tbody td:first-child { border-right: none; } #no-class{ background-color: pink; } body{ } } @media (min-width: 768px) { .col-md-9 { width: 100% !important; } .d-md-block { display: none !important; } #component-content{ margin-left:0 !important; } } // Get the header element let header = document.querySelector('header'); // Get the height of the header document.querySelectorAll('a[href^=\"#\"]') .forEach(function (anchor) { anchor.addEventListener('click', function (event) { event.preventDefault(); // Get the target element that // the anchor link points to let target = document.querySelector( this.getAttribute('href') ); let headerHeight = header.offsetHeight*2; let targetPosition = target .getBoundingClientRect().top - headerHeight; window.scrollTo({ top: targetPosition + window.scrollY, behavior: 'smooth' }); }); }); Please note that is this is a live schedule and is ever evolving as the course (/world) changes. Please check back frequently for due dates of assignments and course proceedings. This scedule contains links to all in-class lectures and tutorials as well as links to class assignments.","title":"Schedule"},{"location":"schedule/#course-plan","text":"W Day Class Due 1 TUES 8/26 - Introduction(s) - Playing with Code(s) THUR 8/28 - Tutorial: p5.js, Shape, and Color Due: - Sign up for p5.js 2 TUES 9/2 - Tutorial: Variables Due: - Drawing In Color THUR 9/4 - Tutorial: [Flow] Due: - Face Generator 3 TUES 9/9 - Tutorial: [Repeat] Due: - Flow Exercise THUR 9/11 - Tutorial: [Math && Time] - Assign: Time Due: - Repeat Exercise 4 TUES 9/16 - Discussion \ud83d\udcd6 - Studio Time: Time Due: - Begin work on Time project Due on Monday Before 5 pm: - Art && Technology Response THUR 9/18 CRIT \ud83c\udf1e: Time Due: - Time Project 5 TUES 9/23 - Tutorial: [Interactivity && Transforms] THUR 9/25 - Tutorial: [Text && Arrays] Due: - Exercise 6 TUES 9/30 - Tutorial: [Image && Algorithms] Due: - Exercise THUR 10/2 - Tutorial [Functions] Due: - Exercise 7 TUES 10/7 - Discussion \ud83d\udcd6 - Studio Time: Narrative Due: - Begin work on Narrative project Due on Monday Before 5 pm: - Culture && Ideology Response THUR 10/9 CRIT \ud83c\udf1e: Narrative Due: Narrative Project 8 TUES 10/14 No Class \ud83c\udf1d: Break Break THUR 10/16 - Tutorial: [Sound In && Sound Out] - Assign: Performance 9 TUES 10/21 - Tutorial: [Capture] Due: - Sound Exercise - Performance Groups THUR 10/23 - Discussion \ud83d\udcd6 - Studio Time: Performance Due: - Begin work on Performance project Due on Monday Before 5 pm: - Power && Surveillance Response 10 TUES 10/28 - Studio Time: Testing Performance Due: - Completed Framework of Performance Project THUR 10/30 CRIT \ud83c\udf1e: Performance Due: - Performance Project 11 TUES 11/4 - Tutorial: [Classes && Objects] THUR 11/6 - Tutorial: [Classes && Objects] Due: - Classes Exercise 12 TUES 11/11 - Tutorial: [VS Code && HTML] Due: - Game Ring Design Document THUR 11/13 - Tutorial: [CSS + Github] Due: - Game Ring HTML Mock-up 13 TUES 11/18 - Studio Time: Game Ring Due: - Git Repository and Game Ring Web Address THUR 11/20 - Discussion \ud83d\udcd6 - Studio Time: Game Ring Due on Monday Before 5 pm: - Play && Internet Response 14 TUES 11/25 - Studio Time: Game Ring Due: - Continued work on Game Ring THUR 11/27 No Class \ud83c\udf1d: Break Break 15 TUES 12/2 CRIT \ud83c\udf1e: Game Ring Due: Game Ring Project","title":"Course Plan"},{"location":"time/","text":"","title":"Time"}]}